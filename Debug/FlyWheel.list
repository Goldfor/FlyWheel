
FlyWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08007024  08007024  00017024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800704c  0800704c  0002fc30  2**0
                  CONTENTS
  4 .ARM          00000000  0800704c  0800704c  0002fc30  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800704c  0800704c  0002fc30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800704c  0800704c  0001704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007050  08007050  00017050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .eeprom       00000030  0800fc00  0800fc00  0002fc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000054  20000000  08007054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000240  20000058  080070a8  00020058  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20000298  080070a8  00020298  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002fc30  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105a9  00000000  00000000  0002fc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf2  00000000  00000000  00040202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00042ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef0  00000000  00000000  00043f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001941f  00000000  00000000  00044e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014485  00000000  00000000  0005e237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f245  00000000  00000000  000726bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00101901  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000450c  00000000  00000000  00101954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000058 	.word	0x20000058
 800012c:	00000000 	.word	0x00000000
 8000130:	0800700c 	.word	0x0800700c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000005c 	.word	0x2000005c
 800014c:	0800700c 	.word	0x0800700c

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <__aeabi_d2f>:
 800076c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000770:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000774:	bf24      	itt	cs
 8000776:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800077a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800077e:	d90d      	bls.n	800079c <__aeabi_d2f+0x30>
 8000780:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000784:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000788:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800078c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000790:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000794:	bf08      	it	eq
 8000796:	f020 0001 	biceq.w	r0, r0, #1
 800079a:	4770      	bx	lr
 800079c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007a0:	d121      	bne.n	80007e6 <__aeabi_d2f+0x7a>
 80007a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007a6:	bfbc      	itt	lt
 80007a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007ac:	4770      	bxlt	lr
 80007ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007b6:	f1c2 0218 	rsb	r2, r2, #24
 80007ba:	f1c2 0c20 	rsb	ip, r2, #32
 80007be:	fa10 f30c 	lsls.w	r3, r0, ip
 80007c2:	fa20 f002 	lsr.w	r0, r0, r2
 80007c6:	bf18      	it	ne
 80007c8:	f040 0001 	orrne.w	r0, r0, #1
 80007cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007d8:	ea40 000c 	orr.w	r0, r0, ip
 80007dc:	fa23 f302 	lsr.w	r3, r3, r2
 80007e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007e4:	e7cc      	b.n	8000780 <__aeabi_d2f+0x14>
 80007e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007ea:	d107      	bne.n	80007fc <__aeabi_d2f+0x90>
 80007ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007f0:	bf1e      	ittt	ne
 80007f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007fa:	4770      	bxne	lr
 80007fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000800:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000804:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop

0800080c <__aeabi_frsub>:
 800080c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000810:	e002      	b.n	8000818 <__addsf3>
 8000812:	bf00      	nop

08000814 <__aeabi_fsub>:
 8000814:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000818 <__addsf3>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	bf1f      	itttt	ne
 800081c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000820:	ea92 0f03 	teqne	r2, r3
 8000824:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000828:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800082c:	d06a      	beq.n	8000904 <__addsf3+0xec>
 800082e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000832:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000836:	bfc1      	itttt	gt
 8000838:	18d2      	addgt	r2, r2, r3
 800083a:	4041      	eorgt	r1, r0
 800083c:	4048      	eorgt	r0, r1
 800083e:	4041      	eorgt	r1, r0
 8000840:	bfb8      	it	lt
 8000842:	425b      	neglt	r3, r3
 8000844:	2b19      	cmp	r3, #25
 8000846:	bf88      	it	hi
 8000848:	4770      	bxhi	lr
 800084a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800085e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000862:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000866:	bf18      	it	ne
 8000868:	4249      	negne	r1, r1
 800086a:	ea92 0f03 	teq	r2, r3
 800086e:	d03f      	beq.n	80008f0 <__addsf3+0xd8>
 8000870:	f1a2 0201 	sub.w	r2, r2, #1
 8000874:	fa41 fc03 	asr.w	ip, r1, r3
 8000878:	eb10 000c 	adds.w	r0, r0, ip
 800087c:	f1c3 0320 	rsb	r3, r3, #32
 8000880:	fa01 f103 	lsl.w	r1, r1, r3
 8000884:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000888:	d502      	bpl.n	8000890 <__addsf3+0x78>
 800088a:	4249      	negs	r1, r1
 800088c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000890:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000894:	d313      	bcc.n	80008be <__addsf3+0xa6>
 8000896:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800089a:	d306      	bcc.n	80008aa <__addsf3+0x92>
 800089c:	0840      	lsrs	r0, r0, #1
 800089e:	ea4f 0131 	mov.w	r1, r1, rrx
 80008a2:	f102 0201 	add.w	r2, r2, #1
 80008a6:	2afe      	cmp	r2, #254	; 0xfe
 80008a8:	d251      	bcs.n	800094e <__addsf3+0x136>
 80008aa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80008ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008b2:	bf08      	it	eq
 80008b4:	f020 0001 	biceq.w	r0, r0, #1
 80008b8:	ea40 0003 	orr.w	r0, r0, r3
 80008bc:	4770      	bx	lr
 80008be:	0049      	lsls	r1, r1, #1
 80008c0:	eb40 0000 	adc.w	r0, r0, r0
 80008c4:	3a01      	subs	r2, #1
 80008c6:	bf28      	it	cs
 80008c8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008cc:	d2ed      	bcs.n	80008aa <__addsf3+0x92>
 80008ce:	fab0 fc80 	clz	ip, r0
 80008d2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008d6:	ebb2 020c 	subs.w	r2, r2, ip
 80008da:	fa00 f00c 	lsl.w	r0, r0, ip
 80008de:	bfaa      	itet	ge
 80008e0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008e4:	4252      	neglt	r2, r2
 80008e6:	4318      	orrge	r0, r3
 80008e8:	bfbc      	itt	lt
 80008ea:	40d0      	lsrlt	r0, r2
 80008ec:	4318      	orrlt	r0, r3
 80008ee:	4770      	bx	lr
 80008f0:	f092 0f00 	teq	r2, #0
 80008f4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008f8:	bf06      	itte	eq
 80008fa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008fe:	3201      	addeq	r2, #1
 8000900:	3b01      	subne	r3, #1
 8000902:	e7b5      	b.n	8000870 <__addsf3+0x58>
 8000904:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000908:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800090c:	bf18      	it	ne
 800090e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000912:	d021      	beq.n	8000958 <__addsf3+0x140>
 8000914:	ea92 0f03 	teq	r2, r3
 8000918:	d004      	beq.n	8000924 <__addsf3+0x10c>
 800091a:	f092 0f00 	teq	r2, #0
 800091e:	bf08      	it	eq
 8000920:	4608      	moveq	r0, r1
 8000922:	4770      	bx	lr
 8000924:	ea90 0f01 	teq	r0, r1
 8000928:	bf1c      	itt	ne
 800092a:	2000      	movne	r0, #0
 800092c:	4770      	bxne	lr
 800092e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000932:	d104      	bne.n	800093e <__addsf3+0x126>
 8000934:	0040      	lsls	r0, r0, #1
 8000936:	bf28      	it	cs
 8000938:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800093c:	4770      	bx	lr
 800093e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000942:	bf3c      	itt	cc
 8000944:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000948:	4770      	bxcc	lr
 800094a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800094e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000952:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000956:	4770      	bx	lr
 8000958:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800095c:	bf16      	itet	ne
 800095e:	4608      	movne	r0, r1
 8000960:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000964:	4601      	movne	r1, r0
 8000966:	0242      	lsls	r2, r0, #9
 8000968:	bf06      	itte	eq
 800096a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800096e:	ea90 0f01 	teqeq	r0, r1
 8000972:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000976:	4770      	bx	lr

08000978 <__aeabi_ui2f>:
 8000978:	f04f 0300 	mov.w	r3, #0
 800097c:	e004      	b.n	8000988 <__aeabi_i2f+0x8>
 800097e:	bf00      	nop

08000980 <__aeabi_i2f>:
 8000980:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000984:	bf48      	it	mi
 8000986:	4240      	negmi	r0, r0
 8000988:	ea5f 0c00 	movs.w	ip, r0
 800098c:	bf08      	it	eq
 800098e:	4770      	bxeq	lr
 8000990:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000994:	4601      	mov	r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	e01c      	b.n	80009d6 <__aeabi_l2f+0x2a>

0800099c <__aeabi_ul2f>:
 800099c:	ea50 0201 	orrs.w	r2, r0, r1
 80009a0:	bf08      	it	eq
 80009a2:	4770      	bxeq	lr
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	e00a      	b.n	80009c0 <__aeabi_l2f+0x14>
 80009aa:	bf00      	nop

080009ac <__aeabi_l2f>:
 80009ac:	ea50 0201 	orrs.w	r2, r0, r1
 80009b0:	bf08      	it	eq
 80009b2:	4770      	bxeq	lr
 80009b4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009b8:	d502      	bpl.n	80009c0 <__aeabi_l2f+0x14>
 80009ba:	4240      	negs	r0, r0
 80009bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009c0:	ea5f 0c01 	movs.w	ip, r1
 80009c4:	bf02      	ittt	eq
 80009c6:	4684      	moveq	ip, r0
 80009c8:	4601      	moveq	r1, r0
 80009ca:	2000      	moveq	r0, #0
 80009cc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009d0:	bf08      	it	eq
 80009d2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009d6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009da:	fabc f28c 	clz	r2, ip
 80009de:	3a08      	subs	r2, #8
 80009e0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009e4:	db10      	blt.n	8000a08 <__aeabi_l2f+0x5c>
 80009e6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009ea:	4463      	add	r3, ip
 80009ec:	fa00 fc02 	lsl.w	ip, r0, r2
 80009f0:	f1c2 0220 	rsb	r2, r2, #32
 80009f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009f8:	fa20 f202 	lsr.w	r2, r0, r2
 80009fc:	eb43 0002 	adc.w	r0, r3, r2
 8000a00:	bf08      	it	eq
 8000a02:	f020 0001 	biceq.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	f102 0220 	add.w	r2, r2, #32
 8000a0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a10:	f1c2 0220 	rsb	r2, r2, #32
 8000a14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a18:	fa21 f202 	lsr.w	r2, r1, r2
 8000a1c:	eb43 0002 	adc.w	r0, r3, r2
 8000a20:	bf08      	it	eq
 8000a22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_fmul>:
 8000a28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a30:	bf1e      	ittt	ne
 8000a32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a36:	ea92 0f0c 	teqne	r2, ip
 8000a3a:	ea93 0f0c 	teqne	r3, ip
 8000a3e:	d06f      	beq.n	8000b20 <__aeabi_fmul+0xf8>
 8000a40:	441a      	add	r2, r3
 8000a42:	ea80 0c01 	eor.w	ip, r0, r1
 8000a46:	0240      	lsls	r0, r0, #9
 8000a48:	bf18      	it	ne
 8000a4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a4e:	d01e      	beq.n	8000a8e <__aeabi_fmul+0x66>
 8000a50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a64:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a68:	bf3e      	ittt	cc
 8000a6a:	0049      	lslcc	r1, r1, #1
 8000a6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a70:	005b      	lslcc	r3, r3, #1
 8000a72:	ea40 0001 	orr.w	r0, r0, r1
 8000a76:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a7a:	2afd      	cmp	r2, #253	; 0xfd
 8000a7c:	d81d      	bhi.n	8000aba <__aeabi_fmul+0x92>
 8000a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a86:	bf08      	it	eq
 8000a88:	f020 0001 	biceq.w	r0, r0, #1
 8000a8c:	4770      	bx	lr
 8000a8e:	f090 0f00 	teq	r0, #0
 8000a92:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a96:	bf08      	it	eq
 8000a98:	0249      	lsleq	r1, r1, #9
 8000a9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000aa2:	3a7f      	subs	r2, #127	; 0x7f
 8000aa4:	bfc2      	ittt	gt
 8000aa6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aaa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aae:	4770      	bxgt	lr
 8000ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	3a01      	subs	r2, #1
 8000aba:	dc5d      	bgt.n	8000b78 <__aeabi_fmul+0x150>
 8000abc:	f112 0f19 	cmn.w	r2, #25
 8000ac0:	bfdc      	itt	le
 8000ac2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ac6:	4770      	bxle	lr
 8000ac8:	f1c2 0200 	rsb	r2, r2, #0
 8000acc:	0041      	lsls	r1, r0, #1
 8000ace:	fa21 f102 	lsr.w	r1, r1, r2
 8000ad2:	f1c2 0220 	rsb	r2, r2, #32
 8000ad6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ada:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ade:	f140 0000 	adc.w	r0, r0, #0
 8000ae2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ae6:	bf08      	it	eq
 8000ae8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000aec:	4770      	bx	lr
 8000aee:	f092 0f00 	teq	r2, #0
 8000af2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000af6:	bf02      	ittt	eq
 8000af8:	0040      	lsleq	r0, r0, #1
 8000afa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000afe:	3a01      	subeq	r2, #1
 8000b00:	d0f9      	beq.n	8000af6 <__aeabi_fmul+0xce>
 8000b02:	ea40 000c 	orr.w	r0, r0, ip
 8000b06:	f093 0f00 	teq	r3, #0
 8000b0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b0e:	bf02      	ittt	eq
 8000b10:	0049      	lsleq	r1, r1, #1
 8000b12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b16:	3b01      	subeq	r3, #1
 8000b18:	d0f9      	beq.n	8000b0e <__aeabi_fmul+0xe6>
 8000b1a:	ea41 010c 	orr.w	r1, r1, ip
 8000b1e:	e78f      	b.n	8000a40 <__aeabi_fmul+0x18>
 8000b20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b24:	ea92 0f0c 	teq	r2, ip
 8000b28:	bf18      	it	ne
 8000b2a:	ea93 0f0c 	teqne	r3, ip
 8000b2e:	d00a      	beq.n	8000b46 <__aeabi_fmul+0x11e>
 8000b30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b34:	bf18      	it	ne
 8000b36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b3a:	d1d8      	bne.n	8000aee <__aeabi_fmul+0xc6>
 8000b3c:	ea80 0001 	eor.w	r0, r0, r1
 8000b40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	4770      	bx	lr
 8000b46:	f090 0f00 	teq	r0, #0
 8000b4a:	bf17      	itett	ne
 8000b4c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b50:	4608      	moveq	r0, r1
 8000b52:	f091 0f00 	teqne	r1, #0
 8000b56:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b5a:	d014      	beq.n	8000b86 <__aeabi_fmul+0x15e>
 8000b5c:	ea92 0f0c 	teq	r2, ip
 8000b60:	d101      	bne.n	8000b66 <__aeabi_fmul+0x13e>
 8000b62:	0242      	lsls	r2, r0, #9
 8000b64:	d10f      	bne.n	8000b86 <__aeabi_fmul+0x15e>
 8000b66:	ea93 0f0c 	teq	r3, ip
 8000b6a:	d103      	bne.n	8000b74 <__aeabi_fmul+0x14c>
 8000b6c:	024b      	lsls	r3, r1, #9
 8000b6e:	bf18      	it	ne
 8000b70:	4608      	movne	r0, r1
 8000b72:	d108      	bne.n	8000b86 <__aeabi_fmul+0x15e>
 8000b74:	ea80 0001 	eor.w	r0, r0, r1
 8000b78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_fdiv>:
 8000b90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b98:	bf1e      	ittt	ne
 8000b9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b9e:	ea92 0f0c 	teqne	r2, ip
 8000ba2:	ea93 0f0c 	teqne	r3, ip
 8000ba6:	d069      	beq.n	8000c7c <__aeabi_fdiv+0xec>
 8000ba8:	eba2 0203 	sub.w	r2, r2, r3
 8000bac:	ea80 0c01 	eor.w	ip, r0, r1
 8000bb0:	0249      	lsls	r1, r1, #9
 8000bb2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000bb6:	d037      	beq.n	8000c28 <__aeabi_fdiv+0x98>
 8000bb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bc4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	bf38      	it	cc
 8000bcc:	005b      	lslcc	r3, r3, #1
 8000bce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bd2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	bf24      	itt	cs
 8000bda:	1a5b      	subcs	r3, r3, r1
 8000bdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000be0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000be4:	bf24      	itt	cs
 8000be6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000bf2:	bf24      	itt	cs
 8000bf4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000bf8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c00:	bf24      	itt	cs
 8000c02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c0a:	011b      	lsls	r3, r3, #4
 8000c0c:	bf18      	it	ne
 8000c0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c12:	d1e0      	bne.n	8000bd6 <__aeabi_fdiv+0x46>
 8000c14:	2afd      	cmp	r2, #253	; 0xfd
 8000c16:	f63f af50 	bhi.w	8000aba <__aeabi_fmul+0x92>
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c30:	327f      	adds	r2, #127	; 0x7f
 8000c32:	bfc2      	ittt	gt
 8000c34:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3c:	4770      	bxgt	lr
 8000c3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c42:	f04f 0300 	mov.w	r3, #0
 8000c46:	3a01      	subs	r2, #1
 8000c48:	e737      	b.n	8000aba <__aeabi_fmul+0x92>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c52:	bf02      	ittt	eq
 8000c54:	0040      	lsleq	r0, r0, #1
 8000c56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c5a:	3a01      	subeq	r2, #1
 8000c5c:	d0f9      	beq.n	8000c52 <__aeabi_fdiv+0xc2>
 8000c5e:	ea40 000c 	orr.w	r0, r0, ip
 8000c62:	f093 0f00 	teq	r3, #0
 8000c66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c6a:	bf02      	ittt	eq
 8000c6c:	0049      	lsleq	r1, r1, #1
 8000c6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c72:	3b01      	subeq	r3, #1
 8000c74:	d0f9      	beq.n	8000c6a <__aeabi_fdiv+0xda>
 8000c76:	ea41 010c 	orr.w	r1, r1, ip
 8000c7a:	e795      	b.n	8000ba8 <__aeabi_fdiv+0x18>
 8000c7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c80:	ea92 0f0c 	teq	r2, ip
 8000c84:	d108      	bne.n	8000c98 <__aeabi_fdiv+0x108>
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	f47f af7d 	bne.w	8000b86 <__aeabi_fmul+0x15e>
 8000c8c:	ea93 0f0c 	teq	r3, ip
 8000c90:	f47f af70 	bne.w	8000b74 <__aeabi_fmul+0x14c>
 8000c94:	4608      	mov	r0, r1
 8000c96:	e776      	b.n	8000b86 <__aeabi_fmul+0x15e>
 8000c98:	ea93 0f0c 	teq	r3, ip
 8000c9c:	d104      	bne.n	8000ca8 <__aeabi_fdiv+0x118>
 8000c9e:	024b      	lsls	r3, r1, #9
 8000ca0:	f43f af4c 	beq.w	8000b3c <__aeabi_fmul+0x114>
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	e76e      	b.n	8000b86 <__aeabi_fmul+0x15e>
 8000ca8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cac:	bf18      	it	ne
 8000cae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cb2:	d1ca      	bne.n	8000c4a <__aeabi_fdiv+0xba>
 8000cb4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000cb8:	f47f af5c 	bne.w	8000b74 <__aeabi_fmul+0x14c>
 8000cbc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000cc0:	f47f af3c 	bne.w	8000b3c <__aeabi_fmul+0x114>
 8000cc4:	e75f      	b.n	8000b86 <__aeabi_fmul+0x15e>
 8000cc6:	bf00      	nop

08000cc8 <__gesf2>:
 8000cc8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ccc:	e006      	b.n	8000cdc <__cmpsf2+0x4>
 8000cce:	bf00      	nop

08000cd0 <__lesf2>:
 8000cd0:	f04f 0c01 	mov.w	ip, #1
 8000cd4:	e002      	b.n	8000cdc <__cmpsf2+0x4>
 8000cd6:	bf00      	nop

08000cd8 <__cmpsf2>:
 8000cd8:	f04f 0c01 	mov.w	ip, #1
 8000cdc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ce0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ce4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cec:	bf18      	it	ne
 8000cee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf2:	d011      	beq.n	8000d18 <__cmpsf2+0x40>
 8000cf4:	b001      	add	sp, #4
 8000cf6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cfa:	bf18      	it	ne
 8000cfc:	ea90 0f01 	teqne	r0, r1
 8000d00:	bf58      	it	pl
 8000d02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d06:	bf88      	it	hi
 8000d08:	17c8      	asrhi	r0, r1, #31
 8000d0a:	bf38      	it	cc
 8000d0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d10:	bf18      	it	ne
 8000d12:	f040 0001 	orrne.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d1c:	d102      	bne.n	8000d24 <__cmpsf2+0x4c>
 8000d1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d22:	d105      	bne.n	8000d30 <__cmpsf2+0x58>
 8000d24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d28:	d1e4      	bne.n	8000cf4 <__cmpsf2+0x1c>
 8000d2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d2e:	d0e1      	beq.n	8000cf4 <__cmpsf2+0x1c>
 8000d30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <__aeabi_cfrcmple>:
 8000d38:	4684      	mov	ip, r0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	4661      	mov	r1, ip
 8000d3e:	e7ff      	b.n	8000d40 <__aeabi_cfcmpeq>

08000d40 <__aeabi_cfcmpeq>:
 8000d40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d42:	f7ff ffc9 	bl	8000cd8 <__cmpsf2>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	bf48      	it	mi
 8000d4a:	f110 0f00 	cmnmi.w	r0, #0
 8000d4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d50 <__aeabi_fcmpeq>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff fff4 	bl	8000d40 <__aeabi_cfcmpeq>
 8000d58:	bf0c      	ite	eq
 8000d5a:	2001      	moveq	r0, #1
 8000d5c:	2000      	movne	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_fcmplt>:
 8000d64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d68:	f7ff ffea 	bl	8000d40 <__aeabi_cfcmpeq>
 8000d6c:	bf34      	ite	cc
 8000d6e:	2001      	movcc	r0, #1
 8000d70:	2000      	movcs	r0, #0
 8000d72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d76:	bf00      	nop

08000d78 <__aeabi_fcmple>:
 8000d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d7c:	f7ff ffe0 	bl	8000d40 <__aeabi_cfcmpeq>
 8000d80:	bf94      	ite	ls
 8000d82:	2001      	movls	r0, #1
 8000d84:	2000      	movhi	r0, #0
 8000d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8a:	bf00      	nop

08000d8c <__aeabi_fcmpge>:
 8000d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d90:	f7ff ffd2 	bl	8000d38 <__aeabi_cfrcmple>
 8000d94:	bf94      	ite	ls
 8000d96:	2001      	movls	r0, #1
 8000d98:	2000      	movhi	r0, #0
 8000d9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9e:	bf00      	nop

08000da0 <__aeabi_fcmpgt>:
 8000da0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da4:	f7ff ffc8 	bl	8000d38 <__aeabi_cfrcmple>
 8000da8:	bf34      	ite	cc
 8000daa:	2001      	movcc	r0, #1
 8000dac:	2000      	movcs	r0, #0
 8000dae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db2:	bf00      	nop

08000db4 <__aeabi_f2iz>:
 8000db4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000db8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000dbc:	d30f      	bcc.n	8000dde <__aeabi_f2iz+0x2a>
 8000dbe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dc6:	d90d      	bls.n	8000de4 <__aeabi_f2iz+0x30>
 8000dc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dd0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000dd4:	fa23 f002 	lsr.w	r0, r3, r2
 8000dd8:	bf18      	it	ne
 8000dda:	4240      	negne	r0, r0
 8000ddc:	4770      	bx	lr
 8000dde:	f04f 0000 	mov.w	r0, #0
 8000de2:	4770      	bx	lr
 8000de4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000de8:	d101      	bne.n	8000dee <__aeabi_f2iz+0x3a>
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	d105      	bne.n	8000dfa <__aeabi_f2iz+0x46>
 8000dee:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f04f 0000 	mov.w	r0, #0
 8000dfe:	4770      	bx	lr

08000e00 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e12:	4a19      	ldr	r2, [pc, #100]	; (8000e78 <MX_ADC1_Init+0x78>)
 8000e14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e2a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e36:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e3e:	f001 fc93 	bl	8002768 <HAL_ADC_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e48:	f000 ff4a 	bl	8001ce0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_ADC1_Init+0x74>)
 8000e5e:	f001 fd5b 	bl	8002918 <HAL_ADC_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e68:	f000 ff3a 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000074 	.word	0x20000074
 8000e78:	40012400 	.word	0x40012400

08000e7c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <HAL_ADC_MspInit+0x6c>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d121      	bne.n	8000ee0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a12      	ldr	r2, [pc, #72]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <HAL_ADC_MspInit+0x70>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000ecc:	2306      	movs	r3, #6
 8000ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <HAL_ADC_MspInit+0x74>)
 8000edc:	f002 fa0a 	bl	80032f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40012400 	.word	0x40012400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010800 	.word	0x40010800

08000ef4 <Flash_Write>:
	1

};

uint32_t Flash_Write(uint32_t address, uint32_t* data, uint32_t len)
{
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	75fb      	strb	r3, [r7, #23]

	result = HAL_FLASH_Unlock();
 8000f04:	f002 f85c 	bl	8002fc0 <HAL_FLASH_Unlock>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	75fb      	strb	r3, [r7, #23]
	if (result) return result;
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <Flash_Write+0x22>
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	e037      	b.n	8000f86 <Flash_Write+0x92>
	result = Flash_Erase(address);
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	f000 f83a 	bl	8000f90 <Flash_Erase>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	75fb      	strb	r3, [r7, #23]
	if (result) return HAL_FLASH_GetError();
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <Flash_Write+0x3a>
 8000f26:	f002 f881 	bl	800302c <HAL_FLASH_GetError>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	e02b      	b.n	8000f86 <Flash_Write+0x92>
	uint32_t i = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
	for (uint32_t addr = address; addr < address + len; addr += 4)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	e01b      	b.n	8000f70 <Flash_Write+0x7c>
	{
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data[i++]);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	61fa      	str	r2, [r7, #28]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	4413      	add	r3, r2
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2200      	movs	r2, #0
 8000f48:	461c      	mov	r4, r3
 8000f4a:	4615      	mov	r5, r2
 8000f4c:	4622      	mov	r2, r4
 8000f4e:	462b      	mov	r3, r5
 8000f50:	69b9      	ldr	r1, [r7, #24]
 8000f52:	2002      	movs	r0, #2
 8000f54:	f001 ffc4 	bl	8002ee0 <HAL_FLASH_Program>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	75fb      	strb	r3, [r7, #23]
		if (result) return HAL_FLASH_GetError();
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <Flash_Write+0x76>
 8000f62:	f002 f863 	bl	800302c <HAL_FLASH_GetError>
 8000f66:	4603      	mov	r3, r0
 8000f68:	e00d      	b.n	8000f86 <Flash_Write+0x92>
	for (uint32_t addr = address; addr < address + len; addr += 4)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3dd      	bcc.n	8000f38 <Flash_Write+0x44>
	}
	result = HAL_FLASH_Lock();
 8000f7c:	f002 f846 	bl	800300c <HAL_FLASH_Lock>
 8000f80:	4603      	mov	r3, r0
 8000f82:	75fb      	strb	r3, [r7, #23]
	return result;
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3720      	adds	r7, #32
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f90 <Flash_Erase>:

HAL_StatusTypeDef Flash_Erase(uint32_t address)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	static uint32_t PAGEError = 0;
	eraseSetting.PageAddress = address - address % 0x400;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f9e:	f023 0303 	bic.w	r3, r3, #3
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <Flash_Erase+0x28>)
 8000fa4:	6093      	str	r3, [r2, #8]
	return HAL_FLASHEx_Erase(&eraseSetting, &PAGEError);
 8000fa6:	4905      	ldr	r1, [pc, #20]	; (8000fbc <Flash_Erase+0x2c>)
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <Flash_Erase+0x28>)
 8000faa:	f002 f8fb 	bl	80031a4 <HAL_FLASHEx_Erase>
 8000fae:	4603      	mov	r3, r0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	200000a4 	.word	0x200000a4

08000fc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	4b31      	ldr	r3, [pc, #196]	; (800109c <MX_GPIO_Init+0xdc>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a30      	ldr	r2, [pc, #192]	; (800109c <MX_GPIO_Init+0xdc>)
 8000fda:	f043 0320 	orr.w	r3, r3, #32
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MX_GPIO_Init+0xdc>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MX_GPIO_Init+0xdc>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a2a      	ldr	r2, [pc, #168]	; (800109c <MX_GPIO_Init+0xdc>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b28      	ldr	r3, [pc, #160]	; (800109c <MX_GPIO_Init+0xdc>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <MX_GPIO_Init+0xdc>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a24      	ldr	r2, [pc, #144]	; (800109c <MX_GPIO_Init+0xdc>)
 800100a:	f043 0308 	orr.w	r3, r3, #8
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_GPIO_Init+0xdc>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POLARITY_MOTOR_Pin|POLARITY_COIL_Pin|ADC_ON_Pin, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	2138      	movs	r1, #56	; 0x38
 8001020:	481f      	ldr	r0, [pc, #124]	; (80010a0 <MX_GPIO_Init+0xe0>)
 8001022:	f002 fb02 	bl	800362a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_PWR_GPIO_Port, C_PWR_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102c:	481d      	ldr	r0, [pc, #116]	; (80010a4 <MX_GPIO_Init+0xe4>)
 800102e:	f002 fafc 	bl	800362a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001038:	481a      	ldr	r0, [pc, #104]	; (80010a4 <MX_GPIO_Init+0xe4>)
 800103a:	f002 faf6 	bl	800362a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POLARITY_MOTOR_Pin|POLARITY_COIL_Pin|ADC_ON_Pin;
 800103e:	2338      	movs	r3, #56	; 0x38
 8001040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2302      	movs	r3, #2
 800104c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4619      	mov	r1, r3
 8001054:	4812      	ldr	r0, [pc, #72]	; (80010a0 <MX_GPIO_Init+0xe0>)
 8001056:	f002 f94d 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = C_PWR_Pin|Led_Pin;
 800105a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2302      	movs	r3, #2
 800106a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_GPIO_Init+0xe4>)
 8001074:	f002 f93e 	bl	80032f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEST1_Pin|ADDR0_Pin|ADDR1_Pin;
 8001078:	f44f 6303 	mov.w	r3, #2096	; 0x830
 800107c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001082:	2301      	movs	r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_GPIO_Init+0xe4>)
 800108e:	f002 f931 	bl	80032f4 <HAL_GPIO_Init>

}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40010c00 	.word	0x40010c00

080010a8 <Set_Configuration>:
#include "hardware_settings.h"

void Set_Configuration(uint8_t configuration)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
	/**
	 * Ограничение на минимальное измерение в 10 оборотов в минуту
	 * Если хотим другое
	 * Считаем по формуле 60000 / обороты в минунту
	 */
	if (configuration & (1 << 3))
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d012      	beq.n	80010e2 <Set_Configuration+0x3a>
	{
		__HAL_TIM_SET_AUTORELOAD(&htim3, 3000); // Рассчитанное значение / 2
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <Set_Configuration+0x68>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <Set_Configuration+0x68>)
 80010c8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010cc:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4, 3000); // Рассчитанное значение / 2
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <Set_Configuration+0x6c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <Set_Configuration+0x6c>)
 80010da:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010de:	60da      	str	r2, [r3, #12]
	else
	{
		__HAL_TIM_SET_AUTORELOAD(&htim3, 6000); // Рассчитанное значение
		__HAL_TIM_SET_AUTORELOAD(&htim4, 6000); // Рассчитанное значение
	}
}
 80010e0:	e011      	b.n	8001106 <Set_Configuration+0x5e>
		__HAL_TIM_SET_AUTORELOAD(&htim3, 6000); // Рассчитанное значение
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <Set_Configuration+0x68>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f241 7270 	movw	r2, #6000	; 0x1770
 80010ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <Set_Configuration+0x68>)
 80010ee:	f241 7270 	movw	r2, #6000	; 0x1770
 80010f2:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4, 6000); // Рассчитанное значение
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <Set_Configuration+0x6c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f241 7270 	movw	r2, #6000	; 0x1770
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <Set_Configuration+0x6c>)
 8001100:	f241 7270 	movw	r2, #6000	; 0x1770
 8001104:	60da      	str	r2, [r3, #12]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	200001d8 	.word	0x200001d8
 8001114:	20000220 	.word	0x20000220

08001118 <Set_Channel_Raw>:


void Set_Channel_Raw(uint8_t channel, int32_t value)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
	uint32_t absValue = abs(value);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	bfb8      	it	lt
 800112a:	425b      	neglt	r3, r3
 800112c:	60fb      	str	r3, [r7, #12]
	GPIO_PinState polarity = value > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	bfcc      	ite	gt
 8001134:	2301      	movgt	r3, #1
 8001136:	2300      	movle	r3, #0
 8001138:	b2db      	uxtb	r3, r3
 800113a:	72fb      	strb	r3, [r7, #11]
	if (absValue >= 0x7FFF)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001142:	4293      	cmp	r3, r2
 8001144:	d903      	bls.n	800114e <Set_Channel_Raw+0x36>
	{
		absValue = 0xFFFF;
 8001146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e002      	b.n	8001154 <Set_Channel_Raw+0x3c>
	}
	else
	{
		absValue = absValue << 1;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
	}
	uint8_t revers = (NowSettings.Config >> (5 - channel)) & 1;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <Set_Channel_Raw+0xa0>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f1c3 0305 	rsb	r3, r3, #5
 8001160:	fa42 f303 	asr.w	r3, r2, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	72bb      	strb	r3, [r7, #10]
	switch (channel) {
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <Set_Channel_Raw+0x60>
 8001172:	2b01      	cmp	r3, #1
 8001174:	d00e      	beq.n	8001194 <Set_Channel_Raw+0x7c>
		case 1:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, absValue);
			HAL_GPIO_WritePin(POLARITY_COIL_GPIO_Port, POLARITY_COIL_Pin, polarity ^ revers);
			break;
		default:
			break;
 8001176:	e01b      	b.n	80011b0 <Set_Channel_Raw+0x98>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, absValue);
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <Set_Channel_Raw+0xa4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(POLARITY_MOTOR_GPIO_Port, POLARITY_MOTOR_Pin, polarity ^ revers);
 8001180:	7afa      	ldrb	r2, [r7, #11]
 8001182:	7abb      	ldrb	r3, [r7, #10]
 8001184:	4053      	eors	r3, r2
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	2108      	movs	r1, #8
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <Set_Channel_Raw+0xa8>)
 800118e:	f002 fa4c 	bl	800362a <HAL_GPIO_WritePin>
			break;
 8001192:	e00d      	b.n	80011b0 <Set_Channel_Raw+0x98>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, absValue);
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <Set_Channel_Raw+0xac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(POLARITY_COIL_GPIO_Port, POLARITY_COIL_Pin, polarity ^ revers);
 800119c:	7afa      	ldrb	r2, [r7, #11]
 800119e:	7abb      	ldrb	r3, [r7, #10]
 80011a0:	4053      	eors	r3, r2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	2110      	movs	r1, #16
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <Set_Channel_Raw+0xa8>)
 80011aa:	f002 fa3e 	bl	800362a <HAL_GPIO_WritePin>
			break;
 80011ae:	bf00      	nop
	}
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200000b8 	.word	0x200000b8
 80011bc:	20000190 	.word	0x20000190
 80011c0:	40010800 	.word	0x40010800
 80011c4:	20000148 	.word	0x20000148

080011c8 <Calculate_Channel>:

int32_t lastError[ChannelCount] = {0};
float Integral[ChannelCount] = {0};
void Calculate_Channel(uint8_t channel)
{
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	uint8_t DM = NowSettings.Config & (channel == 0 ? 0x02 : 0x01);
 80011d2:	4b91      	ldr	r3, [pc, #580]	; (8001418 <Calculate_Channel+0x250>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	2a00      	cmp	r2, #0
 80011dc:	d101      	bne.n	80011e2 <Calculate_Channel+0x1a>
 80011de:	2202      	movs	r2, #2
 80011e0:	e000      	b.n	80011e4 <Calculate_Channel+0x1c>
 80011e2:	2201      	movs	r2, #1
 80011e4:	4013      	ands	r3, r2
 80011e6:	b25b      	sxtb	r3, r3
 80011e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int16_t *NeedSpeed = channel == 0 ? &NowSettings.Need_F_ChannelSpeed : &NowSettings.Need_S_ChannelSpeed;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <Calculate_Channel+0x2e>
 80011f2:	4b8a      	ldr	r3, [pc, #552]	; (800141c <Calculate_Channel+0x254>)
 80011f4:	e000      	b.n	80011f8 <Calculate_Channel+0x30>
 80011f6:	4b8a      	ldr	r3, [pc, #552]	; (8001420 <Calculate_Channel+0x258>)
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (DM)
 80011fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <Calculate_Channel+0x4e>
	{
		Set_Channel_Raw(channel, *NeedSpeed);
 8001202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	461a      	mov	r2, r3
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff82 	bl	8001118 <Set_Channel_Raw>
		}
		if(val > 32766) val = 32766;
		if(val < -32766) val = -32766;
		Set_Channel_Raw(channel, (int32_t)val);
	}
}
 8001214:	e0f6      	b.n	8001404 <Calculate_Channel+0x23c>
		int16_t *CurrentSpeed = NeedSpeed + 1;
 8001216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001218:	3302      	adds	r3, #2
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
		uint16_t *MaxAbsSpeed = CurrentSpeed + 1;
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	3302      	adds	r3, #2
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
		uint16_t *Min_Force = MaxAbsSpeed + 1;
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	3302      	adds	r3, #2
 8001226:	623b      	str	r3, [r7, #32]
		if (*NeedSpeed > *MaxAbsSpeed)
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122e:	461a      	mov	r2, r3
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	dd04      	ble.n	8001242 <Calculate_Channel+0x7a>
			*NeedSpeed = *MaxAbsSpeed;
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	b21a      	sxth	r2, r3
 800123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001240:	801a      	strh	r2, [r3, #0]
		if (*NeedSpeed < -(*MaxAbsSpeed))
 8001242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	461a      	mov	r2, r3
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	425b      	negs	r3, r3
 8001250:	429a      	cmp	r2, r3
 8001252:	da06      	bge.n	8001262 <Calculate_Channel+0x9a>
			*NeedSpeed = -(*MaxAbsSpeed);
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	425b      	negs	r3, r3
 800125a:	b29b      	uxth	r3, r3
 800125c:	b21a      	sxth	r2, r3
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001260:	801a      	strh	r2, [r3, #0]
		float *Kp = Min_Force + 1, *Ki = Kp + 1, *Kd = Ki + 1;
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	3302      	adds	r3, #2
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	3304      	adds	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	3304      	adds	r3, #4
 8001272:	617b      	str	r3, [r7, #20]
		int32_t error = (1000.0/950)*(*NeedSpeed) - *CurrentSpeed;
 8001274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f9e4 	bl	8000648 <__aeabi_i2d>
 8001280:	a363      	add	r3, pc, #396	; (adr r3, 8001410 <Calculate_Channel+0x248>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7fe ff63 	bl	8000150 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4614      	mov	r4, r2
 8001290:	461d      	mov	r5, r3
 8001292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f9d5 	bl	8000648 <__aeabi_i2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7ff f881 	bl	80003ac <__aeabi_dsub>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f7ff fa33 	bl	800071c <__aeabi_d2iz>
 80012b6:	4603      	mov	r3, r0
 80012b8:	613b      	str	r3, [r7, #16]
		float Prop = *Kp * error;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	681c      	ldr	r4, [r3, #0]
 80012be:	6938      	ldr	r0, [r7, #16]
 80012c0:	f7ff fb5e 	bl	8000980 <__aeabi_i2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4619      	mov	r1, r3
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff fbad 	bl	8000a28 <__aeabi_fmul>
 80012ce:	4603      	mov	r3, r0
 80012d0:	60fb      	str	r3, [r7, #12]
		float Dif = 0;//*Kd * (error - lastError[channel]);
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
		lastError[channel] = error;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4952      	ldr	r1, [pc, #328]	; (8001424 <Calculate_Channel+0x25c>)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (error == 0 && *NeedSpeed == 0)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10a      	bne.n	80012fe <Calculate_Channel+0x136>
 80012e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d105      	bne.n	80012fe <Calculate_Channel+0x136>
			Integral[channel] = 0;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4a4c      	ldr	r2, [pc, #304]	; (8001428 <Calculate_Channel+0x260>)
 80012f6:	f04f 0100 	mov.w	r1, #0
 80012fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		float val = Prop + Integral[channel] + Dif;
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	4a49      	ldr	r2, [pc, #292]	; (8001428 <Calculate_Channel+0x260>)
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	68f9      	ldr	r1, [r7, #12]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fa85 	bl	8000818 <__addsf3>
 800130e:	4603      	mov	r3, r0
 8001310:	4619      	mov	r1, r3
 8001312:	68b8      	ldr	r0, [r7, #8]
 8001314:	f7ff fa80 	bl	8000818 <__addsf3>
 8001318:	4603      	mov	r3, r0
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
		if (abs(*NeedSpeed) < 10 && abs(*CurrentSpeed) < 200)
 800131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	2b00      	cmp	r3, #0
 8001324:	bfb8      	it	lt
 8001326:	425b      	neglt	r3, r3
 8001328:	b29b      	uxth	r3, r3
 800132a:	2b09      	cmp	r3, #9
 800132c:	d80c      	bhi.n	8001348 <Calculate_Channel+0x180>
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001334:	2b00      	cmp	r3, #0
 8001336:	bfb8      	it	lt
 8001338:	425b      	neglt	r3, r3
 800133a:	b29b      	uxth	r3, r3
 800133c:	2bc7      	cmp	r3, #199	; 0xc7
 800133e:	d803      	bhi.n	8001348 <Calculate_Channel+0x180>
			val = 0;
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
 8001346:	e01b      	b.n	8001380 <Calculate_Channel+0x1b8>
			val += val > 0 ? *Min_Force : -(*Min_Force);
 8001348:	f04f 0100 	mov.w	r1, #0
 800134c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800134e:	f7ff fd27 	bl	8000da0 <__aeabi_fcmpgt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <Calculate_Channel+0x19e>
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fb0f 	bl	8000980 <__aeabi_i2f>
 8001362:	4603      	mov	r3, r0
 8001364:	e006      	b.n	8001374 <Calculate_Channel+0x1ac>
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	425b      	negs	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fb07 	bl	8000980 <__aeabi_i2f>
 8001372:	4603      	mov	r3, r0
 8001374:	4619      	mov	r1, r3
 8001376:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001378:	f7ff fa4e 	bl	8000818 <__addsf3>
 800137c:	4603      	mov	r3, r0
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
		if(val < 32766 && val > -32766)
 8001380:	492a      	ldr	r1, [pc, #168]	; (800142c <Calculate_Channel+0x264>)
 8001382:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001384:	f7ff fcee 	bl	8000d64 <__aeabi_fcmplt>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d01f      	beq.n	80013ce <Calculate_Channel+0x206>
 800138e:	4928      	ldr	r1, [pc, #160]	; (8001430 <Calculate_Channel+0x268>)
 8001390:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001392:	f7ff fd05 	bl	8000da0 <__aeabi_fcmpgt>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d018      	beq.n	80013ce <Calculate_Channel+0x206>
			Integral[channel] = Integral[channel] + (*Ki * error);
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4a22      	ldr	r2, [pc, #136]	; (8001428 <Calculate_Channel+0x260>)
 80013a0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	681c      	ldr	r4, [r3, #0]
 80013a8:	6938      	ldr	r0, [r7, #16]
 80013aa:	f7ff fae9 	bl	8000980 <__aeabi_i2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4619      	mov	r1, r3
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7ff fb38 	bl	8000a28 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	79fc      	ldrb	r4, [r7, #7]
 80013bc:	4619      	mov	r1, r3
 80013be:	4628      	mov	r0, r5
 80013c0:	f7ff fa2a 	bl	8000818 <__addsf3>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <Calculate_Channel+0x260>)
 80013ca:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if(val > 32766) val = 32766;
 80013ce:	4917      	ldr	r1, [pc, #92]	; (800142c <Calculate_Channel+0x264>)
 80013d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013d2:	f7ff fce5 	bl	8000da0 <__aeabi_fcmpgt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <Calculate_Channel+0x218>
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <Calculate_Channel+0x264>)
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
		if(val < -32766) val = -32766;
 80013e0:	4913      	ldr	r1, [pc, #76]	; (8001430 <Calculate_Channel+0x268>)
 80013e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013e4:	f7ff fcbe 	bl	8000d64 <__aeabi_fcmplt>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <Calculate_Channel+0x22a>
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <Calculate_Channel+0x268>)
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
		Set_Channel_Raw(channel, (int32_t)val);
 80013f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013f4:	f7ff fcde 	bl	8000db4 <__aeabi_f2iz>
 80013f8:	4602      	mov	r2, r0
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fe8a 	bl	8001118 <Set_Channel_Raw>
}
 8001404:	bf00      	nop
 8001406:	3738      	adds	r7, #56	; 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	bdb0      	pop	{r4, r5, r7, pc}
 800140c:	f3af 8000 	nop.w
 8001410:	35e50d79 	.word	0x35e50d79
 8001414:	3ff0d794 	.word	0x3ff0d794
 8001418:	200000b8 	.word	0x200000b8
 800141c:	200000bc 	.word	0x200000bc
 8001420:	200000d0 	.word	0x200000d0
 8001424:	200000a8 	.word	0x200000a8
 8001428:	200000b0 	.word	0x200000b0
 800142c:	46fffc00 	.word	0x46fffc00
 8001430:	c6fffc00 	.word	0xc6fffc00

08001434 <Clear_Chanel>:

void Clear_Chanel(uint8_t channel)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	Integral[channel] = 0;
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <Clear_Chanel+0x40>)
 8001442:	f04f 0100 	mov.w	r1, #0
 8001446:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	lastError[channel] = channel == 0 ? NowSettings.Current_F_ChannelSpeed : NowSettings.Current_S_ChannelSpeed;
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d104      	bne.n	800145a <Clear_Chanel+0x26>
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <Clear_Chanel+0x44>)
 8001452:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001456:	4619      	mov	r1, r3
 8001458:	e003      	b.n	8001462 <Clear_Chanel+0x2e>
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <Clear_Chanel+0x44>)
 800145c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001460:	4619      	mov	r1, r3
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <Clear_Chanel+0x48>)
 8001466:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	200000b0 	.word	0x200000b0
 8001478:	200000b8 	.word	0x200000b8
 800147c:	200000a8 	.word	0x200000a8

08001480 <Select_Setting>:

void Select_Setting(MemoryMap *from, volatile MemoryMap *to)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	if ((uint32_t)to < 0x20000000)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001490:	d206      	bcs.n	80014a0 <Select_Setting+0x20>
	{
		Flash_Write((uint32_t)to, (uint32_t *)from, sizeof(MemoryMap));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2230      	movs	r2, #48	; 0x30
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fd2b 	bl	8000ef4 <Flash_Write>
	}
	else
	{
		memcpy(to, from, sizeof(MemoryMap));
	}
}
 800149e:	e004      	b.n	80014aa <Select_Setting+0x2a>
		memcpy(to, from, sizeof(MemoryMap));
 80014a0:	2230      	movs	r2, #48	; 0x30
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	6838      	ldr	r0, [r7, #0]
 80014a6:	f005 fd9b 	bl	8006fe0 <memcpy>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(uint8_t address)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END I2C1_Init 0 */
#endif
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_I2C1_Init+0x60>)
 80014c0:	4a15      	ldr	r2, [pc, #84]	; (8001518 <MX_I2C1_Init+0x64>)
 80014c2:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <MX_I2C1_Init+0x60>)
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <MX_I2C1_Init+0x68>)
 80014c8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <MX_I2C1_Init+0x60>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = address << 1;
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <MX_I2C1_Init+0x60>)
 80014d8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_I2C1_Init+0x60>)
 80014dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_I2C1_Init+0x60>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_I2C1_Init+0x60>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_I2C1_Init+0x60>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_I2C1_Init+0x60>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <MX_I2C1_Init+0x60>)
 80014fc:	f002 f8ae 	bl	800365c <HAL_I2C_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 8001506:	f000 fbeb 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000e8 	.word	0x200000e8
 8001518:	40005400 	.word	0x40005400
 800151c:	00061a80 	.word	0x00061a80

08001520 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <HAL_I2C_MspInit+0xb0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d142      	bne.n	80015c6 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <HAL_I2C_MspInit+0xb4>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <HAL_I2C_MspInit+0xb4>)
 8001546:	f043 0308 	orr.w	r3, r3, #8
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <HAL_I2C_MspInit+0xb4>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001558:	f44f 7340 	mov.w	r3, #768	; 0x300
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155e:	2312      	movs	r3, #18
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	481a      	ldr	r0, [pc, #104]	; (80015d8 <HAL_I2C_MspInit+0xb8>)
 800156e:	f001 fec1 	bl	80032f4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_I2C_MspInit+0xbc>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	f043 0302 	orr.w	r3, r3, #2
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
 8001588:	4a14      	ldr	r2, [pc, #80]	; (80015dc <HAL_I2C_MspInit+0xbc>)
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_I2C_MspInit+0xb4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <HAL_I2C_MspInit+0xb4>)
 8001594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_I2C_MspInit+0xb4>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2102      	movs	r1, #2
 80015aa:	201f      	movs	r0, #31
 80015ac:	f001 fbdb 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015b0:	201f      	movs	r0, #31
 80015b2:	f001 fbf4 	bl	8002d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 2, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2102      	movs	r1, #2
 80015ba:	2020      	movs	r0, #32
 80015bc:	f001 fbd3 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015c0:	2020      	movs	r0, #32
 80015c2:	f001 fbec 	bl	8002d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40005400 	.word	0x40005400
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	40010000 	.word	0x40010000

080015e0 <HAL_I2C_ListenCpltCallback>:
volatile uint8_t offset = 0;
volatile uint8_t MOC = 0;
#define ram ((uint8_t *) &DefaultSettings)

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	first = 1;
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_I2C_ListenCpltCallback+0x1c>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
	HAL_I2C_EnableListen_IT(hi2c); // slave is ready again
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f002 fa5c 	bl	8003aac <HAL_I2C_EnableListen_IT>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000040 	.word	0x20000040

08001600 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
 800160c:	4613      	mov	r3, r2
 800160e:	803b      	strh	r3, [r7, #0]
	uint8_t* addres = (offset < sizeof(MemoryMap)) ? &ram[offset] : (uint8_t *)&MOC;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_I2C_AddrCallback+0x6c>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b2f      	cmp	r3, #47	; 0x2f
 8001618:	d806      	bhi.n	8001628 <HAL_I2C_AddrCallback+0x28>
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_I2C_AddrCallback+0x6c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <HAL_I2C_AddrCallback+0x70>)
 8001624:	4413      	add	r3, r2
 8001626:	e000      	b.n	800162a <HAL_I2C_AddrCallback+0x2a>
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_I2C_AddrCallback+0x74>)
 800162a:	60fb      	str	r3, [r7, #12]

	if(TransferDirection==I2C_DIRECTION_TRANSMIT)
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d112      	bne.n	8001658 <HAL_I2C_AddrCallback+0x58>
	{
		if(first)
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_I2C_AddrCallback+0x78>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d006      	beq.n	800164a <HAL_I2C_AddrCallback+0x4a>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)&offset, 1, I2C_NEXT_FRAME);
 800163c:	2304      	movs	r3, #4
 800163e:	2201      	movs	r2, #1
 8001640:	490a      	ldr	r1, [pc, #40]	; (800166c <HAL_I2C_AddrCallback+0x6c>)
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f002 f9c0 	bl	80039c8 <HAL_I2C_Slave_Seq_Receive_IT>
	}
	else
	{
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
	}
}
 8001648:	e00c      	b.n	8001664 <HAL_I2C_AddrCallback+0x64>
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
 800164a:	2304      	movs	r3, #4
 800164c:	2201      	movs	r2, #1
 800164e:	68f9      	ldr	r1, [r7, #12]
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f002 f9b9 	bl	80039c8 <HAL_I2C_Slave_Seq_Receive_IT>
}
 8001656:	e005      	b.n	8001664 <HAL_I2C_AddrCallback+0x64>
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
 8001658:	2304      	movs	r3, #4
 800165a:	2201      	movs	r2, #1
 800165c:	68f9      	ldr	r1, [r7, #12]
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f002 f940 	bl	80038e4 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2000013c 	.word	0x2000013c
 8001670:	20000010 	.word	0x20000010
 8001674:	2000013d 	.word	0x2000013d
 8001678:	20000040 	.word	0x20000040

0800167c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	if(first)
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <HAL_I2C_SlaveRxCpltCallback+0x2a>
	{
		first = 0;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
		Select_Setting(&NowSettings, &DefaultSettings);
 8001694:	4914      	ldr	r1, [pc, #80]	; (80016e8 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001696:	4815      	ldr	r0, [pc, #84]	; (80016ec <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001698:	f7ff fef2 	bl	8001480 <Select_Setting>
		DefaultSettings.WriteToMemory = 0;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80016a4:	e006      	b.n	80016b4 <HAL_I2C_SlaveRxCpltCallback+0x38>
	}
	else
	{
		offset++;
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3301      	adds	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80016b2:	701a      	strb	r2, [r3, #0]
	}
	uint8_t* addres = (offset < sizeof(MemoryMap)) ? &ram[offset] : (uint8_t *)&MOC;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b2f      	cmp	r3, #47	; 0x2f
 80016bc:	d806      	bhi.n	80016cc <HAL_I2C_SlaveRxCpltCallback+0x50>
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80016c8:	4413      	add	r3, r2
 80016ca:	e000      	b.n	80016ce <HAL_I2C_SlaveRxCpltCallback+0x52>
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 80016ce:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Slave_Seq_Receive_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
 80016d0:	2304      	movs	r3, #4
 80016d2:	2201      	movs	r2, #1
 80016d4:	68f9      	ldr	r1, [r7, #12]
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f002 f976 	bl	80039c8 <HAL_I2C_Slave_Seq_Receive_IT>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000040 	.word	0x20000040
 80016e8:	20000010 	.word	0x20000010
 80016ec:	200000b8 	.word	0x200000b8
 80016f0:	2000013c 	.word	0x2000013c
 80016f4:	2000013d 	.word	0x2000013d

080016f8 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	offset++;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_I2C_SlaveTxCpltCallback+0x48>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	3301      	adds	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <HAL_I2C_SlaveTxCpltCallback+0x48>)
 800170c:	701a      	strb	r2, [r3, #0]
	uint8_t* addres = (offset < sizeof(MemoryMap)) ? &ram[offset] : (uint8_t *)&MOC;
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_I2C_SlaveTxCpltCallback+0x48>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b2f      	cmp	r3, #47	; 0x2f
 8001716:	d806      	bhi.n	8001726 <HAL_I2C_SlaveTxCpltCallback+0x2e>
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_I2C_SlaveTxCpltCallback+0x48>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_I2C_SlaveTxCpltCallback+0x4c>)
 8001722:	4413      	add	r3, r2
 8001724:	e000      	b.n	8001728 <HAL_I2C_SlaveTxCpltCallback+0x30>
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8001728:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
 800172a:	2304      	movs	r3, #4
 800172c:	2201      	movs	r2, #1
 800172e:	68f9      	ldr	r1, [r7, #12]
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f002 f8d7 	bl	80038e4 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000013c 	.word	0x2000013c
 8001744:	20000010 	.word	0x20000010
 8001748:	2000013d 	.word	0x2000013d

0800174c <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	if( HAL_I2C_GetError(hi2c)==HAL_I2C_ERROR_AF)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f002 fc22 	bl	8003f9e <HAL_I2C_GetError>
 800175a:	4603      	mov	r3, r0
 800175c:	2b04      	cmp	r3, #4
 800175e:	d16d      	bne.n	800183c <HAL_I2C_ErrorCallback+0xf0>
	{
		offset--;
 8001760:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_I2C_ErrorCallback+0xf8>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	3b01      	subs	r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b36      	ldr	r3, [pc, #216]	; (8001844 <HAL_I2C_ErrorCallback+0xf8>)
 800176c:	701a      	strb	r2, [r3, #0]
		DefaultSettings.Current_F_ChannelSpeed = NowSettings.Current_F_ChannelSpeed;
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_I2C_ErrorCallback+0xfc>)
 8001770:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001774:	4b35      	ldr	r3, [pc, #212]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 8001776:	80da      	strh	r2, [r3, #6]
		DefaultSettings.Current_S_ChannelSpeed = NowSettings.Current_S_ChannelSpeed;
 8001778:	4b33      	ldr	r3, [pc, #204]	; (8001848 <HAL_I2C_ErrorCallback+0xfc>)
 800177a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800177e:	4b33      	ldr	r3, [pc, #204]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 8001780:	835a      	strh	r2, [r3, #26]
#if CanWriteMemoryFromI2C
		uint8_t writeToMemory = DefaultSettings.WriteToMemory != 0;
 8001782:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 8001784:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	73fb      	strb	r3, [r7, #15]
#endif
		DefaultSettings.WriteToMemory = 0;
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 8001796:	2200      	movs	r2, #0
 8001798:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		if (DefaultSettings.F_D != NowSettings.F_D || DefaultSettings.F_I != NowSettings.F_I)
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	4a29      	ldr	r2, [pc, #164]	; (8001848 <HAL_I2C_ErrorCallback+0xfc>)
 80017a2:	6952      	ldr	r2, [r2, #20]
 80017a4:	4611      	mov	r1, r2
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fad2 	bl	8000d50 <__aeabi_fcmpeq>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00a      	beq.n	80017c8 <HAL_I2C_ErrorCallback+0x7c>
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	4a24      	ldr	r2, [pc, #144]	; (8001848 <HAL_I2C_ErrorCallback+0xfc>)
 80017b8:	6912      	ldr	r2, [r2, #16]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fac7 	bl	8000d50 <__aeabi_fcmpeq>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <HAL_I2C_ErrorCallback+0x82>
		{
			Clear_Chanel(0);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff fe33 	bl	8001434 <Clear_Chanel>
		}
		if (DefaultSettings.S_D != NowSettings.S_D || DefaultSettings.S_I != NowSettings.S_I)
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_I2C_ErrorCallback+0xfc>)
 80017d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fab9 	bl	8000d50 <__aeabi_fcmpeq>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00a      	beq.n	80017fa <HAL_I2C_ErrorCallback+0xae>
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	4a17      	ldr	r2, [pc, #92]	; (8001848 <HAL_I2C_ErrorCallback+0xfc>)
 80017ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff faae 	bl	8000d50 <__aeabi_fcmpeq>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d102      	bne.n	8001800 <HAL_I2C_ErrorCallback+0xb4>
		{
			Clear_Chanel(1);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff fe1a 	bl	8001434 <Clear_Chanel>
		}
		Select_Setting(&DefaultSettings, &NowSettings);
 8001800:	4911      	ldr	r1, [pc, #68]	; (8001848 <HAL_I2C_ErrorCallback+0xfc>)
 8001802:	4812      	ldr	r0, [pc, #72]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 8001804:	f7ff fe3c 	bl	8001480 <Select_Setting>
		Set_Configuration(NowSettings.Config);
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_I2C_ErrorCallback+0xfc>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fc4b 	bl	80010a8 <Set_Configuration>
#if CanWriteMemoryFromI2C
		if(writeToMemory)
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d011      	beq.n	800183c <HAL_I2C_ErrorCallback+0xf0>
		{
			DefaultSettings.Need_F_ChannelSpeed = 0;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 800181a:	2200      	movs	r2, #0
 800181c:	809a      	strh	r2, [r3, #4]
			DefaultSettings.Need_S_ChannelSpeed = 0;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 8001820:	2200      	movs	r2, #0
 8001822:	831a      	strh	r2, [r3, #24]
			DefaultSettings.Current_F_ChannelSpeed = 0;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 8001826:	2200      	movs	r2, #0
 8001828:	80da      	strh	r2, [r3, #6]
			DefaultSettings.Current_S_ChannelSpeed = 0;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 800182c:	2200      	movs	r2, #0
 800182e:	835a      	strh	r2, [r3, #26]
			Select_Setting(&DefaultSettings, (MemoryMap *)&EEPROM_SETTING);
 8001830:	4907      	ldr	r1, [pc, #28]	; (8001850 <HAL_I2C_ErrorCallback+0x104>)
 8001832:	4806      	ldr	r0, [pc, #24]	; (800184c <HAL_I2C_ErrorCallback+0x100>)
 8001834:	f7ff fe24 	bl	8001480 <Select_Setting>
			HAL_NVIC_SystemReset();
 8001838:	f001 fabf 	bl	8002dba <HAL_NVIC_SystemReset>
#endif
	}
	else
	{
	}
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	2000013c 	.word	0x2000013c
 8001848:	200000b8 	.word	0x200000b8
 800184c:	20000010 	.word	0x20000010
 8001850:	0800fc00 	.word	0x0800fc00

08001854 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
	...

08001868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186e:	f000 fef5 	bl	800265c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001872:	f000 f88f 	bl	8001994 <SystemClock_Config>
   * #endif
   */
  /* USER CODE END SysInit */
#endif
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001876:	f7ff fba3 	bl	8000fc0 <MX_GPIO_Init>
  MX_TIM4_Init();
 800187a:	f000 fc07 	bl	800208c <MX_TIM4_Init>
  MX_TIM3_Init();
 800187e:	f000 fb99 	bl	8001fb4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001882:	f000 fabb 	bl	8001dfc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001886:	f000 fb3d 	bl	8001f04 <MX_TIM2_Init>
  MX_ADC1_Init();
 800188a:	f7ff fab9 	bl	8000e00 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(C_PWR_GPIO_Port, C_PWR_Pin, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001894:	4838      	ldr	r0, [pc, #224]	; (8001978 <main+0x110>)
 8001896:	f001 fec8 	bl	800362a <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800189a:	2100      	movs	r1, #0
 800189c:	4837      	ldr	r0, [pc, #220]	; (800197c <main+0x114>)
 800189e:	f004 faeb 	bl	8005e78 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80018a2:	4b36      	ldr	r3, [pc, #216]	; (800197c <main+0x114>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2200      	movs	r2, #0
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80018aa:	2100      	movs	r1, #0
 80018ac:	4834      	ldr	r0, [pc, #208]	; (8001980 <main+0x118>)
 80018ae:	f004 fae3 	bl	8005e78 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <main+0x118>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2200      	movs	r2, #0
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80018ba:	2100      	movs	r1, #0
 80018bc:	4831      	ldr	r0, [pc, #196]	; (8001984 <main+0x11c>)
 80018be:	f004 fbcd 	bl	800605c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80018c2:	2104      	movs	r1, #4
 80018c4:	482f      	ldr	r0, [pc, #188]	; (8001984 <main+0x11c>)
 80018c6:	f004 fbc9 	bl	800605c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80018ca:	2100      	movs	r1, #0
 80018cc:	482e      	ldr	r0, [pc, #184]	; (8001988 <main+0x120>)
 80018ce:	f004 fbc5 	bl	800605c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 80018d2:	2104      	movs	r1, #4
 80018d4:	482c      	ldr	r0, [pc, #176]	; (8001988 <main+0x120>)
 80018d6:	f004 fbc1 	bl	800605c <HAL_TIM_IC_Start_IT>

  Memory_Manage();
 80018da:	f000 f977 	bl	8001bcc <Memory_Manage>
  uint8_t addr = Select_Address();
 80018de:	f000 f985 	bl	8001bec <Select_Address>
 80018e2:	4603      	mov	r3, r0
 80018e4:	71bb      	strb	r3, [r7, #6]

  MX_I2C1_Init(addr);
 80018e6:	79bb      	ldrb	r3, [r7, #6]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fde3 	bl	80014b4 <MX_I2C1_Init>

  Set_Configuration(NowSettings.Config);
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <main+0x124>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fbd8 	bl	80010a8 <Set_Configuration>

  Calibration_Motor();
 80018f8:	f000 f8aa 	bl	8001a50 <Calibration_Motor>

  NowSettings.Need_S_ChannelSpeed = 0;
 80018fc:	4b23      	ldr	r3, [pc, #140]	; (800198c <main+0x124>)
 80018fe:	2200      	movs	r2, #0
 8001900:	831a      	strh	r2, [r3, #24]
  NowSettings.Need_F_ChannelSpeed = 0;
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <main+0x124>)
 8001904:	2200      	movs	r2, #0
 8001906:	809a      	strh	r2, [r3, #4]

  uint8_t test = !HAL_GPIO_ReadPin(TEST1_GPIO_Port, TEST1_Pin) | 1;
 8001908:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800190c:	481a      	ldr	r0, [pc, #104]	; (8001978 <main+0x110>)
 800190e:	f001 fe75 	bl	80035fc <HAL_GPIO_ReadPin>
 8001912:	2301      	movs	r3, #1
 8001914:	717b      	strb	r3, [r7, #5]
  if (!test)
 8001916:	797b      	ldrb	r3, [r7, #5]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <main+0xc8>
  {
	  HAL_I2C_EnableListen_IT(&hi2c1);
 800191c:	481c      	ldr	r0, [pc, #112]	; (8001990 <main+0x128>)
 800191e:	f002 f8c5 	bl	8003aac <HAL_I2C_EnableListen_IT>
	  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001928:	4813      	ldr	r0, [pc, #76]	; (8001978 <main+0x110>)
 800192a:	f001 fe7e 	bl	800362a <HAL_GPIO_WritePin>
 800192e:	e01c      	b.n	800196a <main+0x102>
  }
  else
  {
	  for (uint8_t i = 0; i < 10; i++)
 8001930:	2300      	movs	r3, #0
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	e016      	b.n	8001964 <main+0xfc>
	  {
		  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800193c:	480e      	ldr	r0, [pc, #56]	; (8001978 <main+0x110>)
 800193e:	f001 fe74 	bl	800362a <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001942:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001946:	f000 feeb 	bl	8002720 <HAL_Delay>
		  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001950:	4809      	ldr	r0, [pc, #36]	; (8001978 <main+0x110>)
 8001952:	f001 fe6a 	bl	800362a <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195a:	f000 fee1 	bl	8002720 <HAL_Delay>
	  for (uint8_t i = 0; i < 10; i++)
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	3301      	adds	r3, #1
 8001962:	71fb      	strb	r3, [r7, #7]
 8001964:	79fb      	ldrb	r3, [r7, #7]
 8001966:	2b09      	cmp	r3, #9
 8001968:	d9e5      	bls.n	8001936 <main+0xce>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Test_Process(test);
 800196a:	797b      	ldrb	r3, [r7, #5]
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f977 	bl	8001c60 <Test_Process>
	  Motor_Process();
 8001972:	f000 f95d 	bl	8001c30 <Motor_Process>
	  Test_Process(test);
 8001976:	e7f8      	b.n	800196a <main+0x102>
 8001978:	40010c00 	.word	0x40010c00
 800197c:	20000148 	.word	0x20000148
 8001980:	20000190 	.word	0x20000190
 8001984:	200001d8 	.word	0x200001d8
 8001988:	20000220 	.word	0x20000220
 800198c:	200000b8 	.word	0x200000b8
 8001990:	200000e8 	.word	0x200000e8

08001994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b094      	sub	sp, #80	; 0x50
 8001998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199e:	2228      	movs	r2, #40	; 0x28
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f005 fb2a 	bl	8006ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d2:	2301      	movs	r3, #1
 80019d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d6:	2302      	movs	r3, #2
 80019d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fd38 	bl	8005460 <HAL_RCC_OscConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80019f6:	f000 f973 	bl	8001ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fa:	230f      	movs	r3, #15
 80019fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019fe:	2302      	movs	r3, #2
 8001a00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2102      	movs	r1, #2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f003 ffa4 	bl	8005964 <HAL_RCC_ClockConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a22:	f000 f95d 	bl	8001ce0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a26:	2302      	movs	r3, #2
 8001a28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a2e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 f91a 	bl	8005c6c <HAL_RCCEx_PeriphCLKConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001a3e:	f000 f94f 	bl	8001ce0 <Error_Handler>
  }
}
 8001a42:	bf00      	nop
 8001a44:	3750      	adds	r7, #80	; 0x50
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	0000      	movs	r0, r0
 8001a4c:	0000      	movs	r0, r0
	...

08001a50 <Calibration_Motor>:

/* USER CODE BEGIN 4 */
void Calibration_Motor()
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
	if (NowSettings.F_Min_Force != 0)
 8001a56:	4b58      	ldr	r3, [pc, #352]	; (8001bb8 <Calibration_Motor+0x168>)
 8001a58:	895b      	ldrh	r3, [r3, #10]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 80a4 	bne.w	8001ba8 <Calibration_Motor+0x158>
	{
		return;
	}
	for (uint8_t i = 0; i < 5; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a66:	e018      	b.n	8001a9a <Calibration_Motor+0x4a>
	{
		HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6e:	4853      	ldr	r0, [pc, #332]	; (8001bbc <Calibration_Motor+0x16c>)
 8001a70:	f001 fddb 	bl	800362a <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001a74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a78:	f000 fe52 	bl	8002720 <HAL_Delay>
		HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a82:	484e      	ldr	r0, [pc, #312]	; (8001bbc <Calibration_Motor+0x16c>)
 8001a84:	f001 fdd1 	bl	800362a <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001a88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a8c:	f000 fe48 	bl	8002720 <HAL_Delay>
	for (uint8_t i = 0; i < 5; i++)
 8001a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a94:	3301      	adds	r3, #1
 8001a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d9e2      	bls.n	8001a68 <Calibration_Motor+0x18>
	}
	int16_t nowPWM = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	84bb      	strh	r3, [r7, #36]	; 0x24

	while(NowSettings.Current_F_ChannelSpeed == 0)
 8001aa6:	e00c      	b.n	8001ac2 <Calibration_Motor+0x72>
	{
		Set_Channel_Raw(0, nowPWM);
 8001aa8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001aac:	4619      	mov	r1, r3
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f7ff fb32 	bl	8001118 <Set_Channel_Raw>
		nowPWM += 10;
 8001ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ab6:	330a      	adds	r3, #10
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	84bb      	strh	r3, [r7, #36]	; 0x24
		HAL_Delay(50);
 8001abc:	2032      	movs	r0, #50	; 0x32
 8001abe:	f000 fe2f 	bl	8002720 <HAL_Delay>
	while(NowSettings.Current_F_ChannelSpeed == 0)
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <Calibration_Motor+0x168>)
 8001ac4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0ed      	beq.n	8001aa8 <Calibration_Motor+0x58>
	}
	NowSettings.F_Min_Force = nowPWM >> 1;
 8001acc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001ad0:	105b      	asrs	r3, r3, #1
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <Calibration_Motor+0x168>)
 8001ad8:	815a      	strh	r2, [r3, #10]
	if (NowSettings.Current_F_ChannelSpeed < 0)
 8001ada:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <Calibration_Motor+0x168>)
 8001adc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	da06      	bge.n	8001af2 <Calibration_Motor+0xa2>
	{
		NowSettings.Config ^= 1 << 5;
 8001ae4:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <Calibration_Motor+0x168>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	f083 0320 	eor.w	r3, r3, #32
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <Calibration_Motor+0x168>)
 8001af0:	701a      	strb	r2, [r3, #0]
	}
	Select_Setting(&NowSettings, (MemoryMap *)&EEPROM_SETTING);
 8001af2:	4933      	ldr	r1, [pc, #204]	; (8001bc0 <Calibration_Motor+0x170>)
 8001af4:	4830      	ldr	r0, [pc, #192]	; (8001bb8 <Calibration_Motor+0x168>)
 8001af6:	f7ff fcc3 	bl	8001480 <Select_Setting>
	uint8_t config = NowSettings.Config;
 8001afa:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <Calibration_Motor+0x168>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	NowSettings.Config |= 0x08;
 8001b02:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <Calibration_Motor+0x168>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	f043 0308 	orr.w	r3, r3, #8
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <Calibration_Motor+0x168>)
 8001b0e:	701a      	strb	r2, [r3, #0]
	while(NowSettings.Current_F_ChannelSpeed != 0)
 8001b10:	e005      	b.n	8001b1e <Calibration_Motor+0xce>
	{
		Calculate_Channel(0);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7ff fb58 	bl	80011c8 <Calculate_Channel>
		HAL_Delay(100);
 8001b18:	2064      	movs	r0, #100	; 0x64
 8001b1a:	f000 fe01 	bl	8002720 <HAL_Delay>
	while(NowSettings.Current_F_ChannelSpeed != 0)
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <Calibration_Motor+0x168>)
 8001b20:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f4      	bne.n	8001b12 <Calibration_Motor+0xc2>
	}
	NowSettings.Config = config;
 8001b28:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <Calibration_Motor+0x168>)
 8001b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b2e:	7013      	strb	r3, [r2, #0]


	float Kp = 0.0857; // Коэффициент усиления системы ШИМ-обороты
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <Calibration_Motor+0x174>)
 8001b32:	61fb      	str	r3, [r7, #28]
	float Tp = 20; // Большая постоянная времени (с)
 8001b34:	4b24      	ldr	r3, [pc, #144]	; (8001bc8 <Calibration_Motor+0x178>)
 8001b36:	61bb      	str	r3, [r7, #24]
	float Tpu = 0.5; // Малая постоянная времени (с)
 8001b38:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001b3c:	617b      	str	r3, [r7, #20]

	float Kk = Tp/(2*Kp*Tpu);
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	4619      	mov	r1, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fe68 	bl	8000818 <__addsf3>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	6979      	ldr	r1, [r7, #20]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe ff6b 	bl	8000a28 <__aeabi_fmul>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4619      	mov	r1, r3
 8001b56:	69b8      	ldr	r0, [r7, #24]
 8001b58:	f7ff f81a 	bl	8000b90 <__aeabi_fdiv>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	613b      	str	r3, [r7, #16]
	float Tk = Tp;
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	60fb      	str	r3, [r7, #12]

	// KT/T+KT/s;
	// KP = K;
	// KI = KT;

	float KP = Kk;			// Kp регулятора
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	60bb      	str	r3, [r7, #8]
	float KI = Kk/Tk*0.1;	// Ki регулятора
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	6938      	ldr	r0, [r7, #16]
 8001b6c:	f7ff f810 	bl	8000b90 <__aeabi_fdiv>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fd7a 	bl	800066c <__aeabi_f2d>
 8001b78:	a30d      	add	r3, pc, #52	; (adr r3, 8001bb0 <Calibration_Motor+0x160>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fae7 	bl	8000150 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7fe fdef 	bl	800076c <__aeabi_d2f>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	607b      	str	r3, [r7, #4]
	//				 ^ период ПИДа (100мс)

	NowSettings.F_P = KP;
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <Calibration_Motor+0x168>)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	60d3      	str	r3, [r2, #12]
	NowSettings.F_I = KI;
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <Calibration_Motor+0x168>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6113      	str	r3, [r2, #16]
	NowSettings.F_D = 0;
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <Calibration_Motor+0x168>)
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	e000      	b.n	8001baa <Calibration_Motor+0x15a>
		return;
 8001ba8:	bf00      	nop
}
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	9999999a 	.word	0x9999999a
 8001bb4:	3fb99999 	.word	0x3fb99999
 8001bb8:	200000b8 	.word	0x200000b8
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	0800fc00 	.word	0x0800fc00
 8001bc4:	3daf837b 	.word	0x3daf837b
 8001bc8:	41a00000 	.word	0x41a00000

08001bcc <Memory_Manage>:

void Memory_Manage()
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
#if SetWriteCount
	NowSettings.WriteToMemory = SetWriteCount;
#endif
	Select_Setting((MemoryMap *)&NowSettings, (MemoryMap *)&EEPROM_SETTING);
#endif
	Select_Setting((MemoryMap *)&EEPROM_SETTING, (MemoryMap *)&NowSettings);
 8001bd0:	4904      	ldr	r1, [pc, #16]	; (8001be4 <Memory_Manage+0x18>)
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <Memory_Manage+0x1c>)
 8001bd4:	f7ff fc54 	bl	8001480 <Select_Setting>
	HAL_Delay(10);
 8001bd8:	200a      	movs	r0, #10
 8001bda:	f000 fda1 	bl	8002720 <HAL_Delay>
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200000b8 	.word	0x200000b8
 8001be8:	0800fc00 	.word	0x0800fc00

08001bec <Select_Address>:

uint8_t Select_Address()
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
	uint8_t result = NowSettings.BaseAddress;
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <Select_Address+0x3c>)
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	71fb      	strb	r3, [r7, #7]
	result += HAL_GPIO_ReadPin(ADDR0_GPIO_Port, ADDR0_Pin);
 8001bf8:	2110      	movs	r1, #16
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <Select_Address+0x40>)
 8001bfc:	f001 fcfe 	bl	80035fc <HAL_GPIO_ReadPin>
 8001c00:	4603      	mov	r3, r0
 8001c02:	461a      	mov	r2, r3
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	4413      	add	r3, r2
 8001c08:	71fb      	strb	r3, [r7, #7]
	result += HAL_GPIO_ReadPin(ADDR1_GPIO_Port, ADDR1_Pin) << 1;
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	4807      	ldr	r0, [pc, #28]	; (8001c2c <Select_Address+0x40>)
 8001c0e:	f001 fcf5 	bl	80035fc <HAL_GPIO_ReadPin>
 8001c12:	4603      	mov	r3, r0
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	71fb      	strb	r3, [r7, #7]
	return result;
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200000b8 	.word	0x200000b8
 8001c2c:	40010c00 	.word	0x40010c00

08001c30 <Motor_Process>:

void Motor_Process(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
	static uint32_t lastTime = 100;
	if (lastTime < HAL_GetTick())
 8001c34:	f000 fd6a 	bl	800270c <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <Motor_Process+0x2c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d90a      	bls.n	8001c58 <Motor_Process+0x28>
	{
		Calculate_Channel(0);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f7ff fac0 	bl	80011c8 <Calculate_Channel>
		Calculate_Channel(1);
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f7ff fabd 	bl	80011c8 <Calculate_Channel>
		lastTime += 100; // период обновления, мс
 8001c4e:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <Motor_Process+0x2c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3364      	adds	r3, #100	; 0x64
 8001c54:	4a01      	ldr	r2, [pc, #4]	; (8001c5c <Motor_Process+0x2c>)
 8001c56:	6013      	str	r3, [r2, #0]
	}
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000044 	.word	0x20000044

08001c60 <Test_Process>:
void Test_Process(uint8_t test)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	if (!test)
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d02c      	beq.n	8001cca <Test_Process+0x6a>
	{
		return;
	}
	static uint32_t lastTime = 0;
	static int16_t lastValue = 0;
	if (lastTime < HAL_GetTick())
 8001c70:	f000 fd4c 	bl	800270c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <Test_Process+0x74>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d926      	bls.n	8001ccc <Test_Process+0x6c>
	{
		lastValue += 500;
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <Test_Process+0x78>)
 8001c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <Test_Process+0x78>)
 8001c90:	801a      	strh	r2, [r3, #0]
		if (lastValue > NowSettings.F_MaxAbsSpeed)
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <Test_Process+0x78>)
 8001c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <Test_Process+0x7c>)
 8001c9c:	891b      	ldrh	r3, [r3, #8]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dd06      	ble.n	8001cb0 <Test_Process+0x50>
		{
			lastValue = -NowSettings.F_MaxAbsSpeed;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <Test_Process+0x7c>)
 8001ca4:	891b      	ldrh	r3, [r3, #8]
 8001ca6:	425b      	negs	r3, r3
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	b21a      	sxth	r2, r3
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <Test_Process+0x78>)
 8001cae:	801a      	strh	r2, [r3, #0]
		}
		NowSettings.Need_F_ChannelSpeed = lastValue;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <Test_Process+0x78>)
 8001cb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <Test_Process+0x7c>)
 8001cb8:	809a      	strh	r2, [r3, #4]
		lastTime += 5000;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <Test_Process+0x74>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001cc2:	3308      	adds	r3, #8
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <Test_Process+0x74>)
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e000      	b.n	8001ccc <Test_Process+0x6c>
		return;
 8001cca:	bf00      	nop
	}
}
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000140 	.word	0x20000140
 8001cd8:	20000144 	.word	0x20000144
 8001cdc:	200000b8 	.word	0x200000b8

08001ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce4:	b672      	cpsid	i
}
 8001ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <Error_Handler+0x8>
	...

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_MspInit+0x5c>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_MspInit+0x5c>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6193      	str	r3, [r2, #24]
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_MspInit+0x5c>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_MspInit+0x60>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <HAL_MspInit+0x60>)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010000 	.word	0x40010000

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <NMI_Handler+0x4>

08001d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <HardFault_Handler+0x4>

08001d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <MemManage_Handler+0x4>

08001d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <BusFault_Handler+0x4>

08001d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <UsageFault_Handler+0x4>

08001d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr

08001d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d96:	f000 fca7 	bl	80026e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <TIM3_IRQHandler+0x10>)
 8001da6:	f004 fa5f 	bl	8006268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200001d8 	.word	0x200001d8

08001db4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <TIM4_IRQHandler+0x10>)
 8001dba:	f004 fa55 	bl	8006268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000220 	.word	0x20000220

08001dc8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <I2C1_EV_IRQHandler+0x10>)
 8001dce:	f001 fea2 	bl	8003b16 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200000e8 	.word	0x200000e8

08001ddc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <I2C1_ER_IRQHandler+0x10>)
 8001de2:	f002 f809 	bl	8003df8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200000e8 	.word	0x200000e8

08001df0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b092      	sub	sp, #72	; 0x48
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
 8001e1c:	615a      	str	r2, [r3, #20]
 8001e1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2220      	movs	r2, #32
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f005 f8e8 	bl	8006ffc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e2c:	4b33      	ldr	r3, [pc, #204]	; (8001efc <MX_TIM1_Init+0x100>)
 8001e2e:	4a34      	ldr	r2, [pc, #208]	; (8001f00 <MX_TIM1_Init+0x104>)
 8001e30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e32:	4b32      	ldr	r3, [pc, #200]	; (8001efc <MX_TIM1_Init+0x100>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <MX_TIM1_Init+0x100>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e3e:	4b2f      	ldr	r3, [pc, #188]	; (8001efc <MX_TIM1_Init+0x100>)
 8001e40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <MX_TIM1_Init+0x100>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e4c:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <MX_TIM1_Init+0x100>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <MX_TIM1_Init+0x100>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e58:	4828      	ldr	r0, [pc, #160]	; (8001efc <MX_TIM1_Init+0x100>)
 8001e5a:	f003 ffbd 	bl	8005dd8 <HAL_TIM_PWM_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001e64:	f7ff ff3c 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e74:	4619      	mov	r1, r3
 8001e76:	4821      	ldr	r0, [pc, #132]	; (8001efc <MX_TIM1_Init+0x100>)
 8001e78:	f004 ffcc 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001e82:	f7ff ff2d 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e86:	2360      	movs	r3, #96	; 0x60
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e92:	2300      	movs	r3, #0
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4814      	ldr	r0, [pc, #80]	; (8001efc <MX_TIM1_Init+0x100>)
 8001eac:	f004 fb78 	bl	80065a0 <HAL_TIM_PWM_ConfigChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001eb6:	f7ff ff13 	bl	8001ce0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	4619      	mov	r1, r3
 8001edc:	4807      	ldr	r0, [pc, #28]	; (8001efc <MX_TIM1_Init+0x100>)
 8001ede:	f004 fff7 	bl	8006ed0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001ee8:	f7ff fefa 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001eec:	4803      	ldr	r0, [pc, #12]	; (8001efc <MX_TIM1_Init+0x100>)
 8001eee:	f000 f9e5 	bl	80022bc <HAL_TIM_MspPostInit>

}
 8001ef2:	bf00      	nop
 8001ef4:	3748      	adds	r7, #72	; 0x48
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000148 	.word	0x20000148
 8001f00:	40012c00 	.word	0x40012c00

08001f04 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
 8001f22:	615a      	str	r2, [r3, #20]
 8001f24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f4e:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f50:	f003 ff42 	bl	8005dd8 <HAL_TIM_PWM_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f5a:	f7ff fec1 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f66:	f107 0320 	add.w	r3, r7, #32
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4810      	ldr	r0, [pc, #64]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f6e:	f004 ff51 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f78:	f7ff feb2 	bl	8001ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f7c:	2360      	movs	r3, #96	; 0x60
 8001f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	2200      	movs	r2, #0
 8001f90:	4619      	mov	r1, r3
 8001f92:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001f94:	f004 fb04 	bl	80065a0 <HAL_TIM_PWM_ConfigChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f9e:	f7ff fe9f 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM2_Init+0xac>)
 8001fa4:	f000 f98a 	bl	80022bc <HAL_TIM_MspPostInit>

}
 8001fa8:	bf00      	nop
 8001faa:	3728      	adds	r7, #40	; 0x28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000190 	.word	0x20000190

08001fb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fba:	f107 0310 	add.w	r3, r7, #16
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fc4:	463b      	mov	r3, r7
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <MX_TIM3_Init+0xd0>)
 8001fd2:	4a2d      	ldr	r2, [pc, #180]	; (8002088 <MX_TIM3_Init+0xd4>)
 8001fd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <MX_TIM3_Init+0xd0>)
 8001fd8:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001fdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <MX_TIM3_Init+0xd0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <MX_TIM3_Init+0xd0>)
 8001fe6:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001fea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <MX_TIM3_Init+0xd0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <MX_TIM3_Init+0xd0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001ff8:	4822      	ldr	r0, [pc, #136]	; (8002084 <MX_TIM3_Init+0xd0>)
 8001ffa:	f003 ffdf 	bl	8005fbc <HAL_TIM_IC_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002004:	f7ff fe6c 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002010:	f107 0310 	add.w	r3, r7, #16
 8002014:	4619      	mov	r1, r3
 8002016:	481b      	ldr	r0, [pc, #108]	; (8002084 <MX_TIM3_Init+0xd0>)
 8002018:	f004 fefc 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002022:	f7ff fe5d 	bl	8001ce0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800202a:	2301      	movs	r3, #1
 800202c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002036:	463b      	mov	r3, r7
 8002038:	2200      	movs	r2, #0
 800203a:	4619      	mov	r1, r3
 800203c:	4811      	ldr	r0, [pc, #68]	; (8002084 <MX_TIM3_Init+0xd0>)
 800203e:	f004 fa1b 	bl	8006478 <HAL_TIM_IC_ConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002048:	f7ff fe4a 	bl	8001ce0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800204c:	2302      	movs	r3, #2
 800204e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002050:	2302      	movs	r3, #2
 8002052:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002054:	463b      	mov	r3, r7
 8002056:	2204      	movs	r2, #4
 8002058:	4619      	mov	r1, r3
 800205a:	480a      	ldr	r0, [pc, #40]	; (8002084 <MX_TIM3_Init+0xd0>)
 800205c:	f004 fa0c 	bl	8006478 <HAL_TIM_IC_ConfigChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8002066:	f7ff fe3b 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_TIM3_Init+0xd0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <MX_TIM3_Init+0xd0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0201 	orr.w	r2, r2, #1
 8002078:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM3_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200001d8 	.word	0x200001d8
 8002088:	40000400 	.word	0x40000400

0800208c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002092:	f107 0310 	add.w	r3, r7, #16
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800209c:	463b      	mov	r3, r7
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020a8:	4b2c      	ldr	r3, [pc, #176]	; (800215c <MX_TIM4_Init+0xd0>)
 80020aa:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <MX_TIM4_Init+0xd4>)
 80020ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35999;
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <MX_TIM4_Init+0xd0>)
 80020b0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80020b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <MX_TIM4_Init+0xd0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 80020bc:	4b27      	ldr	r3, [pc, #156]	; (800215c <MX_TIM4_Init+0xd0>)
 80020be:	f64e 2260 	movw	r2, #60000	; 0xea60
 80020c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c4:	4b25      	ldr	r3, [pc, #148]	; (800215c <MX_TIM4_Init+0xd0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <MX_TIM4_Init+0xd0>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80020d0:	4822      	ldr	r0, [pc, #136]	; (800215c <MX_TIM4_Init+0xd0>)
 80020d2:	f003 ff73 	bl	8005fbc <HAL_TIM_IC_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80020dc:	f7ff fe00 	bl	8001ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	4619      	mov	r1, r3
 80020ee:	481b      	ldr	r0, [pc, #108]	; (800215c <MX_TIM4_Init+0xd0>)
 80020f0:	f004 fe90 	bl	8006e14 <HAL_TIMEx_MasterConfigSynchronization>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80020fa:	f7ff fdf1 	bl	8001ce0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020fe:	2300      	movs	r3, #0
 8002100:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002102:	2301      	movs	r3, #1
 8002104:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800210e:	463b      	mov	r3, r7
 8002110:	2200      	movs	r2, #0
 8002112:	4619      	mov	r1, r3
 8002114:	4811      	ldr	r0, [pc, #68]	; (800215c <MX_TIM4_Init+0xd0>)
 8002116:	f004 f9af 	bl	8006478 <HAL_TIM_IC_ConfigChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002120:	f7ff fdde 	bl	8001ce0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002124:	2302      	movs	r3, #2
 8002126:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002128:	2302      	movs	r3, #2
 800212a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	2204      	movs	r2, #4
 8002130:	4619      	mov	r1, r3
 8002132:	480a      	ldr	r0, [pc, #40]	; (800215c <MX_TIM4_Init+0xd0>)
 8002134:	f004 f9a0 	bl	8006478 <HAL_TIM_IC_ConfigChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800213e:	f7ff fdcf 	bl	8001ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_TIM4_Init+0xd0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <MX_TIM4_Init+0xd0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM4_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000220 	.word	0x20000220
 8002160:	40000800 	.word	0x40000800

08002164 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a12      	ldr	r2, [pc, #72]	; (80021bc <HAL_TIM_PWM_MspInit+0x58>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d10c      	bne.n	8002190 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_TIM_PWM_MspInit+0x5c>)
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <HAL_TIM_PWM_MspInit+0x5c>)
 800217c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002180:	6193      	str	r3, [r2, #24]
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_TIM_PWM_MspInit+0x5c>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800218e:	e010      	b.n	80021b2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002198:	d10b      	bne.n	80021b2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_TIM_PWM_MspInit+0x5c>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <HAL_TIM_PWM_MspInit+0x5c>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	61d3      	str	r3, [r2, #28]
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_TIM_PWM_MspInit+0x5c>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0318 	add.w	r3, r7, #24
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM3)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a32      	ldr	r2, [pc, #200]	; (80022a8 <HAL_TIM_IC_MspInit+0xe4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d12c      	bne.n	800223e <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e4:	4b31      	ldr	r3, [pc, #196]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	4a30      	ldr	r2, [pc, #192]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	61d3      	str	r3, [r2, #28]
 80021f0:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fc:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a2a      	ldr	r2, [pc, #168]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HALL2_Pin;
 8002214:	2340      	movs	r3, #64	; 0x40
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HALL2_GPIO_Port, &GPIO_InitStruct);
 8002220:	f107 0318 	add.w	r3, r7, #24
 8002224:	4619      	mov	r1, r3
 8002226:	4822      	ldr	r0, [pc, #136]	; (80022b0 <HAL_TIM_IC_MspInit+0xec>)
 8002228:	f001 f864 	bl	80032f4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	201d      	movs	r0, #29
 8002232:	f000 fd98 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002236:	201d      	movs	r0, #29
 8002238:	f000 fdb1 	bl	8002d9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800223c:	e030      	b.n	80022a0 <HAL_TIM_IC_MspInit+0xdc>
  else if(tim_icHandle->Instance==TIM4)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1c      	ldr	r2, [pc, #112]	; (80022b4 <HAL_TIM_IC_MspInit+0xf0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d12b      	bne.n	80022a0 <HAL_TIM_IC_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	4a17      	ldr	r2, [pc, #92]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	61d3      	str	r3, [r2, #28]
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a11      	ldr	r2, [pc, #68]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 8002266:	f043 0308 	orr.w	r3, r3, #8
 800226a:	6193      	str	r3, [r2, #24]
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_TIM_IC_MspInit+0xe8>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL1_Pin;
 8002278:	2340      	movs	r3, #64	; 0x40
 800227a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HALL1_GPIO_Port, &GPIO_InitStruct);
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	4619      	mov	r1, r3
 800228a:	480b      	ldr	r0, [pc, #44]	; (80022b8 <HAL_TIM_IC_MspInit+0xf4>)
 800228c:	f001 f832 	bl	80032f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002290:	2200      	movs	r2, #0
 8002292:	2100      	movs	r1, #0
 8002294:	201e      	movs	r0, #30
 8002296:	f000 fd66 	bl	8002d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800229a:	201e      	movs	r0, #30
 800229c:	f000 fd7f 	bl	8002d9e <HAL_NVIC_EnableIRQ>
}
 80022a0:	bf00      	nop
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40000400 	.word	0x40000400
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010800 	.word	0x40010800
 80022b4:	40000800 	.word	0x40000800
 80022b8:	40010c00 	.word	0x40010c00

080022bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0310 	add.w	r3, r7, #16
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <HAL_TIM_MspPostInit+0x98>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d119      	bne.n	8002310 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_TIM_MspPostInit+0x9c>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <HAL_TIM_MspPostInit+0x9c>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_TIM_MspPostInit+0x9c>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_COIL_Pin;
 80022f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2302      	movs	r3, #2
 8002300:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_COIL_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4619      	mov	r1, r3
 8002308:	4814      	ldr	r0, [pc, #80]	; (800235c <HAL_TIM_MspPostInit+0xa0>)
 800230a:	f000 fff3 	bl	80032f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800230e:	e01c      	b.n	800234a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002318:	d117      	bne.n	800234a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_TIM_MspPostInit+0x9c>)
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_TIM_MspPostInit+0x9c>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6193      	str	r3, [r2, #24]
 8002326:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <HAL_TIM_MspPostInit+0x9c>)
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin;
 8002332:	2301      	movs	r3, #1
 8002334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2302      	movs	r3, #2
 800233c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_MOTOR_GPIO_Port, &GPIO_InitStruct);
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4619      	mov	r1, r3
 8002344:	4805      	ldr	r0, [pc, #20]	; (800235c <HAL_TIM_MspPostInit+0xa0>)
 8002346:	f000 ffd5 	bl	80032f4 <HAL_GPIO_Init>
}
 800234a:	bf00      	nop
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40010800 	.word	0x40010800

08002360 <HAL_TIM_IC_CaptureCallback>:

volatile int8_t nowState = 0;
volatile uint32_t averageTime = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a91      	ldr	r2, [pc, #580]	; (80025b4 <HAL_TIM_IC_CaptureCallback+0x254>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d175      	bne.n	800245e <HAL_TIM_IC_CaptureCallback+0xfe>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7f1b      	ldrb	r3, [r3, #28]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d134      	bne.n	80023e4 <HAL_TIM_IC_CaptureCallback+0x84>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 8002382:	4b8d      	ldr	r3, [pc, #564]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b25b      	sxtb	r3, r3
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d012      	beq.n	80023b4 <HAL_TIM_IC_CaptureCallback+0x54>
 800238e:	2b00      	cmp	r3, #0
 8002390:	d124      	bne.n	80023dc <HAL_TIM_IC_CaptureCallback+0x7c>
			{
				case 0:
					nowState++;
 8002392:	4b89      	ldr	r3, [pc, #548]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b25b      	sxtb	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	b25a      	sxtb	r2, r3
 80023a0:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80023a2:	701a      	strb	r2, [r3, #0]
					averageTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80023a4:	2100      	movs	r1, #0
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f004 f9b8 	bl	800671c <HAL_TIM_ReadCapturedValue>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a83      	ldr	r2, [pc, #524]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 80023b0:	6013      	str	r3, [r2, #0]
					break;
 80023b2:	e018      	b.n	80023e6 <HAL_TIM_IC_CaptureCallback+0x86>
				case -1:
					nowState--;
 80023b4:	4b80      	ldr	r3, [pc, #512]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	b25a      	sxtb	r2, r3
 80023c2:	4b7d      	ldr	r3, [pc, #500]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80023c4:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80023c6:	2100      	movs	r1, #0
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f004 f9a7 	bl	800671c <HAL_TIM_ReadCapturedValue>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b7a      	ldr	r3, [pc, #488]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4413      	add	r3, r2
 80023d6:	4a79      	ldr	r2, [pc, #484]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 80023d8:	6013      	str	r3, [r2, #0]
					break;
 80023da:	e004      	b.n	80023e6 <HAL_TIM_IC_CaptureCallback+0x86>
				default:
					nowState = 0;
 80023dc:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
					break;
 80023e2:	e000      	b.n	80023e6 <HAL_TIM_IC_CaptureCallback+0x86>
			}
		}
 80023e4:	bf00      	nop
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7f1b      	ldrb	r3, [r3, #28]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d137      	bne.n	800245e <HAL_TIM_IC_CaptureCallback+0xfe>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 80023f6:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	b25b      	sxtb	r3, r3
 80023fc:	f113 0f03 	cmn.w	r3, #3
 8002400:	d015      	beq.n	800242e <HAL_TIM_IC_CaptureCallback+0xce>
 8002402:	2b02      	cmp	r3, #2
 8002404:	d127      	bne.n	8002456 <HAL_TIM_IC_CaptureCallback+0xf6>
			{
				case 2:
					nowState++;
 8002406:	4b6c      	ldr	r3, [pc, #432]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b25b      	sxtb	r3, r3
 800240c:	b2db      	uxtb	r3, r3
 800240e:	3301      	adds	r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	b25a      	sxtb	r2, r3
 8002414:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002416:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002418:	2104      	movs	r1, #4
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f004 f97e 	bl	800671c <HAL_TIM_ReadCapturedValue>
 8002420:	4602      	mov	r2, r0
 8002422:	4b66      	ldr	r3, [pc, #408]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4413      	add	r3, r2
 8002428:	4a64      	ldr	r2, [pc, #400]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800242a:	6013      	str	r3, [r2, #0]
					break;
 800242c:	e018      	b.n	8002460 <HAL_TIM_IC_CaptureCallback+0x100>
				case -3:
					nowState--;
 800242e:	4b62      	ldr	r3, [pc, #392]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b25b      	sxtb	r3, r3
 8002434:	b2db      	uxtb	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	b25a      	sxtb	r2, r3
 800243c:	4b5e      	ldr	r3, [pc, #376]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800243e:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002440:	2104      	movs	r1, #4
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f004 f96a 	bl	800671c <HAL_TIM_ReadCapturedValue>
 8002448:	4602      	mov	r2, r0
 800244a:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a5a      	ldr	r2, [pc, #360]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002452:	6013      	str	r3, [r2, #0]
				break;
 8002454:	e004      	b.n	8002460 <HAL_TIM_IC_CaptureCallback+0x100>
				default:
					nowState = 0;
 8002456:	4b58      	ldr	r3, [pc, #352]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
					break;
 800245c:	e000      	b.n	8002460 <HAL_TIM_IC_CaptureCallback+0x100>
			}
		}
 800245e:	bf00      	nop

	}
	if (htim->Instance == TIM4)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a56      	ldr	r2, [pc, #344]	; (80025c0 <HAL_TIM_IC_CaptureCallback+0x260>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d175      	bne.n	8002556 <HAL_TIM_IC_CaptureCallback+0x1f6>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	7f1b      	ldrb	r3, [r3, #28]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d134      	bne.n	80024dc <HAL_TIM_IC_CaptureCallback+0x17c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 800247a:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b25b      	sxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <HAL_TIM_IC_CaptureCallback+0x12a>
 8002484:	2b01      	cmp	r3, #1
 8002486:	d011      	beq.n	80024ac <HAL_TIM_IC_CaptureCallback+0x14c>
 8002488:	e024      	b.n	80024d4 <HAL_TIM_IC_CaptureCallback+0x174>
			{
				case 0:
					nowState--;
 800248a:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	b25b      	sxtb	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	b25a      	sxtb	r2, r3
 8002498:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800249a:	701a      	strb	r2, [r3, #0]
					averageTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800249c:	2100      	movs	r1, #0
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f004 f93c 	bl	800671c <HAL_TIM_ReadCapturedValue>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4a45      	ldr	r2, [pc, #276]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 80024a8:	6013      	str	r3, [r2, #0]
					break;
 80024aa:	e018      	b.n	80024de <HAL_TIM_IC_CaptureCallback+0x17e>
				case 1:
					nowState++;
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	b25b      	sxtb	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	3301      	adds	r3, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	b25a      	sxtb	r2, r3
 80024ba:	4b3f      	ldr	r3, [pc, #252]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80024bc:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80024be:	2100      	movs	r1, #0
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f004 f92b 	bl	800671c <HAL_TIM_ReadCapturedValue>
 80024c6:	4602      	mov	r2, r0
 80024c8:	4b3c      	ldr	r3, [pc, #240]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a3b      	ldr	r2, [pc, #236]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 80024d0:	6013      	str	r3, [r2, #0]
					break;
 80024d2:	e004      	b.n	80024de <HAL_TIM_IC_CaptureCallback+0x17e>
				default:
					nowState = 0;
 80024d4:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
					break;
 80024da:	e000      	b.n	80024de <HAL_TIM_IC_CaptureCallback+0x17e>
			}
		}
 80024dc:	bf00      	nop
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7f1b      	ldrb	r3, [r3, #28]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d137      	bne.n	8002556 <HAL_TIM_IC_CaptureCallback+0x1f6>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2200      	movs	r2, #0
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 80024ee:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	f113 0f02 	cmn.w	r3, #2
 80024f8:	d015      	beq.n	8002526 <HAL_TIM_IC_CaptureCallback+0x1c6>
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d127      	bne.n	800254e <HAL_TIM_IC_CaptureCallback+0x1ee>
			{
				case 3:
					nowState++;
 80024fe:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b25b      	sxtb	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	3301      	adds	r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	b25a      	sxtb	r2, r3
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800250e:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002510:	2104      	movs	r1, #4
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f004 f902 	bl	800671c <HAL_TIM_ReadCapturedValue>
 8002518:	4602      	mov	r2, r0
 800251a:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a26      	ldr	r2, [pc, #152]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002522:	6013      	str	r3, [r2, #0]
					break;
 8002524:	e018      	b.n	8002558 <HAL_TIM_IC_CaptureCallback+0x1f8>
				case -2:
					nowState--;
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b25b      	sxtb	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	b25a      	sxtb	r2, r3
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002536:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002538:	2104      	movs	r1, #4
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f004 f8ee 	bl	800671c <HAL_TIM_ReadCapturedValue>
 8002540:	4602      	mov	r2, r0
 8002542:	4b1e      	ldr	r3, [pc, #120]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
 8002548:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800254a:	6013      	str	r3, [r2, #0]
				break;
 800254c:	e004      	b.n	8002558 <HAL_TIM_IC_CaptureCallback+0x1f8>
				default:
					nowState = 0;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
					break;
 8002554:	e000      	b.n	8002558 <HAL_TIM_IC_CaptureCallback+0x1f8>
			}
		}
 8002556:	bf00      	nop
	}
	if (abs(nowState) == 4)
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b25b      	sxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	bfb8      	it	lt
 8002562:	425b      	neglt	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b04      	cmp	r3, #4
 8002568:	d120      	bne.n	80025ac <HAL_TIM_IC_CaptureCallback+0x24c>
	{
		int32_t bufTime = averageTime;
 800256a:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]
		averageTime = 0;
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_TIM_IC_CaptureCallback+0x25c>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
		if (NowSettings.Config & 0x08)
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x264>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_TIM_IC_CaptureCallback+0x228>
		{
			bufTime <<= 1;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
		}
		if (nowState < 0)
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b25b      	sxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	da02      	bge.n	8002598 <HAL_TIM_IC_CaptureCallback+0x238>
		{
			bufTime = -bufTime;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	425b      	negs	r3, r3
 8002596:	60fb      	str	r3, [r7, #12]
		}
		nowState = 0;
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]
		 * минута в тиках = 120000;
		 * ufTime = 2 * Время одного цикла (оборота);
		 * 120000 / (bufTime / 2) обороты в минуту
		 * 240000 / bufTime обороты в минуту
		 */
		NowSettings.Current_F_ChannelSpeed = 240000 / bufTime;
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <HAL_TIM_IC_CaptureCallback+0x268>)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80025a6:	b21a      	sxth	r2, r3
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x264>)
 80025aa:	80da      	strh	r2, [r3, #6]
	}
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40000400 	.word	0x40000400
 80025b8:	20000268 	.word	0x20000268
 80025bc:	2000026c 	.word	0x2000026c
 80025c0:	40000800 	.word	0x40000800
 80025c4:	200000b8 	.word	0x200000b8
 80025c8:	0003a980 	.word	0x0003a980

080025cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	if ((htim->Instance == TIM3) || (htim->Instance == TIM4))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a09      	ldr	r2, [pc, #36]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_TIM_PeriodElapsedCallback+0x1c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d105      	bne.n	80025f4 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		NowSettings.Current_F_ChannelSpeed = 0;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	80da      	strh	r2, [r3, #6]
		nowState = 0;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
	}
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc80      	pop	{r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40000400 	.word	0x40000400
 8002604:	40000800 	.word	0x40000800
 8002608:	200000b8 	.word	0x200000b8
 800260c:	20000268 	.word	0x20000268

08002610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002610:	480c      	ldr	r0, [pc, #48]	; (8002644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002612:	490d      	ldr	r1, [pc, #52]	; (8002648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002614:	4a0d      	ldr	r2, [pc, #52]	; (800264c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002618:	e002      	b.n	8002620 <LoopCopyDataInit>

0800261a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800261a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800261c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261e:	3304      	adds	r3, #4

08002620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002624:	d3f9      	bcc.n	800261a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002626:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002628:	4c0a      	ldr	r4, [pc, #40]	; (8002654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800262a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800262c:	e001      	b.n	8002632 <LoopFillZerobss>

0800262e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002630:	3204      	adds	r2, #4

08002632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002634:	d3fb      	bcc.n	800262e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002636:	f7ff fbdb 	bl	8001df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800263a:	f004 fcad 	bl	8006f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800263e:	f7ff f913 	bl	8001868 <main>
  bx lr
 8002642:	4770      	bx	lr
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 800264c:	08007054 	.word	0x08007054
  ldr r2, =_sbss
 8002650:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8002654:	20000298 	.word	0x20000298

08002658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC1_2_IRQHandler>
	...

0800265c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_Init+0x28>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <HAL_Init+0x28>)
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266c:	2003      	movs	r0, #3
 800266e:	f000 fb6f 	bl	8002d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002672:	200f      	movs	r0, #15
 8002674:	f000 f808 	bl	8002688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002678:	f7ff fb38 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x54>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b12      	ldr	r3, [pc, #72]	; (80026e0 <HAL_InitTick+0x58>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269e:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fb8b 	bl	8002dc2 <HAL_SYSTICK_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00e      	b.n	80026d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	d80a      	bhi.n	80026d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026bc:	2200      	movs	r2, #0
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f000 fb4f 	bl	8002d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c8:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <HAL_InitTick+0x5c>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000048 	.word	0x20000048
 80026e0:	20000050 	.word	0x20000050
 80026e4:	2000004c 	.word	0x2000004c

080026e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_IncTick+0x1c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_IncTick+0x20>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a03      	ldr	r2, [pc, #12]	; (8002708 <HAL_IncTick+0x20>)
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	20000050 	.word	0x20000050
 8002708:	20000270 	.word	0x20000270

0800270c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return uwTick;
 8002710:	4b02      	ldr	r3, [pc, #8]	; (800271c <HAL_GetTick+0x10>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	20000270 	.word	0x20000270

08002720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002728:	f7ff fff0 	bl	800270c <HAL_GetTick>
 800272c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d005      	beq.n	8002746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_Delay+0x44>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002746:	bf00      	nop
 8002748:	f7ff ffe0 	bl	800270c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d8f7      	bhi.n	8002748 <HAL_Delay+0x28>
  {
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000050 	.word	0x20000050

08002768 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e0be      	b.n	8002908 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fb68 	bl	8000e7c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f9ab 	bl	8002b08 <ADC_ConversionStop_Disable>
 80027b2:	4603      	mov	r3, r0
 80027b4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 8099 	bne.w	80028f6 <HAL_ADC_Init+0x18e>
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 8095 	bne.w	80028f6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027d4:	f023 0302 	bic.w	r3, r3, #2
 80027d8:	f043 0202 	orr.w	r2, r3, #2
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7b1b      	ldrb	r3, [r3, #12]
 80027ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80027f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002800:	d003      	beq.n	800280a <HAL_ADC_Init+0xa2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_ADC_Init+0xa8>
 800280a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280e:	e000      	b.n	8002812 <HAL_ADC_Init+0xaa>
 8002810:	2300      	movs	r3, #0
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7d1b      	ldrb	r3, [r3, #20]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d119      	bne.n	8002854 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7b1b      	ldrb	r3, [r3, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	3b01      	subs	r3, #1
 800282e:	035a      	lsls	r2, r3, #13
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	e00b      	b.n	8002854 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	f043 0201 	orr.w	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	430a      	orrs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <HAL_ADC_Init+0x1a8>)
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	430b      	orrs	r3, r1
 800287a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002884:	d003      	beq.n	800288e <HAL_ADC_Init+0x126>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d104      	bne.n	8002898 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	3b01      	subs	r3, #1
 8002894:	051b      	lsls	r3, r3, #20
 8002896:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <HAL_ADC_Init+0x1ac>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d10b      	bne.n	80028d4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c6:	f023 0303 	bic.w	r3, r3, #3
 80028ca:	f043 0201 	orr.w	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028d2:	e018      	b.n	8002906 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	f023 0312 	bic.w	r3, r3, #18
 80028dc:	f043 0210 	orr.w	r2, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80028f4:	e007      	b.n	8002906 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	ffe1f7fd 	.word	0xffe1f7fd
 8002914:	ff1f0efe 	.word	0xff1f0efe

08002918 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x20>
 8002934:	2302      	movs	r3, #2
 8002936:	e0dc      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x1da>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b06      	cmp	r3, #6
 8002946:	d81c      	bhi.n	8002982 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	3b05      	subs	r3, #5
 800295a:	221f      	movs	r2, #31
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	4019      	ands	r1, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b05      	subs	r3, #5
 8002974:	fa00 f203 	lsl.w	r2, r0, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	635a      	str	r2, [r3, #52]	; 0x34
 8002980:	e03c      	b.n	80029fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d81c      	bhi.n	80029c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3b23      	subs	r3, #35	; 0x23
 800299c:	221f      	movs	r2, #31
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4019      	ands	r1, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	3b23      	subs	r3, #35	; 0x23
 80029b6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
 80029c2:	e01b      	b.n	80029fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b41      	subs	r3, #65	; 0x41
 80029d6:	221f      	movs	r2, #31
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	4019      	ands	r1, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	3b41      	subs	r3, #65	; 0x41
 80029f0:	fa00 f203 	lsl.w	r2, r0, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b09      	cmp	r3, #9
 8002a02:	d91c      	bls.n	8002a3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68d9      	ldr	r1, [r3, #12]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	3b1e      	subs	r3, #30
 8002a16:	2207      	movs	r2, #7
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	4019      	ands	r1, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6898      	ldr	r0, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b1e      	subs	r3, #30
 8002a30:	fa00 f203 	lsl.w	r2, r0, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	e019      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6919      	ldr	r1, [r3, #16]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	2207      	movs	r2, #7
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	4019      	ands	r1, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6898      	ldr	r0, [r3, #8]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d003      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a7e:	2b11      	cmp	r3, #17
 8002a80:	d132      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <HAL_ADC_ConfigChannel+0x1e4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d125      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d126      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002aa8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	0c9a      	lsrs	r2, r3, #18
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ac8:	e002      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f9      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x1b2>
 8002ad6:	e007      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	40012400 	.word	0x40012400
 8002b00:	20000048 	.word	0x20000048
 8002b04:	431bde83 	.word	0x431bde83

08002b08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d12e      	bne.n	8002b80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b32:	f7ff fdeb 	bl	800270c <HAL_GetTick>
 8002b36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b38:	e01b      	b.n	8002b72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b3a:	f7ff fde7 	bl	800270c <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d914      	bls.n	8002b72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10d      	bne.n	8002b72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	f043 0210 	orr.w	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e007      	b.n	8002b82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d0dc      	beq.n	8002b3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bbe:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	60d3      	str	r3, [r2, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	3714      	adds	r7, #20
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <__NVIC_GetPriorityGrouping+0x18>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	f003 0307 	and.w	r3, r3, #7
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	db0b      	blt.n	8002c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	f003 021f 	and.w	r2, r3, #31
 8002c08:	4906      	ldr	r1, [pc, #24]	; (8002c24 <__NVIC_EnableIRQ+0x34>)
 8002c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2001      	movs	r0, #1
 8002c12:	fa00 f202 	lsl.w	r2, r0, r2
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	6039      	str	r1, [r7, #0]
 8002c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	db0a      	blt.n	8002c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	490c      	ldr	r1, [pc, #48]	; (8002c74 <__NVIC_SetPriority+0x4c>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c50:	e00a      	b.n	8002c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4908      	ldr	r1, [pc, #32]	; (8002c78 <__NVIC_SetPriority+0x50>)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3b04      	subs	r3, #4
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	440b      	add	r3, r1
 8002c66:	761a      	strb	r2, [r3, #24]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b089      	sub	sp, #36	; 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f1c3 0307 	rsb	r3, r3, #7
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	bf28      	it	cs
 8002c9a:	2304      	movcs	r3, #4
 8002c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d902      	bls.n	8002cac <NVIC_EncodePriority+0x30>
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3b03      	subs	r3, #3
 8002caa:	e000      	b.n	8002cae <NVIC_EncodePriority+0x32>
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd4:	4313      	orrs	r3, r2
         );
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3724      	adds	r7, #36	; 0x24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ce4:	f3bf 8f4f 	dsb	sy
}
 8002ce8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <__NVIC_SystemReset+0x24>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002cf2:	4904      	ldr	r1, [pc, #16]	; (8002d04 <__NVIC_SystemReset+0x24>)
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_SystemReset+0x28>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cfa:	f3bf 8f4f 	dsb	sy
}
 8002cfe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <__NVIC_SystemReset+0x20>
 8002d04:	e000ed00 	.word	0xe000ed00
 8002d08:	05fa0004 	.word	0x05fa0004

08002d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d1c:	d301      	bcc.n	8002d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00f      	b.n	8002d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <SysTick_Config+0x40>)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d30:	f7ff ff7a 	bl	8002c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <SysTick_Config+0x40>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3a:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <SysTick_Config+0x40>)
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	e000e010 	.word	0xe000e010

08002d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff17 	bl	8002b8c <__NVIC_SetPriorityGrouping>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d78:	f7ff ff2c 	bl	8002bd4 <__NVIC_GetPriorityGrouping>
 8002d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	6978      	ldr	r0, [r7, #20]
 8002d84:	f7ff ff7a 	bl	8002c7c <NVIC_EncodePriority>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d8e:	4611      	mov	r1, r2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff49 	bl	8002c28 <__NVIC_SetPriority>
}
 8002d96:	bf00      	nop
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff ff1f 	bl	8002bf0 <__NVIC_EnableIRQ>
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002dbe:	f7ff ff8f 	bl	8002ce0 <__NVIC_SystemReset>

08002dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7ff ff9e 	bl	8002d0c <SysTick_Config>
 8002dd0:	4603      	mov	r3, r0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d005      	beq.n	8002dfe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2204      	movs	r2, #4
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
 8002dfc:	e051      	b.n	8002ea2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 020e 	bic.w	r2, r2, #14
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a22      	ldr	r2, [pc, #136]	; (8002eac <HAL_DMA_Abort_IT+0xd0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d029      	beq.n	8002e7c <HAL_DMA_Abort_IT+0xa0>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a20      	ldr	r2, [pc, #128]	; (8002eb0 <HAL_DMA_Abort_IT+0xd4>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d022      	beq.n	8002e78 <HAL_DMA_Abort_IT+0x9c>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <HAL_DMA_Abort_IT+0xd8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d01a      	beq.n	8002e72 <HAL_DMA_Abort_IT+0x96>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <HAL_DMA_Abort_IT+0xdc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d012      	beq.n	8002e6c <HAL_DMA_Abort_IT+0x90>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_DMA_Abort_IT+0xe0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00a      	beq.n	8002e66 <HAL_DMA_Abort_IT+0x8a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a1a      	ldr	r2, [pc, #104]	; (8002ec0 <HAL_DMA_Abort_IT+0xe4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d102      	bne.n	8002e60 <HAL_DMA_Abort_IT+0x84>
 8002e5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e5e:	e00e      	b.n	8002e7e <HAL_DMA_Abort_IT+0xa2>
 8002e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e64:	e00b      	b.n	8002e7e <HAL_DMA_Abort_IT+0xa2>
 8002e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e6a:	e008      	b.n	8002e7e <HAL_DMA_Abort_IT+0xa2>
 8002e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e70:	e005      	b.n	8002e7e <HAL_DMA_Abort_IT+0xa2>
 8002e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e76:	e002      	b.n	8002e7e <HAL_DMA_Abort_IT+0xa2>
 8002e78:	2310      	movs	r3, #16
 8002e7a:	e000      	b.n	8002e7e <HAL_DMA_Abort_IT+0xa2>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_DMA_Abort_IT+0xe8>)
 8002e80:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
    } 
  }
  return status;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40020008 	.word	0x40020008
 8002eb0:	4002001c 	.word	0x4002001c
 8002eb4:	40020030 	.word	0x40020030
 8002eb8:	40020044 	.word	0x40020044
 8002ebc:	40020058 	.word	0x40020058
 8002ec0:	4002006c 	.word	0x4002006c
 8002ec4:	40020000 	.word	0x40020000

08002ec8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_FLASH_Program+0xd8>)
 8002efc:	7e1b      	ldrb	r3, [r3, #24]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_FLASH_Program+0x26>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e054      	b.n	8002fb0 <HAL_FLASH_Program+0xd0>
 8002f06:	4b2c      	ldr	r3, [pc, #176]	; (8002fb8 <HAL_FLASH_Program+0xd8>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f10:	f000 f8b2 	bl	8003078 <FLASH_WaitForLastOperation>
 8002f14:	4603      	mov	r3, r0
 8002f16:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d144      	bne.n	8002fa8 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d102      	bne.n	8002f2a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002f24:	2301      	movs	r3, #1
 8002f26:	757b      	strb	r3, [r7, #21]
 8002f28:	e007      	b.n	8002f3a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d102      	bne.n	8002f36 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002f30:	2302      	movs	r3, #2
 8002f32:	757b      	strb	r3, [r7, #21]
 8002f34:	e001      	b.n	8002f3a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002f36:	2304      	movs	r3, #4
 8002f38:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	75bb      	strb	r3, [r7, #22]
 8002f3e:	e02d      	b.n	8002f9c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002f40:	7dbb      	ldrb	r3, [r7, #22]
 8002f42:	005a      	lsls	r2, r3, #1
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	eb02 0c03 	add.w	ip, r2, r3
 8002f4a:	7dbb      	ldrb	r3, [r7, #22]
 8002f4c:	0119      	lsls	r1, r3, #4
 8002f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f52:	f1c1 0620 	rsb	r6, r1, #32
 8002f56:	f1a1 0020 	sub.w	r0, r1, #32
 8002f5a:	fa22 f401 	lsr.w	r4, r2, r1
 8002f5e:	fa03 f606 	lsl.w	r6, r3, r6
 8002f62:	4334      	orrs	r4, r6
 8002f64:	fa23 f000 	lsr.w	r0, r3, r0
 8002f68:	4304      	orrs	r4, r0
 8002f6a:	fa23 f501 	lsr.w	r5, r3, r1
 8002f6e:	b2a3      	uxth	r3, r4
 8002f70:	4619      	mov	r1, r3
 8002f72:	4660      	mov	r0, ip
 8002f74:	f000 f864 	bl	8003040 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002f78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f7c:	f000 f87c 	bl	8003078 <FLASH_WaitForLastOperation>
 8002f80:	4603      	mov	r3, r0
 8002f82:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_FLASH_Program+0xdc>)
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <HAL_FLASH_Program+0xdc>)
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002f96:	7dbb      	ldrb	r3, [r7, #22]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	75bb      	strb	r3, [r7, #22]
 8002f9c:	7dba      	ldrb	r2, [r7, #22]
 8002f9e:	7d7b      	ldrb	r3, [r7, #21]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d3cd      	bcc.n	8002f40 <HAL_FLASH_Program+0x60>
 8002fa4:	e000      	b.n	8002fa8 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002fa6:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <HAL_FLASH_Program+0xd8>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	761a      	strb	r2, [r3, #24]

  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fb8:	20000278 	.word	0x20000278
 8002fbc:	40022000 	.word	0x40022000

08002fc0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <HAL_FLASH_Unlock+0x40>)
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <HAL_FLASH_Unlock+0x40>)
 8002fd8:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <HAL_FLASH_Unlock+0x44>)
 8002fda:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_FLASH_Unlock+0x40>)
 8002fde:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <HAL_FLASH_Unlock+0x48>)
 8002fe0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <HAL_FLASH_Unlock+0x40>)
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40022000 	.word	0x40022000
 8003004:	45670123 	.word	0x45670123
 8003008:	cdef89ab 	.word	0xcdef89ab

0800300c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <HAL_FLASH_Lock+0x1c>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	4a04      	ldr	r2, [pc, #16]	; (8003028 <HAL_FLASH_Lock+0x1c>)
 8003016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800301a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	40022000 	.word	0x40022000

0800302c <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <HAL_FLASH_GetError+0x10>)
 8003032:	69db      	ldr	r3, [r3, #28]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	20000278 	.word	0x20000278

08003040 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <FLASH_Program_HalfWord+0x30>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003052:	4b08      	ldr	r3, [pc, #32]	; (8003074 <FLASH_Program_HalfWord+0x34>)
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	4a07      	ldr	r2, [pc, #28]	; (8003074 <FLASH_Program_HalfWord+0x34>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	887a      	ldrh	r2, [r7, #2]
 8003062:	801a      	strh	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000278 	.word	0x20000278
 8003074:	40022000 	.word	0x40022000

08003078 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003080:	f7ff fb44 	bl	800270c <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003086:	e010      	b.n	80030aa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d00c      	beq.n	80030aa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <FLASH_WaitForLastOperation+0x2e>
 8003096:	f7ff fb39 	bl	800270c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d201      	bcs.n	80030aa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e025      	b.n	80030f6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <FLASH_WaitForLastOperation+0x88>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1e8      	bne.n	8003088 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <FLASH_WaitForLastOperation+0x88>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <FLASH_WaitForLastOperation+0x88>)
 80030c4:	2220      	movs	r2, #32
 80030c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80030c8:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <FLASH_WaitForLastOperation+0x88>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <FLASH_WaitForLastOperation+0x88>)
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <FLASH_WaitForLastOperation+0x88>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80030ec:	f000 f80a 	bl	8003104 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40022000 	.word	0x40022000

08003104 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800310e:	4b23      	ldr	r3, [pc, #140]	; (800319c <FLASH_SetErrorCode+0x98>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800311a:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <FLASH_SetErrorCode+0x9c>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f043 0302 	orr.w	r3, r3, #2
 8003122:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <FLASH_SetErrorCode+0x9c>)
 8003124:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f043 0310 	orr.w	r3, r3, #16
 800312c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800312e:	4b1b      	ldr	r3, [pc, #108]	; (800319c <FLASH_SetErrorCode+0x98>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <FLASH_SetErrorCode+0x9c>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <FLASH_SetErrorCode+0x9c>)
 8003144:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800314e:	4b13      	ldr	r3, [pc, #76]	; (800319c <FLASH_SetErrorCode+0x98>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <FLASH_SetErrorCode+0x9c>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <FLASH_SetErrorCode+0x9c>)
 8003164:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003166:	4b0d      	ldr	r3, [pc, #52]	; (800319c <FLASH_SetErrorCode+0x98>)
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4a0c      	ldr	r2, [pc, #48]	; (800319c <FLASH_SetErrorCode+0x98>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f240 1201 	movw	r2, #257	; 0x101
 8003178:	4293      	cmp	r3, r2
 800317a:	d106      	bne.n	800318a <FLASH_SetErrorCode+0x86>
 800317c:	4b07      	ldr	r3, [pc, #28]	; (800319c <FLASH_SetErrorCode+0x98>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4a06      	ldr	r2, [pc, #24]	; (800319c <FLASH_SetErrorCode+0x98>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	61d3      	str	r3, [r2, #28]
}  
 8003188:	e002      	b.n	8003190 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800318a:	4a04      	ldr	r2, [pc, #16]	; (800319c <FLASH_SetErrorCode+0x98>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	60d3      	str	r3, [r2, #12]
}  
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40022000 	.word	0x40022000
 80031a0:	20000278 	.word	0x20000278

080031a4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031b6:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_FLASHEx_Erase+0xd0>)
 80031b8:	7e1b      	ldrb	r3, [r3, #24]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_FLASHEx_Erase+0x1e>
 80031be:	2302      	movs	r3, #2
 80031c0:	e053      	b.n	800326a <HAL_FLASHEx_Erase+0xc6>
 80031c2:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HAL_FLASHEx_Erase+0xd0>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d116      	bne.n	80031fe <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80031d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031d4:	f7ff ff50 	bl	8003078 <FLASH_WaitForLastOperation>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d141      	bne.n	8003262 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80031de:	2001      	movs	r0, #1
 80031e0:	f000 f84c 	bl	800327c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80031e8:	f7ff ff46 	bl	8003078 <FLASH_WaitForLastOperation>
 80031ec:	4603      	mov	r3, r0
 80031ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80031f0:	4b21      	ldr	r3, [pc, #132]	; (8003278 <HAL_FLASHEx_Erase+0xd4>)
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	4a20      	ldr	r2, [pc, #128]	; (8003278 <HAL_FLASHEx_Erase+0xd4>)
 80031f6:	f023 0304 	bic.w	r3, r3, #4
 80031fa:	6113      	str	r3, [r2, #16]
 80031fc:	e031      	b.n	8003262 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80031fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003202:	f7ff ff39 	bl	8003078 <FLASH_WaitForLastOperation>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d12a      	bne.n	8003262 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	f04f 32ff 	mov.w	r2, #4294967295
 8003212:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	e019      	b.n	8003250 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800321c:	68b8      	ldr	r0, [r7, #8]
 800321e:	f000 f849 	bl	80032b4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003222:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003226:	f7ff ff27 	bl	8003078 <FLASH_WaitForLastOperation>
 800322a:	4603      	mov	r3, r0
 800322c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_FLASHEx_Erase+0xd4>)
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	4a11      	ldr	r2, [pc, #68]	; (8003278 <HAL_FLASHEx_Erase+0xd4>)
 8003234:	f023 0302 	bic.w	r3, r3, #2
 8003238:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	601a      	str	r2, [r3, #0]
            break;
 8003246:	e00c      	b.n	8003262 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800324e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	029a      	lsls	r2, r3, #10
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	429a      	cmp	r2, r3
 8003260:	d3dc      	bcc.n	800321c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <HAL_FLASHEx_Erase+0xd0>)
 8003264:	2200      	movs	r2, #0
 8003266:	761a      	strb	r2, [r3, #24]

  return status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000278 	.word	0x20000278
 8003278:	40022000 	.word	0x40022000

0800327c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003284:	4b09      	ldr	r3, [pc, #36]	; (80032ac <FLASH_MassErase+0x30>)
 8003286:	2200      	movs	r2, #0
 8003288:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <FLASH_MassErase+0x34>)
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <FLASH_MassErase+0x34>)
 8003290:	f043 0304 	orr.w	r3, r3, #4
 8003294:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <FLASH_MassErase+0x34>)
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <FLASH_MassErase+0x34>)
 800329c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bc80      	pop	{r7}
 80032aa:	4770      	bx	lr
 80032ac:	20000278 	.word	0x20000278
 80032b0:	40022000 	.word	0x40022000

080032b4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <FLASH_PageErase+0x38>)
 80032be:	2200      	movs	r2, #0
 80032c0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <FLASH_PageErase+0x3c>)
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <FLASH_PageErase+0x3c>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80032ce:	4a08      	ldr	r2, [pc, #32]	; (80032f0 <FLASH_PageErase+0x3c>)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <FLASH_PageErase+0x3c>)
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <FLASH_PageErase+0x3c>)
 80032da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000278 	.word	0x20000278
 80032f0:	40022000 	.word	0x40022000

080032f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b08b      	sub	sp, #44	; 0x2c
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032fe:	2300      	movs	r3, #0
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003302:	2300      	movs	r3, #0
 8003304:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003306:	e169      	b.n	80035dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003308:	2201      	movs	r2, #1
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	429a      	cmp	r2, r3
 8003322:	f040 8158 	bne.w	80035d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4a9a      	ldr	r2, [pc, #616]	; (8003594 <HAL_GPIO_Init+0x2a0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d05e      	beq.n	80033ee <HAL_GPIO_Init+0xfa>
 8003330:	4a98      	ldr	r2, [pc, #608]	; (8003594 <HAL_GPIO_Init+0x2a0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d875      	bhi.n	8003422 <HAL_GPIO_Init+0x12e>
 8003336:	4a98      	ldr	r2, [pc, #608]	; (8003598 <HAL_GPIO_Init+0x2a4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d058      	beq.n	80033ee <HAL_GPIO_Init+0xfa>
 800333c:	4a96      	ldr	r2, [pc, #600]	; (8003598 <HAL_GPIO_Init+0x2a4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d86f      	bhi.n	8003422 <HAL_GPIO_Init+0x12e>
 8003342:	4a96      	ldr	r2, [pc, #600]	; (800359c <HAL_GPIO_Init+0x2a8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d052      	beq.n	80033ee <HAL_GPIO_Init+0xfa>
 8003348:	4a94      	ldr	r2, [pc, #592]	; (800359c <HAL_GPIO_Init+0x2a8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d869      	bhi.n	8003422 <HAL_GPIO_Init+0x12e>
 800334e:	4a94      	ldr	r2, [pc, #592]	; (80035a0 <HAL_GPIO_Init+0x2ac>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d04c      	beq.n	80033ee <HAL_GPIO_Init+0xfa>
 8003354:	4a92      	ldr	r2, [pc, #584]	; (80035a0 <HAL_GPIO_Init+0x2ac>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d863      	bhi.n	8003422 <HAL_GPIO_Init+0x12e>
 800335a:	4a92      	ldr	r2, [pc, #584]	; (80035a4 <HAL_GPIO_Init+0x2b0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d046      	beq.n	80033ee <HAL_GPIO_Init+0xfa>
 8003360:	4a90      	ldr	r2, [pc, #576]	; (80035a4 <HAL_GPIO_Init+0x2b0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d85d      	bhi.n	8003422 <HAL_GPIO_Init+0x12e>
 8003366:	2b12      	cmp	r3, #18
 8003368:	d82a      	bhi.n	80033c0 <HAL_GPIO_Init+0xcc>
 800336a:	2b12      	cmp	r3, #18
 800336c:	d859      	bhi.n	8003422 <HAL_GPIO_Init+0x12e>
 800336e:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <HAL_GPIO_Init+0x80>)
 8003370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003374:	080033ef 	.word	0x080033ef
 8003378:	080033c9 	.word	0x080033c9
 800337c:	080033db 	.word	0x080033db
 8003380:	0800341d 	.word	0x0800341d
 8003384:	08003423 	.word	0x08003423
 8003388:	08003423 	.word	0x08003423
 800338c:	08003423 	.word	0x08003423
 8003390:	08003423 	.word	0x08003423
 8003394:	08003423 	.word	0x08003423
 8003398:	08003423 	.word	0x08003423
 800339c:	08003423 	.word	0x08003423
 80033a0:	08003423 	.word	0x08003423
 80033a4:	08003423 	.word	0x08003423
 80033a8:	08003423 	.word	0x08003423
 80033ac:	08003423 	.word	0x08003423
 80033b0:	08003423 	.word	0x08003423
 80033b4:	08003423 	.word	0x08003423
 80033b8:	080033d1 	.word	0x080033d1
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	4a79      	ldr	r2, [pc, #484]	; (80035a8 <HAL_GPIO_Init+0x2b4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033c6:	e02c      	b.n	8003422 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	623b      	str	r3, [r7, #32]
          break;
 80033ce:	e029      	b.n	8003424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	3304      	adds	r3, #4
 80033d6:	623b      	str	r3, [r7, #32]
          break;
 80033d8:	e024      	b.n	8003424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	3308      	adds	r3, #8
 80033e0:	623b      	str	r3, [r7, #32]
          break;
 80033e2:	e01f      	b.n	8003424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	330c      	adds	r3, #12
 80033ea:	623b      	str	r3, [r7, #32]
          break;
 80033ec:	e01a      	b.n	8003424 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033f6:	2304      	movs	r3, #4
 80033f8:	623b      	str	r3, [r7, #32]
          break;
 80033fa:	e013      	b.n	8003424 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003404:	2308      	movs	r3, #8
 8003406:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	611a      	str	r2, [r3, #16]
          break;
 800340e:	e009      	b.n	8003424 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003410:	2308      	movs	r3, #8
 8003412:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	615a      	str	r2, [r3, #20]
          break;
 800341a:	e003      	b.n	8003424 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800341c:	2300      	movs	r3, #0
 800341e:	623b      	str	r3, [r7, #32]
          break;
 8003420:	e000      	b.n	8003424 <HAL_GPIO_Init+0x130>
          break;
 8003422:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2bff      	cmp	r3, #255	; 0xff
 8003428:	d801      	bhi.n	800342e <HAL_GPIO_Init+0x13a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	e001      	b.n	8003432 <HAL_GPIO_Init+0x13e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3304      	adds	r3, #4
 8003432:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2bff      	cmp	r3, #255	; 0xff
 8003438:	d802      	bhi.n	8003440 <HAL_GPIO_Init+0x14c>
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	e002      	b.n	8003446 <HAL_GPIO_Init+0x152>
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	3b08      	subs	r3, #8
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	210f      	movs	r1, #15
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	401a      	ands	r2, r3
 8003458:	6a39      	ldr	r1, [r7, #32]
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	431a      	orrs	r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 80b1 	beq.w	80035d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003474:	4b4d      	ldr	r3, [pc, #308]	; (80035ac <HAL_GPIO_Init+0x2b8>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	4a4c      	ldr	r2, [pc, #304]	; (80035ac <HAL_GPIO_Init+0x2b8>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6193      	str	r3, [r2, #24]
 8003480:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_GPIO_Init+0x2b8>)
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800348c:	4a48      	ldr	r2, [pc, #288]	; (80035b0 <HAL_GPIO_Init+0x2bc>)
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	3302      	adds	r3, #2
 8003494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003498:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	220f      	movs	r2, #15
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4013      	ands	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a40      	ldr	r2, [pc, #256]	; (80035b4 <HAL_GPIO_Init+0x2c0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d013      	beq.n	80034e0 <HAL_GPIO_Init+0x1ec>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a3f      	ldr	r2, [pc, #252]	; (80035b8 <HAL_GPIO_Init+0x2c4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00d      	beq.n	80034dc <HAL_GPIO_Init+0x1e8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a3e      	ldr	r2, [pc, #248]	; (80035bc <HAL_GPIO_Init+0x2c8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <HAL_GPIO_Init+0x1e4>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a3d      	ldr	r2, [pc, #244]	; (80035c0 <HAL_GPIO_Init+0x2cc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d101      	bne.n	80034d4 <HAL_GPIO_Init+0x1e0>
 80034d0:	2303      	movs	r3, #3
 80034d2:	e006      	b.n	80034e2 <HAL_GPIO_Init+0x1ee>
 80034d4:	2304      	movs	r3, #4
 80034d6:	e004      	b.n	80034e2 <HAL_GPIO_Init+0x1ee>
 80034d8:	2302      	movs	r3, #2
 80034da:	e002      	b.n	80034e2 <HAL_GPIO_Init+0x1ee>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <HAL_GPIO_Init+0x1ee>
 80034e0:	2300      	movs	r3, #0
 80034e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e4:	f002 0203 	and.w	r2, r2, #3
 80034e8:	0092      	lsls	r2, r2, #2
 80034ea:	4093      	lsls	r3, r2
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034f2:	492f      	ldr	r1, [pc, #188]	; (80035b0 <HAL_GPIO_Init+0x2bc>)
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	3302      	adds	r3, #2
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d006      	beq.n	800351a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800350c:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	492c      	ldr	r1, [pc, #176]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
 8003518:	e006      	b.n	8003528 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800351a:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	43db      	mvns	r3, r3
 8003522:	4928      	ldr	r1, [pc, #160]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 8003524:	4013      	ands	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d006      	beq.n	8003542 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003534:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	4922      	ldr	r1, [pc, #136]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
 8003540:	e006      	b.n	8003550 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003542:	4b20      	ldr	r3, [pc, #128]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	43db      	mvns	r3, r3
 800354a:	491e      	ldr	r1, [pc, #120]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 800354c:	4013      	ands	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d006      	beq.n	800356a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	4918      	ldr	r1, [pc, #96]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4313      	orrs	r3, r2
 8003566:	608b      	str	r3, [r1, #8]
 8003568:	e006      	b.n	8003578 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800356a:	4b16      	ldr	r3, [pc, #88]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	43db      	mvns	r3, r3
 8003572:	4914      	ldr	r1, [pc, #80]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 8003574:	4013      	ands	r3, r2
 8003576:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d021      	beq.n	80035c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 8003586:	68da      	ldr	r2, [r3, #12]
 8003588:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_GPIO_Init+0x2d0>)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	60cb      	str	r3, [r1, #12]
 8003590:	e021      	b.n	80035d6 <HAL_GPIO_Init+0x2e2>
 8003592:	bf00      	nop
 8003594:	10320000 	.word	0x10320000
 8003598:	10310000 	.word	0x10310000
 800359c:	10220000 	.word	0x10220000
 80035a0:	10210000 	.word	0x10210000
 80035a4:	10120000 	.word	0x10120000
 80035a8:	10110000 	.word	0x10110000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40010000 	.word	0x40010000
 80035b4:	40010800 	.word	0x40010800
 80035b8:	40010c00 	.word	0x40010c00
 80035bc:	40011000 	.word	0x40011000
 80035c0:	40011400 	.word	0x40011400
 80035c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035c8:	4b0b      	ldr	r3, [pc, #44]	; (80035f8 <HAL_GPIO_Init+0x304>)
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	4909      	ldr	r1, [pc, #36]	; (80035f8 <HAL_GPIO_Init+0x304>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	3301      	adds	r3, #1
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f47f ae8e 	bne.w	8003308 <HAL_GPIO_Init+0x14>
  }
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	372c      	adds	r7, #44	; 0x2c
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	40010400 	.word	0x40010400

080035fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
 8003618:	e001      	b.n	800361e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	807b      	strh	r3, [r7, #2]
 8003636:	4613      	mov	r3, r2
 8003638:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800363a:	787b      	ldrb	r3, [r7, #1]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003640:	887a      	ldrh	r2, [r7, #2]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003646:	e003      	b.n	8003650 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003648:	887b      	ldrh	r3, [r7, #2]
 800364a:	041a      	lsls	r2, r3, #16
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	611a      	str	r2, [r3, #16]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
	...

0800365c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e12b      	b.n	80038c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd ff4c 	bl	8001520 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	; 0x24
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036c0:	f002 faa2 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 80036c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a81      	ldr	r2, [pc, #516]	; (80038d0 <HAL_I2C_Init+0x274>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d807      	bhi.n	80036e0 <HAL_I2C_Init+0x84>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a80      	ldr	r2, [pc, #512]	; (80038d4 <HAL_I2C_Init+0x278>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	bf94      	ite	ls
 80036d8:	2301      	movls	r3, #1
 80036da:	2300      	movhi	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e006      	b.n	80036ee <HAL_I2C_Init+0x92>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a7d      	ldr	r2, [pc, #500]	; (80038d8 <HAL_I2C_Init+0x27c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf94      	ite	ls
 80036e8:	2301      	movls	r3, #1
 80036ea:	2300      	movhi	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0e7      	b.n	80038c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a78      	ldr	r2, [pc, #480]	; (80038dc <HAL_I2C_Init+0x280>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0c9b      	lsrs	r3, r3, #18
 8003700:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a6a      	ldr	r2, [pc, #424]	; (80038d0 <HAL_I2C_Init+0x274>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d802      	bhi.n	8003730 <HAL_I2C_Init+0xd4>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3301      	adds	r3, #1
 800372e:	e009      	b.n	8003744 <HAL_I2C_Init+0xe8>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	4a69      	ldr	r2, [pc, #420]	; (80038e0 <HAL_I2C_Init+0x284>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	3301      	adds	r3, #1
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	430b      	orrs	r3, r1
 800374a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003756:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	495c      	ldr	r1, [pc, #368]	; (80038d0 <HAL_I2C_Init+0x274>)
 8003760:	428b      	cmp	r3, r1
 8003762:	d819      	bhi.n	8003798 <HAL_I2C_Init+0x13c>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1e59      	subs	r1, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003772:	1c59      	adds	r1, r3, #1
 8003774:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003778:	400b      	ands	r3, r1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_I2C_Init+0x138>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1e59      	subs	r1, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fbb1 f3f3 	udiv	r3, r1, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003792:	e051      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003794:	2304      	movs	r3, #4
 8003796:	e04f      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d111      	bne.n	80037c4 <HAL_I2C_Init+0x168>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e58      	subs	r0, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e012      	b.n	80037ea <HAL_I2C_Init+0x18e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e58      	subs	r0, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	0099      	lsls	r1, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x196>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e022      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10e      	bne.n	8003818 <HAL_I2C_Init+0x1bc>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1e58      	subs	r0, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	440b      	add	r3, r1
 8003808:	fbb0 f3f3 	udiv	r3, r0, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003816:	e00f      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e58      	subs	r0, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	0099      	lsls	r1, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	fbb0 f3f3 	udiv	r3, r0, r3
 800382e:	3301      	adds	r3, #1
 8003830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	6809      	ldr	r1, [r1, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003866:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6911      	ldr	r1, [r2, #16]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68d2      	ldr	r2, [r2, #12]
 8003872:	4311      	orrs	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	000186a0 	.word	0x000186a0
 80038d4:	001e847f 	.word	0x001e847f
 80038d8:	003d08ff 	.word	0x003d08ff
 80038dc:	431bde83 	.word	0x431bde83
 80038e0:	10624dd3 	.word	0x10624dd3

080038e4 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	4613      	mov	r3, r2
 80038f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003900:	2b28      	cmp	r3, #40	; 0x28
 8003902:	d15b      	bne.n	80039bc <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d002      	beq.n	8003910 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800390a:	88fb      	ldrh	r3, [r7, #6]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e054      	b.n	80039be <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800391e:	2302      	movs	r3, #2
 8003920:	e04d      	b.n	80039be <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d007      	beq.n	8003948 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2229      	movs	r2, #41	; 0x29
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80039b6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039e4:	2b28      	cmp	r3, #40	; 0x28
 80039e6:	d15b      	bne.n	8003aa0 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e054      	b.n	8003aa2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e04d      	b.n	8003aa2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d007      	beq.n	8003a2c <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	222a      	movs	r2, #42	; 0x2a
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	88fa      	ldrh	r2, [r7, #6]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003a9a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e000      	b.n	8003aa2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d124      	bne.n	8003b0a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2228      	movs	r2, #40	; 0x28
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d007      	beq.n	8003ae6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003af4:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003b04:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e000      	b.n	8003b0c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
  }
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b088      	sub	sp, #32
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d003      	beq.n	8003b4e <HAL_I2C_EV_IRQHandler+0x38>
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	f040 80c1 	bne.w	8003cd0 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10d      	bne.n	8003b84 <HAL_I2C_EV_IRQHandler+0x6e>
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b6e:	d003      	beq.n	8003b78 <HAL_I2C_EV_IRQHandler+0x62>
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b76:	d101      	bne.n	8003b7c <HAL_I2C_EV_IRQHandler+0x66>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_I2C_EV_IRQHandler+0x68>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	f000 8132 	beq.w	8003de8 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00c      	beq.n	8003ba8 <HAL_I2C_EV_IRQHandler+0x92>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	0a5b      	lsrs	r3, r3, #9
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f001 fc46 	bl	800542c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fd48 	bl	8004636 <I2C_Master_SB>
 8003ba6:	e092      	b.n	8003cce <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	08db      	lsrs	r3, r3, #3
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <HAL_I2C_EV_IRQHandler+0xb2>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	0a5b      	lsrs	r3, r3, #9
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fdbd 	bl	8004740 <I2C_Master_ADD10>
 8003bc6:	e082      	b.n	8003cce <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <HAL_I2C_EV_IRQHandler+0xd2>
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	0a5b      	lsrs	r3, r3, #9
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fdd6 	bl	8004792 <I2C_Master_ADDR>
 8003be6:	e072      	b.n	8003cce <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d03b      	beq.n	8003c6c <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c02:	f000 80f3 	beq.w	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	09db      	lsrs	r3, r3, #7
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00f      	beq.n	8003c32 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	0a9b      	lsrs	r3, r3, #10
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	089b      	lsrs	r3, r3, #2
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d103      	bne.n	8003c32 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f9c2 	bl	8003fb4 <I2C_MasterTransmit_TXE>
 8003c30:	e04d      	b.n	8003cce <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	089b      	lsrs	r3, r3, #2
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80d6 	beq.w	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	0a5b      	lsrs	r3, r3, #9
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80cf 	beq.w	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c4e:	7bbb      	ldrb	r3, [r7, #14]
 8003c50:	2b21      	cmp	r3, #33	; 0x21
 8003c52:	d103      	bne.n	8003c5c <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fa49 	bl	80040ec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c5a:	e0c7      	b.n	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	f040 80c4 	bne.w	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fab7 	bl	80041d8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c6a:	e0bf      	b.n	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c7a:	f000 80b7 	beq.w	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00f      	beq.n	8003caa <HAL_I2C_EV_IRQHandler+0x194>
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	0a9b      	lsrs	r3, r3, #10
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <HAL_I2C_EV_IRQHandler+0x194>
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fb2c 	bl	8004300 <I2C_MasterReceive_RXNE>
 8003ca8:	e011      	b.n	8003cce <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	089b      	lsrs	r3, r3, #2
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 809a 	beq.w	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	0a5b      	lsrs	r3, r3, #9
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8093 	beq.w	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fbcb 	bl	8004462 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ccc:	e08e      	b.n	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cce:	e08d      	b.n	8003dec <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d004      	beq.n	8003ce2 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	e007      	b.n	8003cf2 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d012      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x20e>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	0a5b      	lsrs	r3, r3, #9
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00c      	beq.n	8003d24 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d1a:	69b9      	ldr	r1, [r7, #24]
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 ff8f 	bl	8004c40 <I2C_Slave_ADDR>
 8003d22:	e066      	b.n	8003df2 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <HAL_I2C_EV_IRQHandler+0x22e>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	0a5b      	lsrs	r3, r3, #9
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 ffc9 	bl	8004cd4 <I2C_Slave_STOPF>
 8003d42:	e056      	b.n	8003df2 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d44:	7bbb      	ldrb	r3, [r7, #14]
 8003d46:	2b21      	cmp	r3, #33	; 0x21
 8003d48:	d002      	beq.n	8003d50 <HAL_I2C_EV_IRQHandler+0x23a>
 8003d4a:	7bbb      	ldrb	r3, [r7, #14]
 8003d4c:	2b29      	cmp	r3, #41	; 0x29
 8003d4e:	d125      	bne.n	8003d9c <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	09db      	lsrs	r3, r3, #7
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00f      	beq.n	8003d7c <HAL_I2C_EV_IRQHandler+0x266>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	0a9b      	lsrs	r3, r3, #10
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <HAL_I2C_EV_IRQHandler+0x266>
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	089b      	lsrs	r3, r3, #2
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fea7 	bl	8004ac8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d7a:	e039      	b.n	8003df0 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d033      	beq.n	8003df0 <HAL_I2C_EV_IRQHandler+0x2da>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	0a5b      	lsrs	r3, r3, #9
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d02d      	beq.n	8003df0 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fed4 	bl	8004b42 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d9a:	e029      	b.n	8003df0 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	099b      	lsrs	r3, r3, #6
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00f      	beq.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	0a9b      	lsrs	r3, r3, #10
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 fede 	bl	8004b82 <I2C_SlaveReceive_RXNE>
 8003dc6:	e014      	b.n	8003df2 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00e      	beq.n	8003df2 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	0a5b      	lsrs	r3, r3, #9
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 ff0c 	bl	8004bfe <I2C_SlaveReceive_BTF>
 8003de6:	e004      	b.n	8003df2 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003de8:	bf00      	nop
 8003dea:	e002      	b.n	8003df2 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003df0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e1a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	0a1b      	lsrs	r3, r3, #8
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d016      	beq.n	8003e56 <HAL_I2C_ER_IRQHandler+0x5e>
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e44:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e54:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	0a5b      	lsrs	r3, r3, #9
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00e      	beq.n	8003e80 <HAL_I2C_ER_IRQHandler+0x88>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	0a1b      	lsrs	r3, r3, #8
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003e7e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	0a9b      	lsrs	r3, r3, #10
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d03f      	beq.n	8003f0c <HAL_I2C_ER_IRQHandler+0x114>
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	0a1b      	lsrs	r3, r3, #8
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d039      	beq.n	8003f0c <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8003e98:	7efb      	ldrb	r3, [r7, #27]
 8003e9a:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003eb2:	7ebb      	ldrb	r3, [r7, #26]
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d112      	bne.n	8003ede <HAL_I2C_ER_IRQHandler+0xe6>
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10f      	bne.n	8003ede <HAL_I2C_ER_IRQHandler+0xe6>
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b21      	cmp	r3, #33	; 0x21
 8003ec2:	d008      	beq.n	8003ed6 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	2b29      	cmp	r3, #41	; 0x29
 8003ec8:	d005      	beq.n	8003ed6 <HAL_I2C_ER_IRQHandler+0xde>
 8003eca:	7cfb      	ldrb	r3, [r7, #19]
 8003ecc:	2b28      	cmp	r3, #40	; 0x28
 8003ece:	d106      	bne.n	8003ede <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b21      	cmp	r3, #33	; 0x21
 8003ed4:	d103      	bne.n	8003ede <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f001 f82c 	bl	8004f34 <I2C_Slave_AF>
 8003edc:	e016      	b.n	8003f0c <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ee6:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f043 0304 	orr.w	r3, r3, #4
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ef0:	7efb      	ldrb	r3, [r7, #27]
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d002      	beq.n	8003efc <HAL_I2C_ER_IRQHandler+0x104>
 8003ef6:	7efb      	ldrb	r3, [r7, #27]
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d107      	bne.n	8003f0c <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	0adb      	lsrs	r3, r3, #11
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00e      	beq.n	8003f36 <HAL_I2C_ER_IRQHandler+0x13e>
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d008      	beq.n	8003f36 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	f043 0308 	orr.w	r3, r3, #8
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f34:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f001 f863 	bl	8005014 <I2C_ITError>
  }
}
 8003f4e:	bf00      	nop
 8003f50:	3728      	adds	r7, #40	; 0x28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr

08003f7a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d150      	bne.n	800407c <I2C_MasterTransmit_TXE+0xc8>
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	2b21      	cmp	r3, #33	; 0x21
 8003fde:	d14d      	bne.n	800407c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d01d      	beq.n	8004022 <I2C_MasterTransmit_TXE+0x6e>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d01a      	beq.n	8004022 <I2C_MasterTransmit_TXE+0x6e>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ff2:	d016      	beq.n	8004022 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004002:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2211      	movs	r2, #17
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff ff9b 	bl	8003f56 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004020:	e060      	b.n	80040e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004030:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004040:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d107      	bne.n	800406c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ff88 	bl	8003f7a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800406a:	e03b      	b.n	80040e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ff6e 	bl	8003f56 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800407a:	e033      	b.n	80040e4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	2b21      	cmp	r3, #33	; 0x21
 8004080:	d005      	beq.n	800408e <I2C_MasterTransmit_TXE+0xda>
 8004082:	7bbb      	ldrb	r3, [r7, #14]
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d12d      	bne.n	80040e4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b22      	cmp	r3, #34	; 0x22
 800408c:	d12a      	bne.n	80040e4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d108      	bne.n	80040aa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80040a8:	e01c      	b.n	80040e4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b40      	cmp	r3, #64	; 0x40
 80040b4:	d103      	bne.n	80040be <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f88e 	bl	80041d8 <I2C_MemoryTransmit_TXE_BTF>
}
 80040bc:	e012      	b.n	80040e4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	781a      	ldrb	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040e2:	e7ff      	b.n	80040e4 <I2C_MasterTransmit_TXE+0x130>
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b21      	cmp	r3, #33	; 0x21
 8004104:	d164      	bne.n	80041d0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d012      	beq.n	8004136 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004134:	e04c      	b.n	80041d0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b08      	cmp	r3, #8
 800413a:	d01d      	beq.n	8004178 <I2C_MasterTransmit_BTF+0x8c>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b20      	cmp	r3, #32
 8004140:	d01a      	beq.n	8004178 <I2C_MasterTransmit_BTF+0x8c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004148:	d016      	beq.n	8004178 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004158:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2211      	movs	r2, #17
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fef0 	bl	8003f56 <HAL_I2C_MasterTxCpltCallback>
}
 8004176:	e02b      	b.n	80041d0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004186:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004196:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b40      	cmp	r3, #64	; 0x40
 80041b0:	d107      	bne.n	80041c2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fedd 	bl	8003f7a <HAL_I2C_MemTxCpltCallback>
}
 80041c0:	e006      	b.n	80041d0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fec3 	bl	8003f56 <HAL_I2C_MasterTxCpltCallback>
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11d      	bne.n	800422c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d10b      	bne.n	8004210 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800420e:	e073      	b.n	80042f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004214:	b29b      	uxth	r3, r3
 8004216:	121b      	asrs	r3, r3, #8
 8004218:	b2da      	uxtb	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	651a      	str	r2, [r3, #80]	; 0x50
}
 800422a:	e065      	b.n	80042f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004230:	2b01      	cmp	r3, #1
 8004232:	d10b      	bne.n	800424c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004238:	b2da      	uxtb	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	651a      	str	r2, [r3, #80]	; 0x50
}
 800424a:	e055      	b.n	80042f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	2b02      	cmp	r3, #2
 8004252:	d151      	bne.n	80042f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b22      	cmp	r3, #34	; 0x22
 8004258:	d10d      	bne.n	8004276 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004268:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004274:	e040      	b.n	80042f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004280:	7bfb      	ldrb	r3, [r7, #15]
 8004282:	2b21      	cmp	r3, #33	; 0x21
 8004284:	d112      	bne.n	80042ac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042aa:	e025      	b.n	80042f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d120      	bne.n	80042f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b21      	cmp	r3, #33	; 0x21
 80042ba:	d11d      	bne.n	80042f8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685a      	ldr	r2, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042ca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff fe41 	bl	8003f7a <HAL_I2C_MemTxCpltCallback>
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b22      	cmp	r3, #34	; 0x22
 8004312:	f040 80a2 	bne.w	800445a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d921      	bls.n	8004368 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b03      	cmp	r3, #3
 8004352:	f040 8082 	bne.w	800445a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004364:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004366:	e078      	b.n	800445a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	2b02      	cmp	r3, #2
 800436e:	d074      	beq.n	800445a <I2C_MasterReceive_RXNE+0x15a>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d002      	beq.n	800437c <I2C_MasterReceive_RXNE+0x7c>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d16e      	bne.n	800445a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f001 f823 	bl	80053c8 <I2C_WaitOnSTOPRequestThroughIT>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d142      	bne.n	800440e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004396:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043a6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b40      	cmp	r3, #64	; 0x40
 80043e0:	d10a      	bne.n	80043f8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fdcb 	bl	8003f8c <HAL_I2C_MemRxCpltCallback>
}
 80043f6:	e030      	b.n	800445a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2212      	movs	r2, #18
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff fdae 	bl	8003f68 <HAL_I2C_MasterRxCpltCallback>
}
 800440c:	e025      	b.n	800445a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800441c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7fd f979 	bl	800174c <HAL_I2C_ErrorCallback>
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b04      	cmp	r3, #4
 8004478:	d11b      	bne.n	80044b2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80044b0:	e0bd      	b.n	800462e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d129      	bne.n	8004510 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ca:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d00a      	beq.n	80044e8 <I2C_MasterReceive_BTF+0x86>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d007      	beq.n	80044e8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691a      	ldr	r2, [r3, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800450e:	e08e      	b.n	800462e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d176      	bne.n	8004608 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d002      	beq.n	8004526 <I2C_MasterReceive_BTF+0xc4>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b10      	cmp	r3, #16
 8004524:	d108      	bne.n	8004538 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	e019      	b.n	800456c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d002      	beq.n	8004544 <I2C_MasterReceive_BTF+0xe2>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d108      	bne.n	8004556 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e00a      	b.n	800456c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b10      	cmp	r3, #16
 800455a:	d007      	beq.n	800456c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29b      	uxth	r3, r3
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045c6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d10a      	bne.n	80045f2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fcce 	bl	8003f8c <HAL_I2C_MemRxCpltCallback>
}
 80045f0:	e01d      	b.n	800462e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2212      	movs	r2, #18
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff fcb1 	bl	8003f68 <HAL_I2C_MasterRxCpltCallback>
}
 8004606:	e012      	b.n	800462e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d117      	bne.n	800467a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	b2db      	uxtb	r3, r3
 8004658:	461a      	mov	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004662:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004664:	e067      	b.n	8004736 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	b2da      	uxtb	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]
}
 8004678:	e05d      	b.n	8004736 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004682:	d133      	bne.n	80046ec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b21      	cmp	r3, #33	; 0x21
 800468e:	d109      	bne.n	80046a4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004694:	b2db      	uxtb	r3, r3
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046a0:	611a      	str	r2, [r3, #16]
 80046a2:	e008      	b.n	80046b6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <I2C_Master_SB+0x92>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d108      	bne.n	80046da <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d032      	beq.n	8004736 <I2C_Master_SB+0x100>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02d      	beq.n	8004736 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046e8:	605a      	str	r2, [r3, #4]
}
 80046ea:	e024      	b.n	8004736 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10e      	bne.n	8004712 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	11db      	asrs	r3, r3, #7
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f003 0306 	and.w	r3, r3, #6
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f063 030f 	orn	r3, r3, #15
 8004708:	b2da      	uxtb	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]
}
 8004710:	e011      	b.n	8004736 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	2b01      	cmp	r3, #1
 8004718:	d10d      	bne.n	8004736 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	b29b      	uxth	r3, r3
 8004720:	11db      	asrs	r3, r3, #7
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 0306 	and.w	r3, r3, #6
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f063 030e 	orn	r3, r3, #14
 800472e:	b2da      	uxtb	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	611a      	str	r2, [r3, #16]
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	b2da      	uxtb	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <I2C_Master_ADD10+0x26>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d108      	bne.n	8004778 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <I2C_Master_ADD10+0x48>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004786:	605a      	str	r2, [r3, #4]
  }
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004792:	b480      	push	{r7}
 8004794:	b091      	sub	sp, #68	; 0x44
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b22      	cmp	r3, #34	; 0x22
 80047ba:	f040 8174 	bne.w	8004aa6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10f      	bne.n	80047e6 <I2C_Master_ADDR+0x54>
 80047c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d10b      	bne.n	80047e6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ce:	2300      	movs	r3, #0
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	633b      	str	r3, [r7, #48]	; 0x30
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	633b      	str	r3, [r7, #48]	; 0x30
 80047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e4:	e16b      	b.n	8004abe <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d11d      	bne.n	800482a <I2C_Master_ADDR+0x98>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047f6:	d118      	bne.n	800482a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f8:	2300      	movs	r3, #0
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800481c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	651a      	str	r2, [r3, #80]	; 0x50
 8004828:	e149      	b.n	8004abe <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d113      	bne.n	800485c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004834:	2300      	movs	r3, #0
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e120      	b.n	8004a9e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b01      	cmp	r3, #1
 8004864:	f040 808a 	bne.w	800497c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800486a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800486e:	d137      	bne.n	80048e0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800488a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488e:	d113      	bne.n	80048b8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a0:	2300      	movs	r3, #0
 80048a2:	627b      	str	r3, [r7, #36]	; 0x24
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	e0f2      	b.n	8004a9e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b8:	2300      	movs	r3, #0
 80048ba:	623b      	str	r3, [r7, #32]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	623b      	str	r3, [r7, #32]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	623b      	str	r3, [r7, #32]
 80048cc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	e0de      	b.n	8004a9e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d02e      	beq.n	8004944 <I2C_Master_ADDR+0x1b2>
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d02b      	beq.n	8004944 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80048ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ee:	2b12      	cmp	r3, #18
 80048f0:	d102      	bne.n	80048f8 <I2C_Master_ADDR+0x166>
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d125      	bne.n	8004944 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d00e      	beq.n	800491c <I2C_Master_ADDR+0x18a>
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	2b02      	cmp	r3, #2
 8004902:	d00b      	beq.n	800491c <I2C_Master_ADDR+0x18a>
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	2b10      	cmp	r3, #16
 8004908:	d008      	beq.n	800491c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e007      	b.n	800492c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800492a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492c:	2300      	movs	r3, #0
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	e0ac      	b.n	8004a9e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004952:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	61bb      	str	r3, [r7, #24]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e090      	b.n	8004a9e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004980:	b29b      	uxth	r3, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d158      	bne.n	8004a38 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004988:	2b04      	cmp	r3, #4
 800498a:	d021      	beq.n	80049d0 <I2C_Master_ADDR+0x23e>
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	2b02      	cmp	r3, #2
 8004990:	d01e      	beq.n	80049d0 <I2C_Master_ADDR+0x23e>
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	2b10      	cmp	r3, #16
 8004996:	d01b      	beq.n	80049d0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	e012      	b.n	80049f6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049de:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a04:	d14b      	bne.n	8004a9e <I2C_Master_ADDR+0x30c>
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a0c:	d00b      	beq.n	8004a26 <I2C_Master_ADDR+0x294>
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d008      	beq.n	8004a26 <I2C_Master_ADDR+0x294>
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d005      	beq.n	8004a26 <I2C_Master_ADDR+0x294>
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d002      	beq.n	8004a26 <I2C_Master_ADDR+0x294>
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d13b      	bne.n	8004a9e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	e032      	b.n	8004a9e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a46:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a56:	d117      	bne.n	8004a88 <I2C_Master_ADDR+0x2f6>
 8004a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a5e:	d00b      	beq.n	8004a78 <I2C_Master_ADDR+0x2e6>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d008      	beq.n	8004a78 <I2C_Master_ADDR+0x2e6>
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d005      	beq.n	8004a78 <I2C_Master_ADDR+0x2e6>
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d002      	beq.n	8004a78 <I2C_Master_ADDR+0x2e6>
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d107      	bne.n	8004a88 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a86:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004aa4:	e00b      	b.n	8004abe <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]
}
 8004abc:	e7ff      	b.n	8004abe <I2C_Master_ADDR+0x32c>
 8004abe:	bf00      	nop
 8004ac0:	3744      	adds	r7, #68	; 0x44
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02b      	beq.n	8004b3a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	781a      	ldrb	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d114      	bne.n	8004b3a <I2C_SlaveTransmit_TXE+0x72>
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	2b29      	cmp	r3, #41	; 0x29
 8004b14:	d111      	bne.n	8004b3a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b24:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2221      	movs	r2, #33	; 0x21
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2228      	movs	r2, #40	; 0x28
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7fc fddf 	bl	80016f8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d011      	beq.n	8004b78 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr

08004b82 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d02c      	beq.n	8004bf6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d114      	bne.n	8004bf6 <I2C_SlaveReceive_RXNE+0x74>
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd0:	d111      	bne.n	8004bf6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2222      	movs	r2, #34	; 0x22
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2228      	movs	r2, #40	; 0x28
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fc fd43 	bl	800167c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c5a:	2b28      	cmp	r3, #40	; 0x28
 8004c5c:	d127      	bne.n	8004cae <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	089b      	lsrs	r3, r3, #2
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	09db      	lsrs	r3, r3, #7
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	81bb      	strh	r3, [r7, #12]
 8004c90:	e002      	b.n	8004c98 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004ca0:	89ba      	ldrh	r2, [r7, #12]
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc fcaa 	bl	8001600 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004cac:	e00e      	b.n	8004ccc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cf2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d20:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d30:	d172      	bne.n	8004e18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b22      	cmp	r3, #34	; 0x22
 8004d36:	d002      	beq.n	8004d3e <I2C_Slave_STOPF+0x6a>
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d3c:	d135      	bne.n	8004daa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f043 0204 	orr.w	r2, r3, #4
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe f8a6 	bl	8002ec8 <HAL_DMA_GetState>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d049      	beq.n	8004e16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	4a69      	ldr	r2, [pc, #420]	; (8004f2c <I2C_Slave_STOPF+0x258>)
 8004d88:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe f824 	bl	8002ddc <HAL_DMA_Abort_IT>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d03d      	beq.n	8004e16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004da4:	4610      	mov	r0, r2
 8004da6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004da8:	e035      	b.n	8004e16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0204 	orr.w	r2, r3, #4
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe f870 	bl	8002ec8 <HAL_DMA_GetState>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d014      	beq.n	8004e18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	4a4e      	ldr	r2, [pc, #312]	; (8004f2c <I2C_Slave_STOPF+0x258>)
 8004df4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fd ffee 	bl	8002ddc <HAL_DMA_Abort_IT>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e10:	4610      	mov	r0, r2
 8004e12:	4798      	blx	r3
 8004e14:	e000      	b.n	8004e18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d03e      	beq.n	8004ea0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d112      	bne.n	8004e56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d112      	bne.n	8004e8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f043 0204 	orr.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f8b3 	bl	8005014 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004eae:	e039      	b.n	8004f24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004eb4:	d109      	bne.n	8004eca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2228      	movs	r2, #40	; 0x28
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7fc fbd9 	bl	800167c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b28      	cmp	r3, #40	; 0x28
 8004ed4:	d111      	bne.n	8004efa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <I2C_Slave_STOPF+0x25c>)
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fc fb74 	bl	80015e0 <HAL_I2C_ListenCpltCallback>
}
 8004ef8:	e014      	b.n	8004f24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	2b22      	cmp	r3, #34	; 0x22
 8004f00:	d002      	beq.n	8004f08 <I2C_Slave_STOPF+0x234>
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b22      	cmp	r3, #34	; 0x22
 8004f06:	d10d      	bne.n	8004f24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fc fbac 	bl	800167c <HAL_I2C_SlaveRxCpltCallback>
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	08005279 	.word	0x08005279
 8004f30:	ffff0000 	.word	0xffff0000

08004f34 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f42:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d002      	beq.n	8004f56 <I2C_Slave_AF+0x22>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d129      	bne.n	8004faa <I2C_Slave_AF+0x76>
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	2b28      	cmp	r3, #40	; 0x28
 8004f5a:	d126      	bne.n	8004faa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a2c      	ldr	r2, [pc, #176]	; (8005010 <I2C_Slave_AF+0xdc>)
 8004f60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f70:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f7a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc fb1c 	bl	80015e0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004fa8:	e02e      	b.n	8005008 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	2b21      	cmp	r3, #33	; 0x21
 8004fae:	d126      	bne.n	8004ffe <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a17      	ldr	r2, [pc, #92]	; (8005010 <I2C_Slave_AF+0xdc>)
 8004fb4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2221      	movs	r2, #33	; 0x21
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fda:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fe4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fc fb7e 	bl	80016f8 <HAL_I2C_SlaveTxCpltCallback>
}
 8004ffc:	e004      	b.n	8005008 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005006:	615a      	str	r2, [r3, #20]
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	ffff0000 	.word	0xffff0000

08005014 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005022:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800502a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800502c:	7bbb      	ldrb	r3, [r7, #14]
 800502e:	2b10      	cmp	r3, #16
 8005030:	d002      	beq.n	8005038 <I2C_ITError+0x24>
 8005032:	7bbb      	ldrb	r3, [r7, #14]
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d10a      	bne.n	800504e <I2C_ITError+0x3a>
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b22      	cmp	r3, #34	; 0x22
 800503c:	d107      	bne.n	800504e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800504c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005054:	2b28      	cmp	r3, #40	; 0x28
 8005056:	d107      	bne.n	8005068 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2228      	movs	r2, #40	; 0x28
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005066:	e015      	b.n	8005094 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005076:	d00a      	beq.n	800508e <I2C_ITError+0x7a>
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b60      	cmp	r3, #96	; 0x60
 800507c:	d007      	beq.n	800508e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a2:	d161      	bne.n	8005168 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050b2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d020      	beq.n	8005102 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c4:	4a6a      	ldr	r2, [pc, #424]	; (8005270 <I2C_ITError+0x25c>)
 80050c6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fd fe85 	bl	8002ddc <HAL_DMA_Abort_IT>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 8089 	beq.w	80051ec <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050fc:	4610      	mov	r0, r2
 80050fe:	4798      	blx	r3
 8005100:	e074      	b.n	80051ec <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	4a5a      	ldr	r2, [pc, #360]	; (8005270 <I2C_ITError+0x25c>)
 8005108:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	4618      	mov	r0, r3
 8005110:	f7fd fe64 	bl	8002ddc <HAL_DMA_Abort_IT>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d068      	beq.n	80051ec <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d10b      	bne.n	8005140 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005162:	4610      	mov	r0, r2
 8005164:	4798      	blx	r3
 8005166:	e041      	b.n	80051ec <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b60      	cmp	r3, #96	; 0x60
 8005172:	d125      	bne.n	80051c0 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518c:	2b40      	cmp	r3, #64	; 0x40
 800518e:	d10b      	bne.n	80051a8 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7fc fb4b 	bl	8001854 <HAL_I2C_AbortCpltCallback>
 80051be:	e015      	b.n	80051ec <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ca:	2b40      	cmp	r3, #64	; 0x40
 80051cc:	d10b      	bne.n	80051e6 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fc fab0 	bl	800174c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10e      	bne.n	800521a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005228:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005230:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d113      	bne.n	8005266 <I2C_ITError+0x252>
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b28      	cmp	r3, #40	; 0x28
 8005242:	d110      	bne.n	8005266 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a0b      	ldr	r2, [pc, #44]	; (8005274 <I2C_ITError+0x260>)
 8005248:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7fc f9bd 	bl	80015e0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005266:	bf00      	nop
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	08005279 	.word	0x08005279
 8005274:	ffff0000 	.word	0xffff0000

08005278 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005290:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005292:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <I2C_DMAAbort+0x148>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	08db      	lsrs	r3, r3, #3
 8005298:	4a4a      	ldr	r2, [pc, #296]	; (80053c4 <I2C_DMAAbort+0x14c>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	0a1a      	lsrs	r2, r3, #8
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	00da      	lsls	r2, r3, #3
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	f043 0220 	orr.w	r2, r3, #32
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80052be:	e00a      	b.n	80052d6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d4:	d0ea      	beq.n	80052ac <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	2200      	movs	r2, #0
 80052e4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005304:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2200      	movs	r2, #0
 800530a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005318:	2200      	movs	r2, #0
 800531a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	2200      	movs	r2, #0
 800532a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0201 	bic.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b60      	cmp	r3, #96	; 0x60
 8005346:	d10e      	bne.n	8005366 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	2200      	movs	r2, #0
 800535c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	f7fc fa78 	bl	8001854 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005364:	e027      	b.n	80053b6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005366:	7cfb      	ldrb	r3, [r7, #19]
 8005368:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800536c:	2b28      	cmp	r3, #40	; 0x28
 800536e:	d117      	bne.n	80053a0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800538e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2200      	movs	r2, #0
 8005394:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2228      	movs	r2, #40	; 0x28
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800539e:	e007      	b.n	80053b0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80053b0:	6978      	ldr	r0, [r7, #20]
 80053b2:	f7fc f9cb 	bl	800174c <HAL_I2C_ErrorCallback>
}
 80053b6:	bf00      	nop
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000048 	.word	0x20000048
 80053c4:	14f8b589 	.word	0x14f8b589

080053c8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80053d4:	4b13      	ldr	r3, [pc, #76]	; (8005424 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	08db      	lsrs	r3, r3, #3
 80053da:	4a13      	ldr	r2, [pc, #76]	; (8005428 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	0a1a      	lsrs	r2, r3, #8
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d107      	bne.n	8005406 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f043 0220 	orr.w	r2, r3, #32
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e008      	b.n	8005418 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005414:	d0e9      	beq.n	80053ea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	20000048 	.word	0x20000048
 8005428:	14f8b589 	.word	0x14f8b589

0800542c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800543c:	d103      	bne.n	8005446 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005444:	e007      	b.n	8005456 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800544e:	d102      	bne.n	8005456 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2208      	movs	r2, #8
 8005454:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e272      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 8087 	beq.w	800558e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005480:	4b92      	ldr	r3, [pc, #584]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b04      	cmp	r3, #4
 800548a:	d00c      	beq.n	80054a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800548c:	4b8f      	ldr	r3, [pc, #572]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 030c 	and.w	r3, r3, #12
 8005494:	2b08      	cmp	r3, #8
 8005496:	d112      	bne.n	80054be <HAL_RCC_OscConfig+0x5e>
 8005498:	4b8c      	ldr	r3, [pc, #560]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a4:	d10b      	bne.n	80054be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a6:	4b89      	ldr	r3, [pc, #548]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d06c      	beq.n	800558c <HAL_RCC_OscConfig+0x12c>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d168      	bne.n	800558c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e24c      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x76>
 80054c8:	4b80      	ldr	r3, [pc, #512]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a7f      	ldr	r2, [pc, #508]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80054ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e02e      	b.n	8005534 <HAL_RCC_OscConfig+0xd4>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x98>
 80054de:	4b7b      	ldr	r3, [pc, #492]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a7a      	ldr	r2, [pc, #488]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80054e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b78      	ldr	r3, [pc, #480]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a77      	ldr	r2, [pc, #476]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80054f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e01d      	b.n	8005534 <HAL_RCC_OscConfig+0xd4>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005500:	d10c      	bne.n	800551c <HAL_RCC_OscConfig+0xbc>
 8005502:	4b72      	ldr	r3, [pc, #456]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a71      	ldr	r2, [pc, #452]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	4b6f      	ldr	r3, [pc, #444]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a6e      	ldr	r2, [pc, #440]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e00b      	b.n	8005534 <HAL_RCC_OscConfig+0xd4>
 800551c:	4b6b      	ldr	r3, [pc, #428]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a6a      	ldr	r2, [pc, #424]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	4b68      	ldr	r3, [pc, #416]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a67      	ldr	r2, [pc, #412]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 800552e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005532:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d013      	beq.n	8005564 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fd f8e6 	bl	800270c <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005544:	f7fd f8e2 	bl	800270c <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	; 0x64
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e200      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005556:	4b5d      	ldr	r3, [pc, #372]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0xe4>
 8005562:	e014      	b.n	800558e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005564:	f7fd f8d2 	bl	800270c <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800556c:	f7fd f8ce 	bl	800270c <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	; 0x64
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e1ec      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800557e:	4b53      	ldr	r3, [pc, #332]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x10c>
 800558a:	e000      	b.n	800558e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800558c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d063      	beq.n	8005662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800559a:	4b4c      	ldr	r3, [pc, #304]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f003 030c 	and.w	r3, r3, #12
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00b      	beq.n	80055be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80055a6:	4b49      	ldr	r3, [pc, #292]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 030c 	and.w	r3, r3, #12
 80055ae:	2b08      	cmp	r3, #8
 80055b0:	d11c      	bne.n	80055ec <HAL_RCC_OscConfig+0x18c>
 80055b2:	4b46      	ldr	r3, [pc, #280]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d116      	bne.n	80055ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055be:	4b43      	ldr	r3, [pc, #268]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_RCC_OscConfig+0x176>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d001      	beq.n	80055d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e1c0      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d6:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	00db      	lsls	r3, r3, #3
 80055e4:	4939      	ldr	r1, [pc, #228]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ea:	e03a      	b.n	8005662 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d020      	beq.n	8005636 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055f4:	4b36      	ldr	r3, [pc, #216]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fa:	f7fd f887 	bl	800270c <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005602:	f7fd f883 	bl	800270c <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e1a1      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005614:	4b2d      	ldr	r3, [pc, #180]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005620:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	4927      	ldr	r1, [pc, #156]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005630:	4313      	orrs	r3, r2
 8005632:	600b      	str	r3, [r1, #0]
 8005634:	e015      	b.n	8005662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005636:	4b26      	ldr	r3, [pc, #152]	; (80056d0 <HAL_RCC_OscConfig+0x270>)
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7fd f866 	bl	800270c <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005644:	f7fd f862 	bl	800270c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e180      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005656:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d03a      	beq.n	80056e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d019      	beq.n	80056aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005676:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <HAL_RCC_OscConfig+0x274>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567c:	f7fd f846 	bl	800270c <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005684:	f7fd f842 	bl	800270c <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e160      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005696:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <HAL_RCC_OscConfig+0x26c>)
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d0f0      	beq.n	8005684 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80056a2:	2001      	movs	r0, #1
 80056a4:	f000 fac4 	bl	8005c30 <RCC_Delay>
 80056a8:	e01c      	b.n	80056e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056aa:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <HAL_RCC_OscConfig+0x274>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b0:	f7fd f82c 	bl	800270c <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b6:	e00f      	b.n	80056d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056b8:	f7fd f828 	bl	800270c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d908      	bls.n	80056d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e146      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
 80056ca:	bf00      	nop
 80056cc:	40021000 	.word	0x40021000
 80056d0:	42420000 	.word	0x42420000
 80056d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d8:	4b92      	ldr	r3, [pc, #584]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e9      	bne.n	80056b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80a6 	beq.w	800583e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f6:	4b8b      	ldr	r3, [pc, #556]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10d      	bne.n	800571e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	4b88      	ldr	r3, [pc, #544]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	4a87      	ldr	r2, [pc, #540]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 8005708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570c:	61d3      	str	r3, [r2, #28]
 800570e:	4b85      	ldr	r3, [pc, #532]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005716:	60bb      	str	r3, [r7, #8]
 8005718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571a:	2301      	movs	r3, #1
 800571c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800571e:	4b82      	ldr	r3, [pc, #520]	; (8005928 <HAL_RCC_OscConfig+0x4c8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005726:	2b00      	cmp	r3, #0
 8005728:	d118      	bne.n	800575c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572a:	4b7f      	ldr	r3, [pc, #508]	; (8005928 <HAL_RCC_OscConfig+0x4c8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a7e      	ldr	r2, [pc, #504]	; (8005928 <HAL_RCC_OscConfig+0x4c8>)
 8005730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005736:	f7fc ffe9 	bl	800270c <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573e:	f7fc ffe5 	bl	800270c <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b64      	cmp	r3, #100	; 0x64
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e103      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005750:	4b75      	ldr	r3, [pc, #468]	; (8005928 <HAL_RCC_OscConfig+0x4c8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d106      	bne.n	8005772 <HAL_RCC_OscConfig+0x312>
 8005764:	4b6f      	ldr	r3, [pc, #444]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	4a6e      	ldr	r2, [pc, #440]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 800576a:	f043 0301 	orr.w	r3, r3, #1
 800576e:	6213      	str	r3, [r2, #32]
 8005770:	e02d      	b.n	80057ce <HAL_RCC_OscConfig+0x36e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10c      	bne.n	8005794 <HAL_RCC_OscConfig+0x334>
 800577a:	4b6a      	ldr	r3, [pc, #424]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	4a69      	ldr	r2, [pc, #420]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 8005780:	f023 0301 	bic.w	r3, r3, #1
 8005784:	6213      	str	r3, [r2, #32]
 8005786:	4b67      	ldr	r3, [pc, #412]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	4a66      	ldr	r2, [pc, #408]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 800578c:	f023 0304 	bic.w	r3, r3, #4
 8005790:	6213      	str	r3, [r2, #32]
 8005792:	e01c      	b.n	80057ce <HAL_RCC_OscConfig+0x36e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	2b05      	cmp	r3, #5
 800579a:	d10c      	bne.n	80057b6 <HAL_RCC_OscConfig+0x356>
 800579c:	4b61      	ldr	r3, [pc, #388]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	4a60      	ldr	r2, [pc, #384]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80057a2:	f043 0304 	orr.w	r3, r3, #4
 80057a6:	6213      	str	r3, [r2, #32]
 80057a8:	4b5e      	ldr	r3, [pc, #376]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	4a5d      	ldr	r2, [pc, #372]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	6213      	str	r3, [r2, #32]
 80057b4:	e00b      	b.n	80057ce <HAL_RCC_OscConfig+0x36e>
 80057b6:	4b5b      	ldr	r3, [pc, #364]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	4a5a      	ldr	r2, [pc, #360]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80057bc:	f023 0301 	bic.w	r3, r3, #1
 80057c0:	6213      	str	r3, [r2, #32]
 80057c2:	4b58      	ldr	r3, [pc, #352]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	4a57      	ldr	r2, [pc, #348]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80057c8:	f023 0304 	bic.w	r3, r3, #4
 80057cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d015      	beq.n	8005802 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d6:	f7fc ff99 	bl	800270c <HAL_GetTick>
 80057da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057dc:	e00a      	b.n	80057f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057de:	f7fc ff95 	bl	800270c <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e0b1      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f4:	4b4b      	ldr	r3, [pc, #300]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ee      	beq.n	80057de <HAL_RCC_OscConfig+0x37e>
 8005800:	e014      	b.n	800582c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005802:	f7fc ff83 	bl	800270c <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005808:	e00a      	b.n	8005820 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580a:	f7fc ff7f 	bl	800270c <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	f241 3288 	movw	r2, #5000	; 0x1388
 8005818:	4293      	cmp	r3, r2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e09b      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005820:	4b40      	ldr	r3, [pc, #256]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1ee      	bne.n	800580a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800582c:	7dfb      	ldrb	r3, [r7, #23]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d105      	bne.n	800583e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005832:	4b3c      	ldr	r3, [pc, #240]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	4a3b      	ldr	r2, [pc, #236]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 8005838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800583c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8087 	beq.w	8005956 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005848:	4b36      	ldr	r3, [pc, #216]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f003 030c 	and.w	r3, r3, #12
 8005850:	2b08      	cmp	r3, #8
 8005852:	d061      	beq.n	8005918 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	2b02      	cmp	r3, #2
 800585a:	d146      	bne.n	80058ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585c:	4b33      	ldr	r3, [pc, #204]	; (800592c <HAL_RCC_OscConfig+0x4cc>)
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005862:	f7fc ff53 	bl	800270c <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800586a:	f7fc ff4f 	bl	800270c <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e06d      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587c:	4b29      	ldr	r3, [pc, #164]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f0      	bne.n	800586a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005890:	d108      	bne.n	80058a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005892:	4b24      	ldr	r3, [pc, #144]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	4921      	ldr	r1, [pc, #132]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058a4:	4b1f      	ldr	r3, [pc, #124]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a19      	ldr	r1, [r3, #32]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	430b      	orrs	r3, r1
 80058b6:	491b      	ldr	r1, [pc, #108]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058bc:	4b1b      	ldr	r3, [pc, #108]	; (800592c <HAL_RCC_OscConfig+0x4cc>)
 80058be:	2201      	movs	r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c2:	f7fc ff23 	bl	800270c <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058ca:	f7fc ff1f 	bl	800270c <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e03d      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058dc:	4b11      	ldr	r3, [pc, #68]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f0      	beq.n	80058ca <HAL_RCC_OscConfig+0x46a>
 80058e8:	e035      	b.n	8005956 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ea:	4b10      	ldr	r3, [pc, #64]	; (800592c <HAL_RCC_OscConfig+0x4cc>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f0:	f7fc ff0c 	bl	800270c <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058f6:	e008      	b.n	800590a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f8:	f7fc ff08 	bl	800270c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d901      	bls.n	800590a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e026      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800590a:	4b06      	ldr	r3, [pc, #24]	; (8005924 <HAL_RCC_OscConfig+0x4c4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f0      	bne.n	80058f8 <HAL_RCC_OscConfig+0x498>
 8005916:	e01e      	b.n	8005956 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d107      	bne.n	8005930 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e019      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
 8005924:	40021000 	.word	0x40021000
 8005928:	40007000 	.word	0x40007000
 800592c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <HAL_RCC_OscConfig+0x500>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	429a      	cmp	r2, r3
 8005942:	d106      	bne.n	8005952 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594e:	429a      	cmp	r2, r3
 8005950:	d001      	beq.n	8005956 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	40021000 	.word	0x40021000

08005964 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0d0      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005978:	4b6a      	ldr	r3, [pc, #424]	; (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d910      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b67      	ldr	r3, [pc, #412]	; (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 0207 	bic.w	r2, r3, #7
 800598e:	4965      	ldr	r1, [pc, #404]	; (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	4313      	orrs	r3, r2
 8005994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b63      	ldr	r3, [pc, #396]	; (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0b8      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d020      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c0:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	4a58      	ldr	r2, [pc, #352]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 80059c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059d8:	4b53      	ldr	r3, [pc, #332]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	4a52      	ldr	r2, [pc, #328]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 80059de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80059e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059e4:	4b50      	ldr	r3, [pc, #320]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	494d      	ldr	r1, [pc, #308]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d040      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a0a:	4b47      	ldr	r3, [pc, #284]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d115      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e07f      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d107      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a22:	4b41      	ldr	r3, [pc, #260]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e073      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a32:	4b3d      	ldr	r3, [pc, #244]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e06b      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a42:	4b39      	ldr	r3, [pc, #228]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f023 0203 	bic.w	r2, r3, #3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	4936      	ldr	r1, [pc, #216]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a54:	f7fc fe5a 	bl	800270c <HAL_GetTick>
 8005a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a5c:	f7fc fe56 	bl	800270c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e053      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	4b2d      	ldr	r3, [pc, #180]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f003 020c 	and.w	r2, r3, #12
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d1eb      	bne.n	8005a5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a84:	4b27      	ldr	r3, [pc, #156]	; (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d210      	bcs.n	8005ab4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b24      	ldr	r3, [pc, #144]	; (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 0207 	bic.w	r2, r3, #7
 8005a9a:	4922      	ldr	r1, [pc, #136]	; (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa2:	4b20      	ldr	r3, [pc, #128]	; (8005b24 <HAL_RCC_ClockConfig+0x1c0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e032      	b.n	8005b1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d008      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ac0:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4916      	ldr	r1, [pc, #88]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ade:	4b12      	ldr	r3, [pc, #72]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	490e      	ldr	r1, [pc, #56]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005af2:	f000 f821 	bl	8005b38 <HAL_RCC_GetSysClockFreq>
 8005af6:	4602      	mov	r2, r0
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <HAL_RCC_ClockConfig+0x1c4>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	490a      	ldr	r1, [pc, #40]	; (8005b2c <HAL_RCC_ClockConfig+0x1c8>)
 8005b04:	5ccb      	ldrb	r3, [r1, r3]
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <HAL_RCC_ClockConfig+0x1cc>)
 8005b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <HAL_RCC_ClockConfig+0x1d0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fc fdb8 	bl	8002688 <HAL_InitTick>

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40022000 	.word	0x40022000
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	08007034 	.word	0x08007034
 8005b30:	20000048 	.word	0x20000048
 8005b34:	2000004c 	.word	0x2000004c

08005b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b38:	b490      	push	{r4, r7}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b3e:	4b29      	ldr	r3, [pc, #164]	; (8005be4 <HAL_RCC_GetSysClockFreq+0xac>)
 8005b40:	1d3c      	adds	r4, r7, #4
 8005b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b48:	f240 2301 	movw	r3, #513	; 0x201
 8005b4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
 8005b52:	2300      	movs	r3, #0
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	2300      	movs	r3, #0
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b62:	4b21      	ldr	r3, [pc, #132]	; (8005be8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d002      	beq.n	8005b78 <HAL_RCC_GetSysClockFreq+0x40>
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d003      	beq.n	8005b7e <HAL_RCC_GetSysClockFreq+0x46>
 8005b76:	e02b      	b.n	8005bd0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b78:	4b1c      	ldr	r3, [pc, #112]	; (8005bec <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b7a:	623b      	str	r3, [r7, #32]
      break;
 8005b7c:	e02b      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	0c9b      	lsrs	r3, r3, #18
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	3328      	adds	r3, #40	; 0x28
 8005b88:	443b      	add	r3, r7
 8005b8a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005b8e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d012      	beq.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b9a:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	0c5b      	lsrs	r3, r3, #17
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	3328      	adds	r3, #40	; 0x28
 8005ba6:	443b      	add	r3, r7
 8005ba8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005bac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	4a0e      	ldr	r2, [pc, #56]	; (8005bec <HAL_RCC_GetSysClockFreq+0xb4>)
 8005bb2:	fb03 f202 	mul.w	r2, r3, r2
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bbe:	e004      	b.n	8005bca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bc4:	fb02 f303 	mul.w	r3, r2, r3
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	623b      	str	r3, [r7, #32]
      break;
 8005bce:	e002      	b.n	8005bd6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <HAL_RCC_GetSysClockFreq+0xb4>)
 8005bd2:	623b      	str	r3, [r7, #32]
      break;
 8005bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3728      	adds	r7, #40	; 0x28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc90      	pop	{r4, r7}
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	08007024 	.word	0x08007024
 8005be8:	40021000 	.word	0x40021000
 8005bec:	007a1200 	.word	0x007a1200
 8005bf0:	003d0900 	.word	0x003d0900

08005bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr
 8005c04:	20000048 	.word	0x20000048

08005c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c0c:	f7ff fff2 	bl	8005bf4 <HAL_RCC_GetHCLKFreq>
 8005c10:	4602      	mov	r2, r0
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	0a1b      	lsrs	r3, r3, #8
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	4903      	ldr	r1, [pc, #12]	; (8005c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c1e:	5ccb      	ldrb	r3, [r1, r3]
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	08007044 	.word	0x08007044

08005c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c38:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <RCC_Delay+0x34>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a0a      	ldr	r2, [pc, #40]	; (8005c68 <RCC_Delay+0x38>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	0a5b      	lsrs	r3, r3, #9
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
 8005c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c4c:	bf00      	nop
  }
  while (Delay --);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1e5a      	subs	r2, r3, #1
 8005c52:	60fa      	str	r2, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f9      	bne.n	8005c4c <RCC_Delay+0x1c>
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr
 8005c64:	20000048 	.word	0x20000048
 8005c68:	10624dd3 	.word	0x10624dd3

08005c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	613b      	str	r3, [r7, #16]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d07d      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8c:	4b4f      	ldr	r3, [pc, #316]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10d      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c98:	4b4c      	ldr	r3, [pc, #304]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	4a4b      	ldr	r2, [pc, #300]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	61d3      	str	r3, [r2, #28]
 8005ca4:	4b49      	ldr	r3, [pc, #292]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cac:	60bb      	str	r3, [r7, #8]
 8005cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb4:	4b46      	ldr	r3, [pc, #280]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d118      	bne.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc0:	4b43      	ldr	r3, [pc, #268]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a42      	ldr	r2, [pc, #264]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ccc:	f7fc fd1e 	bl	800270c <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd4:	f7fc fd1a 	bl	800270c <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b64      	cmp	r3, #100	; 0x64
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e06d      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce6:	4b3a      	ldr	r3, [pc, #232]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0f0      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cf2:	4b36      	ldr	r3, [pc, #216]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d02e      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d027      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d10:	4b2e      	ldr	r3, [pc, #184]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d12:	6a1b      	ldr	r3, [r3, #32]
 8005d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d1a:	4b2e      	ldr	r3, [pc, #184]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d20:	4b2c      	ldr	r3, [pc, #176]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d26:	4a29      	ldr	r2, [pc, #164]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d014      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d36:	f7fc fce9 	bl	800270c <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d3c:	e00a      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d3e:	f7fc fce5 	bl	800270c <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e036      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d54:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0ee      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d60:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4917      	ldr	r1, [pc, #92]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d105      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d78:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d90:	4b0e      	ldr	r3, [pc, #56]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	490b      	ldr	r1, [pc, #44]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0310 	and.w	r3, r3, #16
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dae:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	4904      	ldr	r1, [pc, #16]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	40007000 	.word	0x40007000
 8005dd4:	42420440 	.word	0x42420440

08005dd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e041      	b.n	8005e6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fc f9b0 	bl	8002164 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f000 fce0 	bl	80067dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
	...

08005e78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d109      	bne.n	8005e9c <HAL_TIM_PWM_Start+0x24>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	bf14      	ite	ne
 8005e94:	2301      	movne	r3, #1
 8005e96:	2300      	moveq	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	e022      	b.n	8005ee2 <HAL_TIM_PWM_Start+0x6a>
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d109      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0x3e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	bf14      	ite	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	e015      	b.n	8005ee2 <HAL_TIM_PWM_Start+0x6a>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d109      	bne.n	8005ed0 <HAL_TIM_PWM_Start+0x58>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	bf14      	ite	ne
 8005ec8:	2301      	movne	r3, #1
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	e008      	b.n	8005ee2 <HAL_TIM_PWM_Start+0x6a>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	bf14      	ite	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	2300      	moveq	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e05e      	b.n	8005fa8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d104      	bne.n	8005efa <HAL_TIM_PWM_Start+0x82>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ef8:	e013      	b.n	8005f22 <HAL_TIM_PWM_Start+0xaa>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d104      	bne.n	8005f0a <HAL_TIM_PWM_Start+0x92>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f08:	e00b      	b.n	8005f22 <HAL_TIM_PWM_Start+0xaa>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d104      	bne.n	8005f1a <HAL_TIM_PWM_Start+0xa2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f18:	e003      	b.n	8005f22 <HAL_TIM_PWM_Start+0xaa>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2201      	movs	r2, #1
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 ff4d 	bl	8006dca <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1e      	ldr	r2, [pc, #120]	; (8005fb0 <HAL_TIM_PWM_Start+0x138>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d107      	bne.n	8005f4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <HAL_TIM_PWM_Start+0x138>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00e      	beq.n	8005f72 <HAL_TIM_PWM_Start+0xfa>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5c:	d009      	beq.n	8005f72 <HAL_TIM_PWM_Start+0xfa>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a14      	ldr	r2, [pc, #80]	; (8005fb4 <HAL_TIM_PWM_Start+0x13c>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d004      	beq.n	8005f72 <HAL_TIM_PWM_Start+0xfa>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <HAL_TIM_PWM_Start+0x140>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d111      	bne.n	8005f96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b06      	cmp	r3, #6
 8005f82:	d010      	beq.n	8005fa6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f94:	e007      	b.n	8005fa6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800

08005fbc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e041      	b.n	8006052 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fc f8ee 	bl	80021c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	f000 fbee 	bl	80067dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d104      	bne.n	8006076 <HAL_TIM_IC_Start_IT+0x1a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006072:	b2db      	uxtb	r3, r3
 8006074:	e013      	b.n	800609e <HAL_TIM_IC_Start_IT+0x42>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b04      	cmp	r3, #4
 800607a:	d104      	bne.n	8006086 <HAL_TIM_IC_Start_IT+0x2a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006082:	b2db      	uxtb	r3, r3
 8006084:	e00b      	b.n	800609e <HAL_TIM_IC_Start_IT+0x42>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b08      	cmp	r3, #8
 800608a:	d104      	bne.n	8006096 <HAL_TIM_IC_Start_IT+0x3a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006092:	b2db      	uxtb	r3, r3
 8006094:	e003      	b.n	800609e <HAL_TIM_IC_Start_IT+0x42>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800609c:	b2db      	uxtb	r3, r3
 800609e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <HAL_TIM_IC_Start_IT+0x54>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e013      	b.n	80060d8 <HAL_TIM_IC_Start_IT+0x7c>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d104      	bne.n	80060c0 <HAL_TIM_IC_Start_IT+0x64>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e00b      	b.n	80060d8 <HAL_TIM_IC_Start_IT+0x7c>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b08      	cmp	r3, #8
 80060c4:	d104      	bne.n	80060d0 <HAL_TIM_IC_Start_IT+0x74>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	e003      	b.n	80060d8 <HAL_TIM_IC_Start_IT+0x7c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d102      	bne.n	80060e6 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80060e0:	7bbb      	ldrb	r3, [r7, #14]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d001      	beq.n	80060ea <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e0b3      	b.n	8006252 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d104      	bne.n	80060fa <HAL_TIM_IC_Start_IT+0x9e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060f8:	e013      	b.n	8006122 <HAL_TIM_IC_Start_IT+0xc6>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d104      	bne.n	800610a <HAL_TIM_IC_Start_IT+0xae>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006108:	e00b      	b.n	8006122 <HAL_TIM_IC_Start_IT+0xc6>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d104      	bne.n	800611a <HAL_TIM_IC_Start_IT+0xbe>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006118:	e003      	b.n	8006122 <HAL_TIM_IC_Start_IT+0xc6>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2202      	movs	r2, #2
 800611e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d104      	bne.n	8006132 <HAL_TIM_IC_Start_IT+0xd6>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006130:	e013      	b.n	800615a <HAL_TIM_IC_Start_IT+0xfe>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b04      	cmp	r3, #4
 8006136:	d104      	bne.n	8006142 <HAL_TIM_IC_Start_IT+0xe6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006140:	e00b      	b.n	800615a <HAL_TIM_IC_Start_IT+0xfe>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b08      	cmp	r3, #8
 8006146:	d104      	bne.n	8006152 <HAL_TIM_IC_Start_IT+0xf6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006150:	e003      	b.n	800615a <HAL_TIM_IC_Start_IT+0xfe>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b0c      	cmp	r3, #12
 800615e:	d841      	bhi.n	80061e4 <HAL_TIM_IC_Start_IT+0x188>
 8006160:	a201      	add	r2, pc, #4	; (adr r2, 8006168 <HAL_TIM_IC_Start_IT+0x10c>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	0800619d 	.word	0x0800619d
 800616c:	080061e5 	.word	0x080061e5
 8006170:	080061e5 	.word	0x080061e5
 8006174:	080061e5 	.word	0x080061e5
 8006178:	080061af 	.word	0x080061af
 800617c:	080061e5 	.word	0x080061e5
 8006180:	080061e5 	.word	0x080061e5
 8006184:	080061e5 	.word	0x080061e5
 8006188:	080061c1 	.word	0x080061c1
 800618c:	080061e5 	.word	0x080061e5
 8006190:	080061e5 	.word	0x080061e5
 8006194:	080061e5 	.word	0x080061e5
 8006198:	080061d3 	.word	0x080061d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0202 	orr.w	r2, r2, #2
 80061aa:	60da      	str	r2, [r3, #12]
      break;
 80061ac:	e01b      	b.n	80061e6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0204 	orr.w	r2, r2, #4
 80061bc:	60da      	str	r2, [r3, #12]
      break;
 80061be:	e012      	b.n	80061e6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0208 	orr.w	r2, r2, #8
 80061ce:	60da      	str	r2, [r3, #12]
      break;
 80061d0:	e009      	b.n	80061e6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0210 	orr.w	r2, r2, #16
 80061e0:	60da      	str	r2, [r3, #12]
      break;
 80061e2:	e000      	b.n	80061e6 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80061e4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2201      	movs	r2, #1
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fdeb 	bl	8006dca <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a18      	ldr	r2, [pc, #96]	; (800625c <HAL_TIM_IC_Start_IT+0x200>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_TIM_IC_Start_IT+0x1c0>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d009      	beq.n	800621c <HAL_TIM_IC_Start_IT+0x1c0>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a14      	ldr	r2, [pc, #80]	; (8006260 <HAL_TIM_IC_Start_IT+0x204>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_TIM_IC_Start_IT+0x1c0>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a13      	ldr	r2, [pc, #76]	; (8006264 <HAL_TIM_IC_Start_IT+0x208>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d111      	bne.n	8006240 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b06      	cmp	r3, #6
 800622c:	d010      	beq.n	8006250 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0201 	orr.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	e007      	b.n	8006250 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f042 0201 	orr.w	r2, r2, #1
 800624e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	40012c00 	.word	0x40012c00
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800

08006268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b02      	cmp	r3, #2
 800627c:	d122      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b02      	cmp	r3, #2
 800628a:	d11b      	bne.n	80062c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f06f 0202 	mvn.w	r2, #2
 8006294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fc f858 	bl	8002360 <HAL_TIM_IC_CaptureCallback>
 80062b0:	e005      	b.n	80062be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa76 	bl	80067a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fa7c 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d122      	bne.n	8006318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d11b      	bne.n	8006318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f06f 0204 	mvn.w	r2, #4
 80062e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2202      	movs	r2, #2
 80062ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fc f82e 	bl	8002360 <HAL_TIM_IC_CaptureCallback>
 8006304:	e005      	b.n	8006312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa4c 	bl	80067a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 fa52 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0308 	and.w	r3, r3, #8
 8006322:	2b08      	cmp	r3, #8
 8006324:	d122      	bne.n	800636c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b08      	cmp	r3, #8
 8006332:	d11b      	bne.n	800636c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0208 	mvn.w	r2, #8
 800633c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2204      	movs	r2, #4
 8006342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fc f804 	bl	8002360 <HAL_TIM_IC_CaptureCallback>
 8006358:	e005      	b.n	8006366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa22 	bl	80067a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fa28 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0310 	and.w	r3, r3, #16
 8006376:	2b10      	cmp	r3, #16
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b10      	cmp	r3, #16
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0210 	mvn.w	r2, #16
 8006390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2208      	movs	r2, #8
 8006396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fb ffda 	bl	8002360 <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9f8 	bl	80067a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f9fe 	bl	80067b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d10e      	bne.n	80063ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d107      	bne.n	80063ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0201 	mvn.w	r2, #1
 80063e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fc f8f0 	bl	80025cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f6:	2b80      	cmp	r3, #128	; 0x80
 80063f8:	d10e      	bne.n	8006418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006404:	2b80      	cmp	r3, #128	; 0x80
 8006406:	d107      	bne.n	8006418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fdb6 	bl	8006f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d10e      	bne.n	8006444 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b40      	cmp	r3, #64	; 0x40
 8006432:	d107      	bne.n	8006444 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800643c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9c2 	bl	80067c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b20      	cmp	r3, #32
 8006450:	d10e      	bne.n	8006470 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b20      	cmp	r3, #32
 800645e:	d107      	bne.n	8006470 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0220 	mvn.w	r2, #32
 8006468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fd81 	bl	8006f72 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_TIM_IC_ConfigChannel+0x1a>
 800648e:	2302      	movs	r3, #2
 8006490:	e082      	b.n	8006598 <HAL_TIM_IC_ConfigChannel+0x120>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d11b      	bne.n	80064d8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	6819      	ldr	r1, [r3, #0]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f000 fb7e 	bl	8006bb0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 020c 	bic.w	r2, r2, #12
 80064c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6999      	ldr	r1, [r3, #24]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	619a      	str	r2, [r3, #24]
 80064d6:	e05a      	b.n	800658e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b04      	cmp	r3, #4
 80064dc:	d11c      	bne.n	8006518 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6819      	ldr	r1, [r3, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f000 fbb9 	bl	8006c64 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699a      	ldr	r2, [r3, #24]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006500:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6999      	ldr	r1, [r3, #24]
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	021a      	lsls	r2, r3, #8
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	619a      	str	r2, [r3, #24]
 8006516:	e03a      	b.n	800658e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b08      	cmp	r3, #8
 800651c:	d11b      	bne.n	8006556 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6818      	ldr	r0, [r3, #0]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	6819      	ldr	r1, [r3, #0]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f000 fbd5 	bl	8006cdc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69da      	ldr	r2, [r3, #28]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 020c 	bic.w	r2, r2, #12
 8006540:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69d9      	ldr	r1, [r3, #28]
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	430a      	orrs	r2, r1
 8006552:	61da      	str	r2, [r3, #28]
 8006554:	e01b      	b.n	800658e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6818      	ldr	r0, [r3, #0]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	6819      	ldr	r1, [r3, #0]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f000 fbf4 	bl	8006d52 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69da      	ldr	r2, [r3, #28]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006578:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69d9      	ldr	r1, [r3, #28]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	021a      	lsls	r2, r3, #8
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e0ac      	b.n	8006714 <HAL_TIM_PWM_ConfigChannel+0x174>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b0c      	cmp	r3, #12
 80065c6:	f200 809f 	bhi.w	8006708 <HAL_TIM_PWM_ConfigChannel+0x168>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	08006605 	.word	0x08006605
 80065d4:	08006709 	.word	0x08006709
 80065d8:	08006709 	.word	0x08006709
 80065dc:	08006709 	.word	0x08006709
 80065e0:	08006645 	.word	0x08006645
 80065e4:	08006709 	.word	0x08006709
 80065e8:	08006709 	.word	0x08006709
 80065ec:	08006709 	.word	0x08006709
 80065f0:	08006687 	.word	0x08006687
 80065f4:	08006709 	.word	0x08006709
 80065f8:	08006709 	.word	0x08006709
 80065fc:	08006709 	.word	0x08006709
 8006600:	080066c7 	.word	0x080066c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 f948 	bl	80068a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0208 	orr.w	r2, r2, #8
 800661e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699a      	ldr	r2, [r3, #24]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0204 	bic.w	r2, r2, #4
 800662e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6999      	ldr	r1, [r3, #24]
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	691a      	ldr	r2, [r3, #16]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	619a      	str	r2, [r3, #24]
      break;
 8006642:	e062      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	4618      	mov	r0, r3
 800664c:	f000 f98e 	bl	800696c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699a      	ldr	r2, [r3, #24]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800665e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800666e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6999      	ldr	r1, [r3, #24]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	021a      	lsls	r2, r3, #8
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	619a      	str	r2, [r3, #24]
      break;
 8006684:	e041      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68b9      	ldr	r1, [r7, #8]
 800668c:	4618      	mov	r0, r3
 800668e:	f000 f9d7 	bl	8006a40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69da      	ldr	r2, [r3, #28]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f042 0208 	orr.w	r2, r2, #8
 80066a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69da      	ldr	r2, [r3, #28]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0204 	bic.w	r2, r2, #4
 80066b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69d9      	ldr	r1, [r3, #28]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	61da      	str	r2, [r3, #28]
      break;
 80066c4:	e021      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68b9      	ldr	r1, [r7, #8]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fa21 	bl	8006b14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69da      	ldr	r2, [r3, #28]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69d9      	ldr	r1, [r3, #28]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	021a      	lsls	r2, r3, #8
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	61da      	str	r2, [r3, #28]
      break;
 8006706:	e000      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006708:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b0c      	cmp	r3, #12
 800672e:	d831      	bhi.n	8006794 <HAL_TIM_ReadCapturedValue+0x78>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	0800676d 	.word	0x0800676d
 800673c:	08006795 	.word	0x08006795
 8006740:	08006795 	.word	0x08006795
 8006744:	08006795 	.word	0x08006795
 8006748:	08006777 	.word	0x08006777
 800674c:	08006795 	.word	0x08006795
 8006750:	08006795 	.word	0x08006795
 8006754:	08006795 	.word	0x08006795
 8006758:	08006781 	.word	0x08006781
 800675c:	08006795 	.word	0x08006795
 8006760:	08006795 	.word	0x08006795
 8006764:	08006795 	.word	0x08006795
 8006768:	0800678b 	.word	0x0800678b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	60fb      	str	r3, [r7, #12]

      break;
 8006774:	e00f      	b.n	8006796 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	60fb      	str	r3, [r7, #12]

      break;
 800677e:	e00a      	b.n	8006796 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	60fb      	str	r3, [r7, #12]

      break;
 8006788:	e005      	b.n	8006796 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	60fb      	str	r3, [r7, #12]

      break;
 8006792:	e000      	b.n	8006796 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006794:	bf00      	nop
  }

  return tmpreg;
 8006796:	68fb      	ldr	r3, [r7, #12]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3714      	adds	r7, #20
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop

080067a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr

080067b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bc80      	pop	{r7}
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	4770      	bx	lr
	...

080067dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a29      	ldr	r2, [pc, #164]	; (8006894 <TIM_Base_SetConfig+0xb8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00b      	beq.n	800680c <TIM_Base_SetConfig+0x30>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fa:	d007      	beq.n	800680c <TIM_Base_SetConfig+0x30>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a26      	ldr	r2, [pc, #152]	; (8006898 <TIM_Base_SetConfig+0xbc>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_Base_SetConfig+0x30>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a25      	ldr	r2, [pc, #148]	; (800689c <TIM_Base_SetConfig+0xc0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d108      	bne.n	800681e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a1c      	ldr	r2, [pc, #112]	; (8006894 <TIM_Base_SetConfig+0xb8>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00b      	beq.n	800683e <TIM_Base_SetConfig+0x62>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682c:	d007      	beq.n	800683e <TIM_Base_SetConfig+0x62>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a19      	ldr	r2, [pc, #100]	; (8006898 <TIM_Base_SetConfig+0xbc>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_Base_SetConfig+0x62>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a18      	ldr	r2, [pc, #96]	; (800689c <TIM_Base_SetConfig+0xc0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d108      	bne.n	8006850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4313      	orrs	r3, r2
 800684e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a07      	ldr	r2, [pc, #28]	; (8006894 <TIM_Base_SetConfig+0xb8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d103      	bne.n	8006884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	615a      	str	r2, [r3, #20]
}
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40000400 	.word	0x40000400
 800689c:	40000800 	.word	0x40000800

080068a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a1b      	ldr	r3, [r3, #32]
 80068ae:	f023 0201 	bic.w	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 0303 	bic.w	r3, r3, #3
 80068d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f023 0302 	bic.w	r3, r3, #2
 80068e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a1c      	ldr	r2, [pc, #112]	; (8006968 <TIM_OC1_SetConfig+0xc8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d10c      	bne.n	8006916 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f023 0308 	bic.w	r3, r3, #8
 8006902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 0304 	bic.w	r3, r3, #4
 8006914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a13      	ldr	r2, [pc, #76]	; (8006968 <TIM_OC1_SetConfig+0xc8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d111      	bne.n	8006942 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800692c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4313      	orrs	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	621a      	str	r2, [r3, #32]
}
 800695c:	bf00      	nop
 800695e:	371c      	adds	r7, #28
 8006960:	46bd      	mov	sp, r7
 8006962:	bc80      	pop	{r7}
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40012c00 	.word	0x40012c00

0800696c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f023 0210 	bic.w	r2, r3, #16
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	021b      	lsls	r3, r3, #8
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f023 0320 	bic.w	r3, r3, #32
 80069b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a1d      	ldr	r2, [pc, #116]	; (8006a3c <TIM_OC2_SetConfig+0xd0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d10d      	bne.n	80069e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	011b      	lsls	r3, r3, #4
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a14      	ldr	r2, [pc, #80]	; (8006a3c <TIM_OC2_SetConfig+0xd0>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d113      	bne.n	8006a18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	621a      	str	r2, [r3, #32]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr
 8006a3c:	40012c00 	.word	0x40012c00

08006a40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b087      	sub	sp, #28
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	697a      	ldr	r2, [r7, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a1d      	ldr	r2, [pc, #116]	; (8006b10 <TIM_OC3_SetConfig+0xd0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d10d      	bne.n	8006aba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a14      	ldr	r2, [pc, #80]	; (8006b10 <TIM_OC3_SetConfig+0xd0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d113      	bne.n	8006aea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	621a      	str	r2, [r3, #32]
}
 8006b04:	bf00      	nop
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc80      	pop	{r7}
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40012c00 	.word	0x40012c00

08006b14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	021b      	lsls	r3, r3, #8
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	031b      	lsls	r3, r3, #12
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a0f      	ldr	r2, [pc, #60]	; (8006bac <TIM_OC4_SetConfig+0x98>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d109      	bne.n	8006b88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	695b      	ldr	r3, [r3, #20]
 8006b80:	019b      	lsls	r3, r3, #6
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	621a      	str	r2, [r3, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr
 8006bac:	40012c00 	.word	0x40012c00

08006bb0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f023 0201 	bic.w	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4a1f      	ldr	r2, [pc, #124]	; (8006c58 <TIM_TI1_SetConfig+0xa8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00b      	beq.n	8006bf6 <TIM_TI1_SetConfig+0x46>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be4:	d007      	beq.n	8006bf6 <TIM_TI1_SetConfig+0x46>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4a1c      	ldr	r2, [pc, #112]	; (8006c5c <TIM_TI1_SetConfig+0xac>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_TI1_SetConfig+0x46>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	4a1b      	ldr	r2, [pc, #108]	; (8006c60 <TIM_TI1_SetConfig+0xb0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d101      	bne.n	8006bfa <TIM_TI1_SetConfig+0x4a>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <TIM_TI1_SetConfig+0x4c>
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d008      	beq.n	8006c12 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0303 	bic.w	r3, r3, #3
 8006c06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]
 8006c10:	e003      	b.n	8006c1a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f043 0301 	orr.w	r3, r3, #1
 8006c18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f023 030a 	bic.w	r3, r3, #10
 8006c34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f003 030a 	and.w	r3, r3, #10
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	621a      	str	r2, [r3, #32]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr
 8006c58:	40012c00 	.word	0x40012c00
 8006c5c:	40000400 	.word	0x40000400
 8006c60:	40000800 	.word	0x40000800

08006c64 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f023 0210 	bic.w	r2, r3, #16
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ca2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	031b      	lsls	r3, r3, #12
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cb6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr

08006cdc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f023 0303 	bic.w	r3, r3, #3
 8006d08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	021b      	lsls	r3, r3, #8
 8006d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	621a      	str	r2, [r3, #32]
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr

08006d52 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b087      	sub	sp, #28
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	031b      	lsls	r3, r3, #12
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006da4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	031b      	lsls	r3, r3, #12
 8006daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	621a      	str	r2, [r3, #32]
}
 8006dc0:	bf00      	nop
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bc80      	pop	{r7}
 8006dc8:	4770      	bx	lr

08006dca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b087      	sub	sp, #28
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	2201      	movs	r2, #1
 8006dde:	fa02 f303 	lsl.w	r3, r2, r3
 8006de2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	43db      	mvns	r3, r3
 8006dec:	401a      	ands	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a1a      	ldr	r2, [r3, #32]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006e02:	431a      	orrs	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	621a      	str	r2, [r3, #32]
}
 8006e08:	bf00      	nop
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr
	...

08006e14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e046      	b.n	8006eba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a16      	ldr	r2, [pc, #88]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00e      	beq.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e78:	d009      	beq.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a12      	ldr	r2, [pc, #72]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d004      	beq.n	8006e8e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a10      	ldr	r2, [pc, #64]	; (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d10c      	bne.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40000400 	.word	0x40000400
 8006ecc:	40000800 	.word	0x40000800

08006ed0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e03d      	b.n	8006f68 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bc80      	pop	{r7}
 8006f70:	4770      	bx	lr

08006f72 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bc80      	pop	{r7}
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr
	...

08006f98 <__libc_init_array>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	2600      	movs	r6, #0
 8006f9c:	4d0c      	ldr	r5, [pc, #48]	; (8006fd0 <__libc_init_array+0x38>)
 8006f9e:	4c0d      	ldr	r4, [pc, #52]	; (8006fd4 <__libc_init_array+0x3c>)
 8006fa0:	1b64      	subs	r4, r4, r5
 8006fa2:	10a4      	asrs	r4, r4, #2
 8006fa4:	42a6      	cmp	r6, r4
 8006fa6:	d109      	bne.n	8006fbc <__libc_init_array+0x24>
 8006fa8:	f000 f830 	bl	800700c <_init>
 8006fac:	2600      	movs	r6, #0
 8006fae:	4d0a      	ldr	r5, [pc, #40]	; (8006fd8 <__libc_init_array+0x40>)
 8006fb0:	4c0a      	ldr	r4, [pc, #40]	; (8006fdc <__libc_init_array+0x44>)
 8006fb2:	1b64      	subs	r4, r4, r5
 8006fb4:	10a4      	asrs	r4, r4, #2
 8006fb6:	42a6      	cmp	r6, r4
 8006fb8:	d105      	bne.n	8006fc6 <__libc_init_array+0x2e>
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc0:	4798      	blx	r3
 8006fc2:	3601      	adds	r6, #1
 8006fc4:	e7ee      	b.n	8006fa4 <__libc_init_array+0xc>
 8006fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fca:	4798      	blx	r3
 8006fcc:	3601      	adds	r6, #1
 8006fce:	e7f2      	b.n	8006fb6 <__libc_init_array+0x1e>
 8006fd0:	0800704c 	.word	0x0800704c
 8006fd4:	0800704c 	.word	0x0800704c
 8006fd8:	0800704c 	.word	0x0800704c
 8006fdc:	08007050 	.word	0x08007050

08006fe0 <memcpy>:
 8006fe0:	440a      	add	r2, r1
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fe8:	d100      	bne.n	8006fec <memcpy+0xc>
 8006fea:	4770      	bx	lr
 8006fec:	b510      	push	{r4, lr}
 8006fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ff2:	4291      	cmp	r1, r2
 8006ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ff8:	d1f9      	bne.n	8006fee <memcpy+0xe>
 8006ffa:	bd10      	pop	{r4, pc}

08006ffc <memset>:
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	4402      	add	r2, r0
 8007000:	4293      	cmp	r3, r2
 8007002:	d100      	bne.n	8007006 <memset+0xa>
 8007004:	4770      	bx	lr
 8007006:	f803 1b01 	strb.w	r1, [r3], #1
 800700a:	e7f9      	b.n	8007000 <memset+0x4>

0800700c <_init>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	bf00      	nop
 8007010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007012:	bc08      	pop	{r3}
 8007014:	469e      	mov	lr, r3
 8007016:	4770      	bx	lr

08007018 <_fini>:
 8007018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701a:	bf00      	nop
 800701c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701e:	bc08      	pop	{r3}
 8007020:	469e      	mov	lr, r3
 8007022:	4770      	bx	lr
