
FlyWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006720  08006720  0002fc30  2**0
                  CONTENTS
  4 .ARM          00000000  08006720  08006720  0002fc30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006720  08006720  0002fc30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .eeprom       00000030  0800fc00  0800fc00  0002fc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000054  20000000  08006728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000240  20000058  0800677c  00020058  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20000298  0800677c  00020298  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002fc30  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010500  00000000  00000000  0002fc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ca9  00000000  00000000  00040159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00042e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef0  00000000  00000000  00043e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019407  00000000  00000000  00044d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014403  00000000  00000000  0005e12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f219  00000000  00000000  00072532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010174b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043d4  00000000  00000000  0010179c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	080066e0 	.word	0x080066e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	080066e0 	.word	0x080066e0

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__gesf2>:
 80004d0:	f04f 3cff 	mov.w	ip, #4294967295
 80004d4:	e006      	b.n	80004e4 <__cmpsf2+0x4>
 80004d6:	bf00      	nop

080004d8 <__lesf2>:
 80004d8:	f04f 0c01 	mov.w	ip, #1
 80004dc:	e002      	b.n	80004e4 <__cmpsf2+0x4>
 80004de:	bf00      	nop

080004e0 <__cmpsf2>:
 80004e0:	f04f 0c01 	mov.w	ip, #1
 80004e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004f4:	bf18      	it	ne
 80004f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004fa:	d011      	beq.n	8000520 <__cmpsf2+0x40>
 80004fc:	b001      	add	sp, #4
 80004fe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000502:	bf18      	it	ne
 8000504:	ea90 0f01 	teqne	r0, r1
 8000508:	bf58      	it	pl
 800050a:	ebb2 0003 	subspl.w	r0, r2, r3
 800050e:	bf88      	it	hi
 8000510:	17c8      	asrhi	r0, r1, #31
 8000512:	bf38      	it	cc
 8000514:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000518:	bf18      	it	ne
 800051a:	f040 0001 	orrne.w	r0, r0, #1
 800051e:	4770      	bx	lr
 8000520:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000524:	d102      	bne.n	800052c <__cmpsf2+0x4c>
 8000526:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800052a:	d105      	bne.n	8000538 <__cmpsf2+0x58>
 800052c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000530:	d1e4      	bne.n	80004fc <__cmpsf2+0x1c>
 8000532:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000536:	d0e1      	beq.n	80004fc <__cmpsf2+0x1c>
 8000538:	f85d 0b04 	ldr.w	r0, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <__aeabi_cfrcmple>:
 8000540:	4684      	mov	ip, r0
 8000542:	4608      	mov	r0, r1
 8000544:	4661      	mov	r1, ip
 8000546:	e7ff      	b.n	8000548 <__aeabi_cfcmpeq>

08000548 <__aeabi_cfcmpeq>:
 8000548:	b50f      	push	{r0, r1, r2, r3, lr}
 800054a:	f7ff ffc9 	bl	80004e0 <__cmpsf2>
 800054e:	2800      	cmp	r0, #0
 8000550:	bf48      	it	mi
 8000552:	f110 0f00 	cmnmi.w	r0, #0
 8000556:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000558 <__aeabi_fcmpeq>:
 8000558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800055c:	f7ff fff4 	bl	8000548 <__aeabi_cfcmpeq>
 8000560:	bf0c      	ite	eq
 8000562:	2001      	moveq	r0, #1
 8000564:	2000      	movne	r0, #0
 8000566:	f85d fb08 	ldr.w	pc, [sp], #8
 800056a:	bf00      	nop

0800056c <__aeabi_fcmplt>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff ffea 	bl	8000548 <__aeabi_cfcmpeq>
 8000574:	bf34      	ite	cc
 8000576:	2001      	movcc	r0, #1
 8000578:	2000      	movcs	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_fcmple>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffe0 	bl	8000548 <__aeabi_cfcmpeq>
 8000588:	bf94      	ite	ls
 800058a:	2001      	movls	r0, #1
 800058c:	2000      	movhi	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_fcmpge>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffd2 	bl	8000540 <__aeabi_cfrcmple>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_fcmpgt>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffc8 	bl	8000540 <__aeabi_cfrcmple>
 80005b0:	bf34      	ite	cc
 80005b2:	2001      	movcc	r0, #1
 80005b4:	2000      	movcs	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_f2iz>:
 80005bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005c4:	d30f      	bcc.n	80005e6 <__aeabi_f2iz+0x2a>
 80005c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ce:	d90d      	bls.n	80005ec <__aeabi_f2iz+0x30>
 80005d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005dc:	fa23 f002 	lsr.w	r0, r3, r2
 80005e0:	bf18      	it	ne
 80005e2:	4240      	negne	r0, r0
 80005e4:	4770      	bx	lr
 80005e6:	f04f 0000 	mov.w	r0, #0
 80005ea:	4770      	bx	lr
 80005ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005f0:	d101      	bne.n	80005f6 <__aeabi_f2iz+0x3a>
 80005f2:	0242      	lsls	r2, r0, #9
 80005f4:	d105      	bne.n	8000602 <__aeabi_f2iz+0x46>
 80005f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80005fa:	bf08      	it	eq
 80005fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000600:	4770      	bx	lr
 8000602:	f04f 0000 	mov.w	r0, #0
 8000606:	4770      	bx	lr

08000608 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_ADC1_Init+0x74>)
 800061a:	4a19      	ldr	r2, [pc, #100]	; (8000680 <MX_ADC1_Init+0x78>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_ADC1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_ADC1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_ADC1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_ADC1_Init+0x74>)
 8000632:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000636:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_ADC1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_ADC1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC1_Init+0x74>)
 8000646:	f001 fbf9 	bl	8001e3c <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 feb0 	bl	80013b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000654:	2301      	movs	r3, #1
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000658:	2301      	movs	r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_ADC1_Init+0x74>)
 8000666:	f001 fcc1 	bl	8001fec <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000670:	f000 fea0 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000074 	.word	0x20000074
 8000680:	40012400 	.word	0x40012400

08000684 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <HAL_ADC_MspInit+0x6c>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d121      	bne.n	80006e8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_ADC_MspInit+0x70>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80006d4:	2306      	movs	r3, #6
 80006d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d8:	2303      	movs	r3, #3
 80006da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	4619      	mov	r1, r3
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <HAL_ADC_MspInit+0x74>)
 80006e4:	f002 f970 	bl	80029c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40012400 	.word	0x40012400
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010800 	.word	0x40010800

080006fc <Flash_Write>:
	1

};

uint32_t Flash_Write(uint32_t address, uint32_t* data, uint32_t len)
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result = HAL_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	75fb      	strb	r3, [r7, #23]

	result = HAL_FLASH_Unlock();
 800070c:	f001 ffc2 	bl	8002694 <HAL_FLASH_Unlock>
 8000710:	4603      	mov	r3, r0
 8000712:	75fb      	strb	r3, [r7, #23]
	if (result) return result;
 8000714:	7dfb      	ldrb	r3, [r7, #23]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <Flash_Write+0x22>
 800071a:	7dfb      	ldrb	r3, [r7, #23]
 800071c:	e037      	b.n	800078e <Flash_Write+0x92>
	result = Flash_Erase(address);
 800071e:	68f8      	ldr	r0, [r7, #12]
 8000720:	f000 f83a 	bl	8000798 <Flash_Erase>
 8000724:	4603      	mov	r3, r0
 8000726:	75fb      	strb	r3, [r7, #23]
	if (result) return HAL_FLASH_GetError();
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <Flash_Write+0x3a>
 800072e:	f001 ffe7 	bl	8002700 <HAL_FLASH_GetError>
 8000732:	4603      	mov	r3, r0
 8000734:	e02b      	b.n	800078e <Flash_Write+0x92>
	uint32_t i = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
	for (uint32_t addr = address; addr < address + len; addr += 4)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	e01b      	b.n	8000778 <Flash_Write+0x7c>
	{
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data[i++]);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	61fa      	str	r2, [r7, #28]
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	4413      	add	r3, r2
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2200      	movs	r2, #0
 8000750:	461c      	mov	r4, r3
 8000752:	4615      	mov	r5, r2
 8000754:	4622      	mov	r2, r4
 8000756:	462b      	mov	r3, r5
 8000758:	69b9      	ldr	r1, [r7, #24]
 800075a:	2002      	movs	r0, #2
 800075c:	f001 ff2a 	bl	80025b4 <HAL_FLASH_Program>
 8000760:	4603      	mov	r3, r0
 8000762:	75fb      	strb	r3, [r7, #23]
		if (result) return HAL_FLASH_GetError();
 8000764:	7dfb      	ldrb	r3, [r7, #23]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d003      	beq.n	8000772 <Flash_Write+0x76>
 800076a:	f001 ffc9 	bl	8002700 <HAL_FLASH_GetError>
 800076e:	4603      	mov	r3, r0
 8000770:	e00d      	b.n	800078e <Flash_Write+0x92>
	for (uint32_t addr = address; addr < address + len; addr += 4)
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	3304      	adds	r3, #4
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	69ba      	ldr	r2, [r7, #24]
 8000780:	429a      	cmp	r2, r3
 8000782:	d3dd      	bcc.n	8000740 <Flash_Write+0x44>
	}
	result = HAL_FLASH_Lock();
 8000784:	f001 ffac 	bl	80026e0 <HAL_FLASH_Lock>
 8000788:	4603      	mov	r3, r0
 800078a:	75fb      	strb	r3, [r7, #23]
	return result;
 800078c:	7dfb      	ldrb	r3, [r7, #23]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000798 <Flash_Erase>:

HAL_StatusTypeDef Flash_Erase(uint32_t address)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	static uint32_t PAGEError = 0;
	eraseSetting.PageAddress = address - address % 0x400;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80007a6:	f023 0303 	bic.w	r3, r3, #3
 80007aa:	4a05      	ldr	r2, [pc, #20]	; (80007c0 <Flash_Erase+0x28>)
 80007ac:	6093      	str	r3, [r2, #8]
	return HAL_FLASHEx_Erase(&eraseSetting, &PAGEError);
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <Flash_Erase+0x2c>)
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <Flash_Erase+0x28>)
 80007b2:	f002 f861 	bl	8002878 <HAL_FLASHEx_Erase>
 80007b6:	4603      	mov	r3, r0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	200000a4 	.word	0x200000a4

080007c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007dc:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a2d      	ldr	r2, [pc, #180]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007e2:	f043 0320 	orr.w	r3, r3, #32
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0320 	and.w	r3, r3, #32
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b28      	ldr	r3, [pc, #160]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a27      	ldr	r2, [pc, #156]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_GPIO_Init+0xd0>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a21      	ldr	r2, [pc, #132]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_GPIO_Init+0xd0>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0308 	and.w	r3, r3, #8
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POLARITY_MOTOR_Pin|POLARITY_COIL_Pin|ADC_ON_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	2138      	movs	r1, #56	; 0x38
 8000828:	481c      	ldr	r0, [pc, #112]	; (800089c <MX_GPIO_Init+0xd4>)
 800082a:	f002 fa68 	bl	8002cfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000834:	481a      	ldr	r0, [pc, #104]	; (80008a0 <MX_GPIO_Init+0xd8>)
 8000836:	f002 fa62 	bl	8002cfe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POLARITY_MOTOR_Pin|POLARITY_COIL_Pin|ADC_ON_Pin;
 800083a:	2338      	movs	r3, #56	; 0x38
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2302      	movs	r3, #2
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	4619      	mov	r1, r3
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <MX_GPIO_Init+0xd4>)
 8000852:	f002 f8b9 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEST1_Pin|ADDR0_Pin|ADDR1_Pin;
 8000856:	f44f 6303 	mov.w	r3, #2096	; 0x830
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <MX_GPIO_Init+0xd8>)
 800086c:	f002 f8ac 	bl	80029c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led_Pin;
 8000870:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2302      	movs	r3, #2
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_GPIO_Init+0xd8>)
 800088a:	f002 f89d 	bl	80029c8 <HAL_GPIO_Init>

}
 800088e:	bf00      	nop
 8000890:	3720      	adds	r7, #32
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000
 800089c:	40010800 	.word	0x40010800
 80008a0:	40010c00 	.word	0x40010c00

080008a4 <Set_Configuration>:
#include "hardware_settings.h"

void Set_Configuration(uint8_t configuration)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	/**
	 * Ограничение на минимальное измерение в 10 оборотов в минуту
	 * Если хотим другое
	 * Считаем по формуле 60000 / обороты в минунту
	 */
	if (configuration & (1 << 3))
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f003 0308 	and.w	r3, r3, #8
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d012      	beq.n	80008de <Set_Configuration+0x3a>
	{
		__HAL_TIM_SET_AUTORELOAD(&htim3, 3000); // Рассчитанное значение / 2
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <Set_Configuration+0x68>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <Set_Configuration+0x68>)
 80008c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008c8:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4, 3000); // Рассчитанное значение / 2
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <Set_Configuration+0x6c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <Set_Configuration+0x6c>)
 80008d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008da:	60da      	str	r2, [r3, #12]
	else
	{
		__HAL_TIM_SET_AUTORELOAD(&htim3, 6000); // Рассчитанное значение
		__HAL_TIM_SET_AUTORELOAD(&htim4, 6000); // Рассчитанное значение
	}
}
 80008dc:	e011      	b.n	8000902 <Set_Configuration+0x5e>
		__HAL_TIM_SET_AUTORELOAD(&htim3, 6000); // Рассчитанное значение
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <Set_Configuration+0x68>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f241 7270 	movw	r2, #6000	; 0x1770
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <Set_Configuration+0x68>)
 80008ea:	f241 7270 	movw	r2, #6000	; 0x1770
 80008ee:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4, 6000); // Рассчитанное значение
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <Set_Configuration+0x6c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f241 7270 	movw	r2, #6000	; 0x1770
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008fa:	4b05      	ldr	r3, [pc, #20]	; (8000910 <Set_Configuration+0x6c>)
 80008fc:	f241 7270 	movw	r2, #6000	; 0x1770
 8000900:	60da      	str	r2, [r3, #12]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	200001d8 	.word	0x200001d8
 8000910:	20000220 	.word	0x20000220

08000914 <Set_Channel_Raw>:


void Set_Channel_Raw(uint8_t channel, int32_t value)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
	uint32_t absValue = abs(value);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bfb8      	it	lt
 8000926:	425b      	neglt	r3, r3
 8000928:	60fb      	str	r3, [r7, #12]
	GPIO_PinState polarity = value > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	bfcc      	ite	gt
 8000930:	2301      	movgt	r3, #1
 8000932:	2300      	movle	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	72fb      	strb	r3, [r7, #11]
	if (absValue >= 0x7FFF)
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800093e:	4293      	cmp	r3, r2
 8000940:	d903      	bls.n	800094a <Set_Channel_Raw+0x36>
	{
		absValue = 0xFFFF;
 8000942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e002      	b.n	8000950 <Set_Channel_Raw+0x3c>
	}
	else
	{
		absValue = absValue << 1;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
	}
	uint8_t revers = (NowSettings.Config >> (5 - channel)) & 1;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <Set_Channel_Raw+0xa0>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	461a      	mov	r2, r3
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f1c3 0305 	rsb	r3, r3, #5
 800095c:	fa42 f303 	asr.w	r3, r2, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	72bb      	strb	r3, [r7, #10]
	switch (channel) {
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <Set_Channel_Raw+0x60>
 800096e:	2b01      	cmp	r3, #1
 8000970:	d00e      	beq.n	8000990 <Set_Channel_Raw+0x7c>
		case 1:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, absValue);
			HAL_GPIO_WritePin(POLARITY_COIL_GPIO_Port, POLARITY_COIL_Pin, polarity ^ revers);
			break;
		default:
			break;
 8000972:	e01b      	b.n	80009ac <Set_Channel_Raw+0x98>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, absValue);
 8000974:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <Set_Channel_Raw+0xa4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	68fa      	ldr	r2, [r7, #12]
 800097a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(POLARITY_MOTOR_GPIO_Port, POLARITY_MOTOR_Pin, polarity ^ revers);
 800097c:	7afa      	ldrb	r2, [r7, #11]
 800097e:	7abb      	ldrb	r3, [r7, #10]
 8000980:	4053      	eors	r3, r2
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	2108      	movs	r1, #8
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <Set_Channel_Raw+0xa8>)
 800098a:	f002 f9b8 	bl	8002cfe <HAL_GPIO_WritePin>
			break;
 800098e:	e00d      	b.n	80009ac <Set_Channel_Raw+0x98>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, absValue);
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <Set_Channel_Raw+0xac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(POLARITY_COIL_GPIO_Port, POLARITY_COIL_Pin, polarity ^ revers);
 8000998:	7afa      	ldrb	r2, [r7, #11]
 800099a:	7abb      	ldrb	r3, [r7, #10]
 800099c:	4053      	eors	r3, r2
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	2110      	movs	r1, #16
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <Set_Channel_Raw+0xa8>)
 80009a6:	f002 f9aa 	bl	8002cfe <HAL_GPIO_WritePin>
			break;
 80009aa:	bf00      	nop
	}
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200000b8 	.word	0x200000b8
 80009b8:	20000190 	.word	0x20000190
 80009bc:	40010800 	.word	0x40010800
 80009c0:	20000148 	.word	0x20000148

080009c4 <Calculate_Channel>:

int32_t lastError[ChannelCount] = {0};
float Integral[ChannelCount] = {0};
void Calculate_Channel(uint8_t channel)
{
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
	uint8_t DM = NowSettings.Config & (channel == 0 ? 0x02 : 0x01);
 80009ce:	4b86      	ldr	r3, [pc, #536]	; (8000be8 <Calculate_Channel+0x224>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b25b      	sxtb	r3, r3
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	d101      	bne.n	80009de <Calculate_Channel+0x1a>
 80009da:	2202      	movs	r2, #2
 80009dc:	e000      	b.n	80009e0 <Calculate_Channel+0x1c>
 80009de:	2201      	movs	r2, #1
 80009e0:	4013      	ands	r3, r2
 80009e2:	b25b      	sxtb	r3, r3
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int16_t *NeedSpeed = channel == 0 ? &NowSettings.Need_F_ChannelSpeed : &NowSettings.Need_S_ChannelSpeed;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d101      	bne.n	80009f2 <Calculate_Channel+0x2e>
 80009ee:	4b7f      	ldr	r3, [pc, #508]	; (8000bec <Calculate_Channel+0x228>)
 80009f0:	e000      	b.n	80009f4 <Calculate_Channel+0x30>
 80009f2:	4b7f      	ldr	r3, [pc, #508]	; (8000bf0 <Calculate_Channel+0x22c>)
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (DM)
 80009f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d009      	beq.n	8000a12 <Calculate_Channel+0x4e>
	{
		Set_Channel_Raw(channel, *NeedSpeed);
 80009fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a04:	461a      	mov	r2, r3
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff ff82 	bl	8000914 <Set_Channel_Raw>
			val += val > 0 ? *Min_Force : -(*Min_Force);
		}
#endif
		Set_Channel_Raw(channel, val);
	}
}
 8000a10:	e0e6      	b.n	8000be0 <Calculate_Channel+0x21c>
		int16_t *CurrentSpeed = NeedSpeed + 1;
 8000a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a14:	3302      	adds	r3, #2
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
		uint16_t *MaxAbsSpeed = CurrentSpeed + 1;
 8000a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1a:	3302      	adds	r3, #2
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
		uint16_t *Min_Force = MaxAbsSpeed + 1;
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	3302      	adds	r3, #2
 8000a22:	623b      	str	r3, [r7, #32]
		if (*NeedSpeed > *MaxAbsSpeed)
 8000a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dd04      	ble.n	8000a3e <Calculate_Channel+0x7a>
			*NeedSpeed = *MaxAbsSpeed;
 8000a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	801a      	strh	r2, [r3, #0]
		if (*NeedSpeed < -(*MaxAbsSpeed))
 8000a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a44:	461a      	mov	r2, r3
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	425b      	negs	r3, r3
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	da06      	bge.n	8000a5e <Calculate_Channel+0x9a>
			*NeedSpeed = -(*MaxAbsSpeed);
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	425b      	negs	r3, r3
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	b21a      	sxth	r2, r3
 8000a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5c:	801a      	strh	r2, [r3, #0]
		float *Kp = Min_Force + 1, *Ki = Kp + 1, *Kd = Ki + 1;
 8000a5e:	6a3b      	ldr	r3, [r7, #32]
 8000a60:	3302      	adds	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	3304      	adds	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	617b      	str	r3, [r7, #20]
		int32_t error = *NeedSpeed - *CurrentSpeed;
 8000a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a76:	461a      	mov	r2, r3
 8000a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	613b      	str	r3, [r7, #16]
		float Prop = *Kp * error;
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	681c      	ldr	r4, [r3, #0]
 8000a86:	6938      	ldr	r0, [r7, #16]
 8000a88:	f7ff fcce 	bl	8000428 <__aeabi_i2f>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4620      	mov	r0, r4
 8000a92:	f7ff fb5b 	bl	800014c <__aeabi_fmul>
 8000a96:	4603      	mov	r3, r0
 8000a98:	60fb      	str	r3, [r7, #12]
		float Dif = *Kd * (error - lastError[channel]);
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	681c      	ldr	r4, [r3, #0]
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a54      	ldr	r2, [pc, #336]	; (8000bf4 <Calculate_Channel+0x230>)
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fcbc 	bl	8000428 <__aeabi_i2f>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4620      	mov	r0, r4
 8000ab6:	f7ff fb49 	bl	800014c <__aeabi_fmul>
 8000aba:	4603      	mov	r3, r0
 8000abc:	60bb      	str	r3, [r7, #8]
		lastError[channel] = error;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	494c      	ldr	r1, [pc, #304]	; (8000bf4 <Calculate_Channel+0x230>)
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Integral[channel] = Integral[channel] + (*Ki * error);
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4a4b      	ldr	r2, [pc, #300]	; (8000bf8 <Calculate_Channel+0x234>)
 8000acc:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	681c      	ldr	r4, [r3, #0]
 8000ad4:	6938      	ldr	r0, [r7, #16]
 8000ad6:	f7ff fca7 	bl	8000428 <__aeabi_i2f>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f7ff fb34 	bl	800014c <__aeabi_fmul>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	79fc      	ldrb	r4, [r7, #7]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4628      	mov	r0, r5
 8000aec:	f7ff fbe8 	bl	80002c0 <__addsf3>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <Calculate_Channel+0x234>)
 8000af6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if (Integral[channel] > 0x7FFF)
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4a3e      	ldr	r2, [pc, #248]	; (8000bf8 <Calculate_Channel+0x234>)
 8000afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b02:	493e      	ldr	r1, [pc, #248]	; (8000bfc <Calculate_Channel+0x238>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fd4f 	bl	80005a8 <__aeabi_fcmpgt>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d004      	beq.n	8000b1a <Calculate_Channel+0x156>
			Integral[channel] = 0x7FFF;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4a39      	ldr	r2, [pc, #228]	; (8000bf8 <Calculate_Channel+0x234>)
 8000b14:	4939      	ldr	r1, [pc, #228]	; (8000bfc <Calculate_Channel+0x238>)
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (Integral[channel] < -0x7FFF)
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4a36      	ldr	r2, [pc, #216]	; (8000bf8 <Calculate_Channel+0x234>)
 8000b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b22:	4937      	ldr	r1, [pc, #220]	; (8000c00 <Calculate_Channel+0x23c>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fd21 	bl	800056c <__aeabi_fcmplt>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <Calculate_Channel+0x176>
			Integral[channel] = -0x7FFF;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	4a31      	ldr	r2, [pc, #196]	; (8000bf8 <Calculate_Channel+0x234>)
 8000b34:	4932      	ldr	r1, [pc, #200]	; (8000c00 <Calculate_Channel+0x23c>)
 8000b36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (error == 0 && *NeedSpeed == 0)
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10a      	bne.n	8000b56 <Calculate_Channel+0x192>
 8000b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d105      	bne.n	8000b56 <Calculate_Channel+0x192>
			Integral[channel] = 0;
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	4a2a      	ldr	r2, [pc, #168]	; (8000bf8 <Calculate_Channel+0x234>)
 8000b4e:	f04f 0100 	mov.w	r1, #0
 8000b52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		float val = Prop + Integral[channel] + Dif;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <Calculate_Channel+0x234>)
 8000b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5e:	68f9      	ldr	r1, [r7, #12]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fbad 	bl	80002c0 <__addsf3>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	68b8      	ldr	r0, [r7, #8]
 8000b6c:	f7ff fba8 	bl	80002c0 <__addsf3>
 8000b70:	4603      	mov	r3, r0
 8000b72:	637b      	str	r3, [r7, #52]	; 0x34
		if (abs(val) < 100)
 8000b74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b76:	f7ff fd21 	bl	80005bc <__aeabi_f2iz>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000b80:	db09      	blt.n	8000b96 <Calculate_Channel+0x1d2>
 8000b82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b84:	f7ff fd1a 	bl	80005bc <__aeabi_f2iz>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b63      	cmp	r3, #99	; 0x63
 8000b8c:	dc03      	bgt.n	8000b96 <Calculate_Channel+0x1d2>
			val = 0;
 8000b8e:	f04f 0300 	mov.w	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
 8000b94:	e01b      	b.n	8000bce <Calculate_Channel+0x20a>
			val += val > 0 ? *Min_Force : -(*Min_Force);
 8000b96:	f04f 0100 	mov.w	r1, #0
 8000b9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000b9c:	f7ff fd04 	bl	80005a8 <__aeabi_fcmpgt>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <Calculate_Channel+0x1f0>
 8000ba6:	6a3b      	ldr	r3, [r7, #32]
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fc3c 	bl	8000428 <__aeabi_i2f>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	e006      	b.n	8000bc2 <Calculate_Channel+0x1fe>
 8000bb4:	6a3b      	ldr	r3, [r7, #32]
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	425b      	negs	r3, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fc34 	bl	8000428 <__aeabi_i2f>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000bc6:	f7ff fb7b 	bl	80002c0 <__addsf3>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
		Set_Channel_Raw(channel, val);
 8000bce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000bd0:	f7ff fcf4 	bl	80005bc <__aeabi_f2iz>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fe9a 	bl	8000914 <Set_Channel_Raw>
}
 8000be0:	bf00      	nop
 8000be2:	3738      	adds	r7, #56	; 0x38
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bdb0      	pop	{r4, r5, r7, pc}
 8000be8:	200000b8 	.word	0x200000b8
 8000bec:	200000bc 	.word	0x200000bc
 8000bf0:	200000d0 	.word	0x200000d0
 8000bf4:	200000a8 	.word	0x200000a8
 8000bf8:	200000b0 	.word	0x200000b0
 8000bfc:	46fffe00 	.word	0x46fffe00
 8000c00:	c6fffe00 	.word	0xc6fffe00

08000c04 <Clear_Chanel>:

void Clear_Chanel(uint8_t channel)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	Integral[channel] = 0;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <Clear_Chanel+0x40>)
 8000c12:	f04f 0100 	mov.w	r1, #0
 8000c16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	lastError[channel] = channel == 0 ? NowSettings.Current_F_ChannelSpeed : NowSettings.Current_S_ChannelSpeed;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d104      	bne.n	8000c2a <Clear_Chanel+0x26>
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <Clear_Chanel+0x44>)
 8000c22:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c26:	4619      	mov	r1, r3
 8000c28:	e003      	b.n	8000c32 <Clear_Chanel+0x2e>
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <Clear_Chanel+0x44>)
 8000c2c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8000c30:	4619      	mov	r1, r3
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <Clear_Chanel+0x48>)
 8000c36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	200000b0 	.word	0x200000b0
 8000c48:	200000b8 	.word	0x200000b8
 8000c4c:	200000a8 	.word	0x200000a8

08000c50 <Select_Setting>:

void Select_Setting(MemoryMap *from, volatile MemoryMap *to)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
	if ((uint32_t)to < 0x20000000)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c60:	d206      	bcs.n	8000c70 <Select_Setting+0x20>
	{
		Flash_Write((uint32_t)to, (uint32_t *)from, sizeof(MemoryMap));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	2230      	movs	r2, #48	; 0x30
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fd47 	bl	80006fc <Flash_Write>
	}
	else
	{
		memcpy(to, from, sizeof(MemoryMap));
	}
}
 8000c6e:	e004      	b.n	8000c7a <Select_Setting+0x2a>
		memcpy(to, from, sizeof(MemoryMap));
 8000c70:	2230      	movs	r2, #48	; 0x30
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	6838      	ldr	r0, [r7, #0]
 8000c76:	f005 fd1d 	bl	80066b4 <memcpy>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(uint8_t address)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END I2C1_Init 0 */
#endif
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_I2C1_Init+0x60>)
 8000c90:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <MX_I2C1_Init+0x64>)
 8000c92:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_I2C1_Init+0x60>)
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <MX_I2C1_Init+0x68>)
 8000c98:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_I2C1_Init+0x60>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = address << 1;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_I2C1_Init+0x60>)
 8000ca8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_I2C1_Init+0x60>)
 8000cac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_I2C1_Init+0x60>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_I2C1_Init+0x60>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_I2C1_Init+0x60>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_I2C1_Init+0x60>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <MX_I2C1_Init+0x60>)
 8000ccc:	f002 f830 	bl	8002d30 <HAL_I2C_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 8000cd6:	f000 fb6d 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200000e8 	.word	0x200000e8
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	00061a80 	.word	0x00061a80

08000cf0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a25      	ldr	r2, [pc, #148]	; (8000da0 <HAL_I2C_MspInit+0xb0>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d142      	bne.n	8000d96 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d10:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <HAL_I2C_MspInit+0xb4>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a23      	ldr	r2, [pc, #140]	; (8000da4 <HAL_I2C_MspInit+0xb4>)
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <HAL_I2C_MspInit+0xb4>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2e:	2312      	movs	r3, #18
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481a      	ldr	r0, [pc, #104]	; (8000da8 <HAL_I2C_MspInit+0xb8>)
 8000d3e:	f001 fe43 	bl	80029c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_I2C_MspInit+0xbc>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	f043 0302 	orr.w	r3, r3, #2
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
 8000d58:	4a14      	ldr	r2, [pc, #80]	; (8000dac <HAL_I2C_MspInit+0xbc>)
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_I2C_MspInit+0xb4>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_I2C_MspInit+0xb4>)
 8000d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_I2C_MspInit+0xb4>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2102      	movs	r1, #2
 8000d7a:	201f      	movs	r0, #31
 8000d7c:	f001 fb5d 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d80:	201f      	movs	r0, #31
 8000d82:	f001 fb76 	bl	8002472 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 2, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2102      	movs	r1, #2
 8000d8a:	2020      	movs	r0, #32
 8000d8c:	f001 fb55 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d90:	2020      	movs	r0, #32
 8000d92:	f001 fb6e 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40005400 	.word	0x40005400
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010c00 	.word	0x40010c00
 8000dac:	40010000 	.word	0x40010000

08000db0 <HAL_I2C_ListenCpltCallback>:
volatile uint8_t offset = 0;
volatile uint8_t MOC = 0;
#define ram ((uint8_t *) &DefaultSettings)

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	first = 1;
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <HAL_I2C_ListenCpltCallback+0x1c>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_EnableListen_IT(hi2c); // slave is ready again
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f002 f9de 	bl	8003180 <HAL_I2C_EnableListen_IT>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000040 	.word	0x20000040

08000dd0 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	803b      	strh	r3, [r7, #0]
	uint8_t* addres = (offset < sizeof(MemoryMap)) ? &ram[offset] : (uint8_t *)&MOC;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_I2C_AddrCallback+0x6c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2b2f      	cmp	r3, #47	; 0x2f
 8000de8:	d806      	bhi.n	8000df8 <HAL_I2C_AddrCallback+0x28>
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_I2C_AddrCallback+0x6c>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_I2C_AddrCallback+0x70>)
 8000df4:	4413      	add	r3, r2
 8000df6:	e000      	b.n	8000dfa <HAL_I2C_AddrCallback+0x2a>
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_I2C_AddrCallback+0x74>)
 8000dfa:	60fb      	str	r3, [r7, #12]

	if(TransferDirection==I2C_DIRECTION_TRANSMIT)
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d112      	bne.n	8000e28 <HAL_I2C_AddrCallback+0x58>
	{
		if(first)
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_I2C_AddrCallback+0x78>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <HAL_I2C_AddrCallback+0x4a>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)&offset, 1, I2C_NEXT_FRAME);
 8000e0c:	2304      	movs	r3, #4
 8000e0e:	2201      	movs	r2, #1
 8000e10:	490a      	ldr	r1, [pc, #40]	; (8000e3c <HAL_I2C_AddrCallback+0x6c>)
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f002 f942 	bl	800309c <HAL_I2C_Slave_Seq_Receive_IT>
	}
	else
	{
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
	}
}
 8000e18:	e00c      	b.n	8000e34 <HAL_I2C_AddrCallback+0x64>
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	68f9      	ldr	r1, [r7, #12]
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f002 f93b 	bl	800309c <HAL_I2C_Slave_Seq_Receive_IT>
}
 8000e26:	e005      	b.n	8000e34 <HAL_I2C_AddrCallback+0x64>
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
 8000e28:	2304      	movs	r3, #4
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	68f9      	ldr	r1, [r7, #12]
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f002 f8c2 	bl	8002fb8 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000013c 	.word	0x2000013c
 8000e40:	20000010 	.word	0x20000010
 8000e44:	2000013d 	.word	0x2000013d
 8000e48:	20000040 	.word	0x20000040

08000e4c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	if(first)
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00b      	beq.n	8000e76 <HAL_I2C_SlaveRxCpltCallback+0x2a>
	{
		first = 0;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
		Select_Setting(&NowSettings, &DefaultSettings);
 8000e64:	4917      	ldr	r1, [pc, #92]	; (8000ec4 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000e66:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8000e68:	f7ff fef2 	bl	8000c50 <Select_Setting>
		DefaultSettings.WriteToMemory = 0;
 8000e6c:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8000e74:	e006      	b.n	8000e84 <HAL_I2C_SlaveRxCpltCallback+0x38>
	}
	else
	{
		offset++;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8000e82:	701a      	strb	r2, [r3, #0]
	}
	uint8_t* addres = (offset < sizeof(MemoryMap)) ? &ram[offset] : (uint8_t *)&MOC;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b2f      	cmp	r3, #47	; 0x2f
 8000e8c:	d806      	bhi.n	8000e9c <HAL_I2C_SlaveRxCpltCallback+0x50>
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000e98:	4413      	add	r3, r2
 8000e9a:	e000      	b.n	8000e9e <HAL_I2C_SlaveRxCpltCallback+0x52>
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_I2C_SlaveRxCpltCallback+0x84>)
 8000e9e:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Slave_Seq_Receive_IT(hi2c, &ram[offset], 1, I2C_NEXT_FRAME);
 8000ea0:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8000eaa:	18d1      	adds	r1, r2, r3
 8000eac:	2304      	movs	r3, #4
 8000eae:	2201      	movs	r2, #1
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f002 f8f3 	bl	800309c <HAL_I2C_Slave_Seq_Receive_IT>
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000040 	.word	0x20000040
 8000ec4:	20000010 	.word	0x20000010
 8000ec8:	200000b8 	.word	0x200000b8
 8000ecc:	2000013c 	.word	0x2000013c
 8000ed0:	2000013d 	.word	0x2000013d

08000ed4 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	offset++;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000ee8:	701a      	strb	r2, [r3, #0]
	uint8_t* addres = (offset < sizeof(MemoryMap)) ? &ram[offset] : (uint8_t *)&MOC;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b2f      	cmp	r3, #47	; 0x2f
 8000ef2:	d806      	bhi.n	8000f02 <HAL_I2C_SlaveTxCpltCallback+0x2e>
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 8000efe:	4413      	add	r3, r2
 8000f00:	e000      	b.n	8000f04 <HAL_I2C_SlaveTxCpltCallback+0x30>
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_I2C_SlaveTxCpltCallback+0x58>)
 8000f04:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &ram[offset], 1, I2C_NEXT_FRAME);
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_I2C_SlaveTxCpltCallback+0x54>)
 8000f10:	18d1      	adds	r1, r2, r3
 8000f12:	2304      	movs	r3, #4
 8000f14:	2201      	movs	r2, #1
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f002 f84e 	bl	8002fb8 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	2000013c 	.word	0x2000013c
 8000f28:	20000010 	.word	0x20000010
 8000f2c:	2000013d 	.word	0x2000013d

08000f30 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	if( HAL_I2C_GetError(hi2c)==HAL_I2C_ERROR_AF)
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f002 fb9a 	bl	8003672 <HAL_I2C_GetError>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d168      	bne.n	8001016 <HAL_I2C_ErrorCallback+0xe6>
	{
		offset--;
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <HAL_I2C_ErrorCallback+0xf0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b34      	ldr	r3, [pc, #208]	; (8001020 <HAL_I2C_ErrorCallback+0xf0>)
 8000f50:	701a      	strb	r2, [r3, #0]
		DefaultSettings.Current_F_ChannelSpeed = NowSettings.Current_F_ChannelSpeed;
 8000f52:	4b34      	ldr	r3, [pc, #208]	; (8001024 <HAL_I2C_ErrorCallback+0xf4>)
 8000f54:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000f58:	4b33      	ldr	r3, [pc, #204]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000f5a:	80da      	strh	r2, [r3, #6]
		DefaultSettings.Current_S_ChannelSpeed = NowSettings.Current_S_ChannelSpeed;
 8000f5c:	4b31      	ldr	r3, [pc, #196]	; (8001024 <HAL_I2C_ErrorCallback+0xf4>)
 8000f5e:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8000f62:	4b31      	ldr	r3, [pc, #196]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000f64:	835a      	strh	r2, [r3, #26]
#if CanWriteMemoryFromI2C
		uint8_t writeToMemory = DefaultSettings.WriteToMemory != 0;
 8000f66:	4b30      	ldr	r3, [pc, #192]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000f68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	bf14      	ite	ne
 8000f70:	2301      	movne	r3, #1
 8000f72:	2300      	moveq	r3, #0
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	73fb      	strb	r3, [r7, #15]
#endif
		DefaultSettings.WriteToMemory = 0;
 8000f78:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		if (DefaultSettings.F_D != NowSettings.F_D || DefaultSettings.F_I != NowSettings.F_I)
 8000f80:	4b29      	ldr	r3, [pc, #164]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	4a27      	ldr	r2, [pc, #156]	; (8001024 <HAL_I2C_ErrorCallback+0xf4>)
 8000f86:	6952      	ldr	r2, [r2, #20]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fae4 	bl	8000558 <__aeabi_fcmpeq>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00a      	beq.n	8000fac <HAL_I2C_ErrorCallback+0x7c>
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	4a22      	ldr	r2, [pc, #136]	; (8001024 <HAL_I2C_ErrorCallback+0xf4>)
 8000f9c:	6912      	ldr	r2, [r2, #16]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fad9 	bl	8000558 <__aeabi_fcmpeq>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <HAL_I2C_ErrorCallback+0x82>
		{
			Clear_Chanel(0);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fe29 	bl	8000c04 <Clear_Chanel>
		}
		if (DefaultSettings.S_D != NowSettings.S_D || DefaultSettings.S_I != NowSettings.S_I)
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb6:	4a1b      	ldr	r2, [pc, #108]	; (8001024 <HAL_I2C_ErrorCallback+0xf4>)
 8000fb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000fba:	4611      	mov	r1, r2
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff facb 	bl	8000558 <__aeabi_fcmpeq>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d00a      	beq.n	8000fde <HAL_I2C_ErrorCallback+0xae>
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	4a15      	ldr	r2, [pc, #84]	; (8001024 <HAL_I2C_ErrorCallback+0xf4>)
 8000fce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fd0:	4611      	mov	r1, r2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fac0 	bl	8000558 <__aeabi_fcmpeq>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <HAL_I2C_ErrorCallback+0xb4>
		{
			Clear_Chanel(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff fe10 	bl	8000c04 <Clear_Chanel>
		}
		Select_Setting(&DefaultSettings, &NowSettings);
 8000fe4:	490f      	ldr	r1, [pc, #60]	; (8001024 <HAL_I2C_ErrorCallback+0xf4>)
 8000fe6:	4810      	ldr	r0, [pc, #64]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000fe8:	f7ff fe32 	bl	8000c50 <Select_Setting>
#if CanWriteMemoryFromI2C
		if(writeToMemory)
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d011      	beq.n	8001016 <HAL_I2C_ErrorCallback+0xe6>
		{
			DefaultSettings.Need_F_ChannelSpeed = 0;
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	809a      	strh	r2, [r3, #4]
			DefaultSettings.Need_S_ChannelSpeed = 0;
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	831a      	strh	r2, [r3, #24]
			DefaultSettings.Current_F_ChannelSpeed = 0;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8001000:	2200      	movs	r2, #0
 8001002:	80da      	strh	r2, [r3, #6]
			DefaultSettings.Current_S_ChannelSpeed = 0;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 8001006:	2200      	movs	r2, #0
 8001008:	835a      	strh	r2, [r3, #26]
			Select_Setting(&DefaultSettings, (MemoryMap *)&EEPROM_SETTING);
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <HAL_I2C_ErrorCallback+0xfc>)
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <HAL_I2C_ErrorCallback+0xf8>)
 800100e:	f7ff fe1f 	bl	8000c50 <Select_Setting>
			HAL_NVIC_SystemReset();
 8001012:	f001 fa3c 	bl	800248e <HAL_NVIC_SystemReset>
#endif
	}
	else
	{
	}
}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2000013c 	.word	0x2000013c
 8001024:	200000b8 	.word	0x200000b8
 8001028:	20000010 	.word	0x20000010
 800102c:	0800fc00 	.word	0x0800fc00

08001030 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
	...

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104a:	f000 fe71 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104e:	f000 f875 	bl	800113c <SystemClock_Config>
   * #endif
   */
  /* USER CODE END SysInit */
#endif
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001052:	f7ff fbb9 	bl	80007c8 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001056:	f000 fb83 	bl	8001760 <MX_TIM4_Init>
  MX_TIM3_Init();
 800105a:	f000 fb15 	bl	8001688 <MX_TIM3_Init>
  MX_TIM1_Init();
 800105e:	f000 fa37 	bl	80014d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001062:	f000 fab9 	bl	80015d8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001066:	f7ff facf 	bl	8000608 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  Memory_Manage();
 800106a:	f000 f919 	bl	80012a0 <Memory_Manage>
  uint8_t addr = Select_Address();
 800106e:	f000 f927 	bl	80012c0 <Select_Address>
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]

  MX_I2C1_Init(addr);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fe03 	bl	8000c84 <MX_I2C1_Init>

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800107e:	2100      	movs	r1, #0
 8001080:	4827      	ldr	r0, [pc, #156]	; (8001120 <main+0xdc>)
 8001082:	f004 fb55 	bl	8005730 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001086:	2104      	movs	r1, #4
 8001088:	4825      	ldr	r0, [pc, #148]	; (8001120 <main+0xdc>)
 800108a:	f004 fb51 	bl	8005730 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800108e:	2100      	movs	r1, #0
 8001090:	4824      	ldr	r0, [pc, #144]	; (8001124 <main+0xe0>)
 8001092:	f004 fb4d 	bl	8005730 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001096:	2104      	movs	r1, #4
 8001098:	4822      	ldr	r0, [pc, #136]	; (8001124 <main+0xe0>)
 800109a:	f004 fb49 	bl	8005730 <HAL_TIM_IC_Start_IT>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800109e:	2100      	movs	r1, #0
 80010a0:	4821      	ldr	r0, [pc, #132]	; (8001128 <main+0xe4>)
 80010a2:	f004 fa53 	bl	800554c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80010a6:	4b20      	ldr	r3, [pc, #128]	; (8001128 <main+0xe4>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2200      	movs	r2, #0
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010ae:	2100      	movs	r1, #0
 80010b0:	481e      	ldr	r0, [pc, #120]	; (800112c <main+0xe8>)
 80010b2:	f004 fa4b 	bl	800554c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <main+0xe8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34

  Set_Configuration(NowSettings.Config);
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <main+0xec>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fbee 	bl	80008a4 <Set_Configuration>

  Calibration_Motor();
 80010c8:	f000 f894 	bl	80011f4 <Calibration_Motor>

  NowSettings.Need_S_ChannelSpeed = 0;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <main+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	831a      	strh	r2, [r3, #24]
  NowSettings.Need_F_ChannelSpeed = 0;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <main+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	809a      	strh	r2, [r3, #4]

  uint8_t test = !HAL_GPIO_ReadPin(TEST1_GPIO_Port, TEST1_Pin);
 80010d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010dc:	4815      	ldr	r0, [pc, #84]	; (8001134 <main+0xf0>)
 80010de:	f001 fdf7 	bl	8002cd0 <HAL_GPIO_ReadPin>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	71bb      	strb	r3, [r7, #6]
  if (!test)
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10c      	bne.n	8001110 <main+0xcc>
  {
	  HAL_I2C_EnableListen_IT(&hi2c1);
 80010f6:	4810      	ldr	r0, [pc, #64]	; (8001138 <main+0xf4>)
 80010f8:	f002 f842 	bl	8003180 <HAL_I2C_EnableListen_IT>
	  HAL_Delay(500);
 80010fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001100:	f000 fe78 	bl	8001df4 <HAL_Delay>
	  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110a:	480a      	ldr	r0, [pc, #40]	; (8001134 <main+0xf0>)
 800110c:	f001 fdf7 	bl	8002cfe <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Test_Process(test);
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f90e 	bl	8001334 <Test_Process>
	  Motor_Process();
 8001118:	f000 f8f4 	bl	8001304 <Motor_Process>
	  Test_Process(test);
 800111c:	e7f8      	b.n	8001110 <main+0xcc>
 800111e:	bf00      	nop
 8001120:	200001d8 	.word	0x200001d8
 8001124:	20000220 	.word	0x20000220
 8001128:	20000148 	.word	0x20000148
 800112c:	20000190 	.word	0x20000190
 8001130:	200000b8 	.word	0x200000b8
 8001134:	40010c00 	.word	0x40010c00
 8001138:	200000e8 	.word	0x200000e8

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	; 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001146:	2228      	movs	r2, #40	; 0x28
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f005 fac0 	bl	80066d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116c:	2301      	movs	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001174:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117a:	2301      	movs	r3, #1
 800117c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117e:	2302      	movs	r3, #2
 8001180:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001188:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800118c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001192:	4618      	mov	r0, r3
 8001194:	f003 fcce 	bl	8004b34 <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800119e:	f000 f909 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2102      	movs	r1, #2
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 ff3a 	bl	8005038 <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011ca:	f000 f8f3 	bl	80013b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011ce:	2302      	movs	r3, #2
 80011d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011d6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 f8b0 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011e6:	f000 f8e5 	bl	80013b4 <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3750      	adds	r7, #80	; 0x50
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <Calibration_Motor>:

/* USER CODE BEGIN 4 */
void Calibration_Motor()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
	if (NowSettings.F_Min_Force != 0)
 80011fa:	4b27      	ldr	r3, [pc, #156]	; (8001298 <Calibration_Motor+0xa4>)
 80011fc:	895b      	ldrh	r3, [r3, #10]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d145      	bne.n	800128e <Calibration_Motor+0x9a>
	{
		return;
	}
	int16_t nowPWM = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	80fb      	strh	r3, [r7, #6]

	while(NowSettings.Current_F_ChannelSpeed == 0)
 8001206:	e00c      	b.n	8001222 <Calibration_Motor+0x2e>
	{
		Set_Channel_Raw(0, nowPWM);
 8001208:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120c:	4619      	mov	r1, r3
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fb80 	bl	8000914 <Set_Channel_Raw>
		nowPWM += 10;
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	330a      	adds	r3, #10
 8001218:	b29b      	uxth	r3, r3
 800121a:	80fb      	strh	r3, [r7, #6]
		HAL_Delay(50);
 800121c:	2032      	movs	r0, #50	; 0x32
 800121e:	f000 fde9 	bl	8001df4 <HAL_Delay>
	while(NowSettings.Current_F_ChannelSpeed == 0)
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <Calibration_Motor+0xa4>)
 8001224:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0ed      	beq.n	8001208 <Calibration_Motor+0x14>
	}
	NowSettings.F_Min_Force = nowPWM >> 1;
 800122c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001230:	105b      	asrs	r3, r3, #1
 8001232:	b21b      	sxth	r3, r3
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <Calibration_Motor+0xa4>)
 8001238:	815a      	strh	r2, [r3, #10]
	if (NowSettings.Current_F_ChannelSpeed < 0)
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <Calibration_Motor+0xa4>)
 800123c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001240:	2b00      	cmp	r3, #0
 8001242:	da06      	bge.n	8001252 <Calibration_Motor+0x5e>
	{
		NowSettings.Config ^= 1 << 5;
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <Calibration_Motor+0xa4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	f083 0320 	eor.w	r3, r3, #32
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <Calibration_Motor+0xa4>)
 8001250:	701a      	strb	r2, [r3, #0]
	}
	Select_Setting(&NowSettings, (MemoryMap *)&EEPROM_SETTING);
 8001252:	4912      	ldr	r1, [pc, #72]	; (800129c <Calibration_Motor+0xa8>)
 8001254:	4810      	ldr	r0, [pc, #64]	; (8001298 <Calibration_Motor+0xa4>)
 8001256:	f7ff fcfb 	bl	8000c50 <Select_Setting>
	uint8_t config = NowSettings.Config;
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <Calibration_Motor+0xa4>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	717b      	strb	r3, [r7, #5]
	NowSettings.Config |= 0x08;
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <Calibration_Motor+0xa4>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <Calibration_Motor+0xa4>)
 800126c:	701a      	strb	r2, [r3, #0]
	while(NowSettings.Current_F_ChannelSpeed != 0)
 800126e:	e005      	b.n	800127c <Calibration_Motor+0x88>
	{
		Calculate_Channel(0);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fba7 	bl	80009c4 <Calculate_Channel>
		HAL_Delay(100);
 8001276:	2064      	movs	r0, #100	; 0x64
 8001278:	f000 fdbc 	bl	8001df4 <HAL_Delay>
	while(NowSettings.Current_F_ChannelSpeed != 0)
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <Calibration_Motor+0xa4>)
 800127e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f4      	bne.n	8001270 <Calibration_Motor+0x7c>
	}
	NowSettings.Config = config;
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <Calibration_Motor+0xa4>)
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	7013      	strb	r3, [r2, #0]
 800128c:	e000      	b.n	8001290 <Calibration_Motor+0x9c>
		return;
 800128e:	bf00      	nop
}
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200000b8 	.word	0x200000b8
 800129c:	0800fc00 	.word	0x0800fc00

080012a0 <Memory_Manage>:

void Memory_Manage()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
#if SetWriteCount
	NowSettings.WriteToMemory = SetWriteCount;
#endif
	Select_Setting((MemoryMap *)&NowSettings, (MemoryMap *)&EEPROM_SETTING);
#endif
	Select_Setting((MemoryMap *)&EEPROM_SETTING, (MemoryMap *)&NowSettings);
 80012a4:	4904      	ldr	r1, [pc, #16]	; (80012b8 <Memory_Manage+0x18>)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <Memory_Manage+0x1c>)
 80012a8:	f7ff fcd2 	bl	8000c50 <Select_Setting>
	HAL_Delay(10);
 80012ac:	200a      	movs	r0, #10
 80012ae:	f000 fda1 	bl	8001df4 <HAL_Delay>
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200000b8 	.word	0x200000b8
 80012bc:	0800fc00 	.word	0x0800fc00

080012c0 <Select_Address>:

uint8_t Select_Address()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	uint8_t result = NowSettings.BaseAddress;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <Select_Address+0x3c>)
 80012c8:	785b      	ldrb	r3, [r3, #1]
 80012ca:	71fb      	strb	r3, [r7, #7]
	result += HAL_GPIO_ReadPin(ADDR0_GPIO_Port, ADDR0_Pin);
 80012cc:	2110      	movs	r1, #16
 80012ce:	480c      	ldr	r0, [pc, #48]	; (8001300 <Select_Address+0x40>)
 80012d0:	f001 fcfe 	bl	8002cd0 <HAL_GPIO_ReadPin>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4413      	add	r3, r2
 80012dc:	71fb      	strb	r3, [r7, #7]
	result += HAL_GPIO_ReadPin(ADDR1_GPIO_Port, ADDR1_Pin) << 1;
 80012de:	2120      	movs	r1, #32
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <Select_Address+0x40>)
 80012e2:	f001 fcf5 	bl	8002cd0 <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4413      	add	r3, r2
 80012f0:	71fb      	strb	r3, [r7, #7]
	return result;
 80012f2:	79fb      	ldrb	r3, [r7, #7]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200000b8 	.word	0x200000b8
 8001300:	40010c00 	.word	0x40010c00

08001304 <Motor_Process>:

void Motor_Process(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	static uint32_t lastTime = 100;
	if (lastTime < HAL_GetTick())
 8001308:	f000 fd6a 	bl	8001de0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <Motor_Process+0x2c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d90a      	bls.n	800132c <Motor_Process+0x28>
	{
		Calculate_Channel(0);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff fb54 	bl	80009c4 <Calculate_Channel>
		Calculate_Channel(1);
 800131c:	2001      	movs	r0, #1
 800131e:	f7ff fb51 	bl	80009c4 <Calculate_Channel>
		lastTime += 100;
 8001322:	4b03      	ldr	r3, [pc, #12]	; (8001330 <Motor_Process+0x2c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3364      	adds	r3, #100	; 0x64
 8001328:	4a01      	ldr	r2, [pc, #4]	; (8001330 <Motor_Process+0x2c>)
 800132a:	6013      	str	r3, [r2, #0]
	}
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000044 	.word	0x20000044

08001334 <Test_Process>:
void Test_Process(uint8_t test)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
	if (!test)
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d02c      	beq.n	800139e <Test_Process+0x6a>
	{
		return;
	}
	static uint32_t lastTime = 0;
	static int16_t lastValue = 0;
	if (lastTime < HAL_GetTick())
 8001344:	f000 fd4c 	bl	8001de0 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <Test_Process+0x74>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d926      	bls.n	80013a0 <Test_Process+0x6c>
	{
		lastValue += 500;
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <Test_Process+0x78>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	b29b      	uxth	r3, r3
 800135a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800135e:	b29b      	uxth	r3, r3
 8001360:	b21a      	sxth	r2, r3
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <Test_Process+0x78>)
 8001364:	801a      	strh	r2, [r3, #0]
		if (lastValue > NowSettings.F_MaxAbsSpeed)
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <Test_Process+0x78>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	461a      	mov	r2, r3
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <Test_Process+0x7c>)
 8001370:	891b      	ldrh	r3, [r3, #8]
 8001372:	429a      	cmp	r2, r3
 8001374:	dd06      	ble.n	8001384 <Test_Process+0x50>
		{
			lastValue = -NowSettings.F_MaxAbsSpeed;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <Test_Process+0x7c>)
 8001378:	891b      	ldrh	r3, [r3, #8]
 800137a:	425b      	negs	r3, r3
 800137c:	b29b      	uxth	r3, r3
 800137e:	b21a      	sxth	r2, r3
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <Test_Process+0x78>)
 8001382:	801a      	strh	r2, [r3, #0]
		}
		NowSettings.Need_F_ChannelSpeed = lastValue;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <Test_Process+0x78>)
 8001386:	f9b3 2000 	ldrsh.w	r2, [r3]
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <Test_Process+0x7c>)
 800138c:	809a      	strh	r2, [r3, #4]
		lastTime += 5000;
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <Test_Process+0x74>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001396:	3308      	adds	r3, #8
 8001398:	4a03      	ldr	r2, [pc, #12]	; (80013a8 <Test_Process+0x74>)
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e000      	b.n	80013a0 <Test_Process+0x6c>
		return;
 800139e:	bf00      	nop
	}
}
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000140 	.word	0x20000140
 80013ac:	20000144 	.word	0x20000144
 80013b0:	200000b8 	.word	0x200000b8

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	e7fe      	b.n	80013bc <Error_Handler+0x8>
	...

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_MspInit+0x5c>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a14      	ldr	r2, [pc, #80]	; (800141c <HAL_MspInit+0x5c>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_MspInit+0x5c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_MspInit+0x5c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a0e      	ldr	r2, [pc, #56]	; (800141c <HAL_MspInit+0x5c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_MspInit+0x5c>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_MspInit+0x60>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_MspInit+0x60>)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146a:	f000 fca7 	bl	8001dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <TIM3_IRQHandler+0x10>)
 800147a:	f004 fa5f 	bl	800593c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200001d8 	.word	0x200001d8

08001488 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <TIM4_IRQHandler+0x10>)
 800148e:	f004 fa55 	bl	800593c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000220 	.word	0x20000220

0800149c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <I2C1_EV_IRQHandler+0x10>)
 80014a2:	f001 fea2 	bl	80031ea <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000e8 	.word	0x200000e8

080014b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <I2C1_ER_IRQHandler+0x10>)
 80014b6:	f002 f809 	bl	80034cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200000e8 	.word	0x200000e8

080014c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2220      	movs	r2, #32
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f005 f8e8 	bl	80066d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001500:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <MX_TIM1_Init+0x100>)
 8001502:	4a34      	ldr	r2, [pc, #208]	; (80015d4 <MX_TIM1_Init+0x104>)
 8001504:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001506:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <MX_TIM1_Init+0x100>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <MX_TIM1_Init+0x100>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001512:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <MX_TIM1_Init+0x100>)
 8001514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001518:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <MX_TIM1_Init+0x100>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001520:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_TIM1_Init+0x100>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <MX_TIM1_Init+0x100>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800152c:	4828      	ldr	r0, [pc, #160]	; (80015d0 <MX_TIM1_Init+0x100>)
 800152e:	f003 ffbd 	bl	80054ac <HAL_TIM_PWM_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001538:	f7ff ff3c 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153c:	2300      	movs	r3, #0
 800153e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001544:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001548:	4619      	mov	r1, r3
 800154a:	4821      	ldr	r0, [pc, #132]	; (80015d0 <MX_TIM1_Init+0x100>)
 800154c:	f004 ffcc 	bl	80064e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001556:	f7ff ff2d 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800155a:	2360      	movs	r3, #96	; 0x60
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001566:	2300      	movs	r3, #0
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	4814      	ldr	r0, [pc, #80]	; (80015d0 <MX_TIM1_Init+0x100>)
 8001580:	f004 fb78 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800158a:	f7ff ff13 	bl	80013b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4807      	ldr	r0, [pc, #28]	; (80015d0 <MX_TIM1_Init+0x100>)
 80015b2:	f004 fff7 	bl	80065a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80015bc:	f7ff fefa 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <MX_TIM1_Init+0x100>)
 80015c2:	f000 f9e5 	bl	8001990 <HAL_TIM_MspPostInit>

}
 80015c6:	bf00      	nop
 80015c8:	3748      	adds	r7, #72	; 0x48
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000148 	.word	0x20000148
 80015d4:	40012c00 	.word	0x40012c00

080015d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
 80015f6:	615a      	str	r2, [r3, #20]
 80015f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <MX_TIM2_Init+0xac>)
 80015fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001600:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_TIM2_Init+0xac>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_TIM2_Init+0xac>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_TIM2_Init+0xac>)
 8001610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001614:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_TIM2_Init+0xac>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_TIM2_Init+0xac>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001622:	4818      	ldr	r0, [pc, #96]	; (8001684 <MX_TIM2_Init+0xac>)
 8001624:	f003 ff42 	bl	80054ac <HAL_TIM_PWM_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800162e:	f7ff fec1 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800163a:	f107 0320 	add.w	r3, r7, #32
 800163e:	4619      	mov	r1, r3
 8001640:	4810      	ldr	r0, [pc, #64]	; (8001684 <MX_TIM2_Init+0xac>)
 8001642:	f004 ff51 	bl	80064e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800164c:	f7ff feb2 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001650:	2360      	movs	r3, #96	; 0x60
 8001652:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	4619      	mov	r1, r3
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <MX_TIM2_Init+0xac>)
 8001668:	f004 fb04 	bl	8005c74 <HAL_TIM_PWM_ConfigChannel>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001672:	f7ff fe9f 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001676:	4803      	ldr	r0, [pc, #12]	; (8001684 <MX_TIM2_Init+0xac>)
 8001678:	f000 f98a 	bl	8001990 <HAL_TIM_MspPostInit>

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000190 	.word	0x20000190

08001688 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001698:	463b      	mov	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a4:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <MX_TIM3_Init+0xd0>)
 80016a6:	4a2d      	ldr	r2, [pc, #180]	; (800175c <MX_TIM3_Init+0xd4>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <MX_TIM3_Init+0xd0>)
 80016ac:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80016b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b29      	ldr	r3, [pc, #164]	; (8001758 <MX_TIM3_Init+0xd0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <MX_TIM3_Init+0xd0>)
 80016ba:	f64e 2260 	movw	r2, #60000	; 0xea60
 80016be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_TIM3_Init+0xd0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <MX_TIM3_Init+0xd0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016cc:	4822      	ldr	r0, [pc, #136]	; (8001758 <MX_TIM3_Init+0xd0>)
 80016ce:	f003 ffdf 	bl	8005690 <HAL_TIM_IC_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016d8:	f7ff fe6c 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	4619      	mov	r1, r3
 80016ea:	481b      	ldr	r0, [pc, #108]	; (8001758 <MX_TIM3_Init+0xd0>)
 80016ec:	f004 fefc 	bl	80064e8 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80016f6:	f7ff fe5d 	bl	80013b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016fa:	2300      	movs	r3, #0
 80016fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016fe:	2301      	movs	r3, #1
 8001700:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4811      	ldr	r0, [pc, #68]	; (8001758 <MX_TIM3_Init+0xd0>)
 8001712:	f004 fa1b 	bl	8005b4c <HAL_TIM_IC_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800171c:	f7ff fe4a 	bl	80013b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001720:	2302      	movs	r3, #2
 8001722:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001724:	2302      	movs	r3, #2
 8001726:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	2204      	movs	r2, #4
 800172c:	4619      	mov	r1, r3
 800172e:	480a      	ldr	r0, [pc, #40]	; (8001758 <MX_TIM3_Init+0xd0>)
 8001730:	f004 fa0c 	bl	8005b4c <HAL_TIM_IC_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800173a:	f7ff fe3b 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_TIM3_Init+0xd0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <MX_TIM3_Init+0xd0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0201 	orr.w	r2, r2, #1
 800174c:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM3_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001d8 	.word	0x200001d8
 800175c:	40000400 	.word	0x40000400

08001760 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	f107 0310 	add.w	r3, r7, #16
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001770:	463b      	mov	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800177c:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <MX_TIM4_Init+0xd0>)
 800177e:	4a2d      	ldr	r2, [pc, #180]	; (8001834 <MX_TIM4_Init+0xd4>)
 8001780:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35999;
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <MX_TIM4_Init+0xd0>)
 8001784:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001788:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178a:	4b29      	ldr	r3, [pc, #164]	; (8001830 <MX_TIM4_Init+0xd0>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_TIM4_Init+0xd0>)
 8001792:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001796:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001798:	4b25      	ldr	r3, [pc, #148]	; (8001830 <MX_TIM4_Init+0xd0>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <MX_TIM4_Init+0xd0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80017a4:	4822      	ldr	r0, [pc, #136]	; (8001830 <MX_TIM4_Init+0xd0>)
 80017a6:	f003 ff73 	bl	8005690 <HAL_TIM_IC_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80017b0:	f7ff fe00 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	4619      	mov	r1, r3
 80017c2:	481b      	ldr	r0, [pc, #108]	; (8001830 <MX_TIM4_Init+0xd0>)
 80017c4:	f004 fe90 	bl	80064e8 <HAL_TIMEx_MasterConfigSynchronization>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80017ce:	f7ff fdf1 	bl	80013b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017d6:	2301      	movs	r3, #1
 80017d8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017e2:	463b      	mov	r3, r7
 80017e4:	2200      	movs	r2, #0
 80017e6:	4619      	mov	r1, r3
 80017e8:	4811      	ldr	r0, [pc, #68]	; (8001830 <MX_TIM4_Init+0xd0>)
 80017ea:	f004 f9af 	bl	8005b4c <HAL_TIM_IC_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80017f4:	f7ff fdde 	bl	80013b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017f8:	2302      	movs	r3, #2
 80017fa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80017fc:	2302      	movs	r3, #2
 80017fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001800:	463b      	mov	r3, r7
 8001802:	2204      	movs	r2, #4
 8001804:	4619      	mov	r1, r3
 8001806:	480a      	ldr	r0, [pc, #40]	; (8001830 <MX_TIM4_Init+0xd0>)
 8001808:	f004 f9a0 	bl	8005b4c <HAL_TIM_IC_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8001812:	f7ff fdcf 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_TIM4_Init+0xd0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <MX_TIM4_Init+0xd0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 0201 	orr.w	r2, r2, #1
 8001824:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM4_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000220 	.word	0x20000220
 8001834:	40000800 	.word	0x40000800

08001838 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a12      	ldr	r2, [pc, #72]	; (8001890 <HAL_TIM_PWM_MspInit+0x58>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10c      	bne.n	8001864 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 8001850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001854:	6193      	str	r3, [r2, #24]
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001862:	e010      	b.n	8001886 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186c:	d10b      	bne.n	8001886 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_TIM_PWM_MspInit+0x5c>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM3)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a32      	ldr	r2, [pc, #200]	; (800197c <HAL_TIM_IC_MspInit+0xe4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d12c      	bne.n	8001912 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018b8:	4b31      	ldr	r3, [pc, #196]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	4a30      	ldr	r2, [pc, #192]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	61d3      	str	r3, [r2, #28]
 80018c4:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a2a      	ldr	r2, [pc, #168]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HALL2_Pin;
 80018e8:	2340      	movs	r3, #64	; 0x40
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HALL2_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	4619      	mov	r1, r3
 80018fa:	4822      	ldr	r0, [pc, #136]	; (8001984 <HAL_TIM_IC_MspInit+0xec>)
 80018fc:	f001 f864 	bl	80029c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001900:	2200      	movs	r2, #0
 8001902:	2100      	movs	r1, #0
 8001904:	201d      	movs	r0, #29
 8001906:	f000 fd98 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800190a:	201d      	movs	r0, #29
 800190c:	f000 fdb1 	bl	8002472 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001910:	e030      	b.n	8001974 <HAL_TIM_IC_MspInit+0xdc>
  else if(tim_icHandle->Instance==TIM4)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_TIM_IC_MspInit+0xf0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d12b      	bne.n	8001974 <HAL_TIM_IC_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	61d3      	str	r3, [r2, #28]
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 800193a:	f043 0308 	orr.w	r3, r3, #8
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_TIM_IC_MspInit+0xe8>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL1_Pin;
 800194c:	2340      	movs	r3, #64	; 0x40
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HALL1_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	4619      	mov	r1, r3
 800195e:	480b      	ldr	r0, [pc, #44]	; (800198c <HAL_TIM_IC_MspInit+0xf4>)
 8001960:	f001 f832 	bl	80029c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2100      	movs	r1, #0
 8001968:	201e      	movs	r0, #30
 800196a:	f000 fd66 	bl	800243a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800196e:	201e      	movs	r0, #30
 8001970:	f000 fd7f 	bl	8002472 <HAL_NVIC_EnableIRQ>
}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40000400 	.word	0x40000400
 8001980:	40021000 	.word	0x40021000
 8001984:	40010800 	.word	0x40010800
 8001988:	40000800 	.word	0x40000800
 800198c:	40010c00 	.word	0x40010c00

08001990 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0310 	add.w	r3, r7, #16
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <HAL_TIM_MspPostInit+0x98>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d119      	bne.n	80019e4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_TIM_MspPostInit+0x9c>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_TIM_MspPostInit+0x9c>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <HAL_TIM_MspPostInit+0x9c>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_COIL_Pin;
 80019c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_COIL_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 0310 	add.w	r3, r7, #16
 80019da:	4619      	mov	r1, r3
 80019dc:	4814      	ldr	r0, [pc, #80]	; (8001a30 <HAL_TIM_MspPostInit+0xa0>)
 80019de:	f000 fff3 	bl	80029c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019e2:	e01c      	b.n	8001a1e <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ec:	d117      	bne.n	8001a1e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_TIM_MspPostInit+0x9c>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <HAL_TIM_MspPostInit+0x9c>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_TIM_MspPostInit+0x9c>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin;
 8001a06:	2301      	movs	r3, #1
 8001a08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0310 	add.w	r3, r7, #16
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_TIM_MspPostInit+0xa0>)
 8001a1a:	f000 ffd5 	bl	80029c8 <HAL_GPIO_Init>
}
 8001a1e:	bf00      	nop
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40012c00 	.word	0x40012c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010800 	.word	0x40010800

08001a34 <HAL_TIM_IC_CaptureCallback>:

volatile int8_t nowState = 0;
volatile uint32_t averageTime = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a91      	ldr	r2, [pc, #580]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d175      	bne.n	8001b32 <HAL_TIM_IC_CaptureCallback+0xfe>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	7f1b      	ldrb	r3, [r3, #28]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d134      	bne.n	8001ab8 <HAL_TIM_IC_CaptureCallback+0x84>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 8001a56:	4b8d      	ldr	r3, [pc, #564]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d012      	beq.n	8001a88 <HAL_TIM_IC_CaptureCallback+0x54>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d124      	bne.n	8001ab0 <HAL_TIM_IC_CaptureCallback+0x7c>
			{
				case 0:
					nowState++;
 8001a66:	4b89      	ldr	r3, [pc, #548]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	b25b      	sxtb	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	b25a      	sxtb	r2, r3
 8001a74:	4b85      	ldr	r3, [pc, #532]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001a76:	701a      	strb	r2, [r3, #0]
					averageTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a78:	2100      	movs	r1, #0
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f004 f9b8 	bl	8005df0 <HAL_TIM_ReadCapturedValue>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4a83      	ldr	r2, [pc, #524]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001a84:	6013      	str	r3, [r2, #0]
					break;
 8001a86:	e018      	b.n	8001aba <HAL_TIM_IC_CaptureCallback+0x86>
				case -1:
					nowState--;
 8001a88:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b25b      	sxtb	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	b25a      	sxtb	r2, r3
 8001a96:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001a98:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f004 f9a7 	bl	8005df0 <HAL_TIM_ReadCapturedValue>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b7a      	ldr	r3, [pc, #488]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a79      	ldr	r2, [pc, #484]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001aac:	6013      	str	r3, [r2, #0]
					break;
 8001aae:	e004      	b.n	8001aba <HAL_TIM_IC_CaptureCallback+0x86>
				default:
					nowState = 0;
 8001ab0:	4b76      	ldr	r3, [pc, #472]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
					break;
 8001ab6:	e000      	b.n	8001aba <HAL_TIM_IC_CaptureCallback+0x86>
			}
		}
 8001ab8:	bf00      	nop
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7f1b      	ldrb	r3, [r3, #28]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d137      	bne.n	8001b32 <HAL_TIM_IC_CaptureCallback+0xfe>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 8001aca:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b25b      	sxtb	r3, r3
 8001ad0:	f113 0f03 	cmn.w	r3, #3
 8001ad4:	d015      	beq.n	8001b02 <HAL_TIM_IC_CaptureCallback+0xce>
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d127      	bne.n	8001b2a <HAL_TIM_IC_CaptureCallback+0xf6>
			{
				case 2:
					nowState++;
 8001ada:	4b6c      	ldr	r3, [pc, #432]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	b25a      	sxtb	r2, r3
 8001ae8:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001aea:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001aec:	2104      	movs	r1, #4
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f004 f97e 	bl	8005df0 <HAL_TIM_ReadCapturedValue>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b66      	ldr	r3, [pc, #408]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a64      	ldr	r2, [pc, #400]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001afe:	6013      	str	r3, [r2, #0]
					break;
 8001b00:	e018      	b.n	8001b34 <HAL_TIM_IC_CaptureCallback+0x100>
				case -3:
					nowState--;
 8001b02:	4b62      	ldr	r3, [pc, #392]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	b25a      	sxtb	r2, r3
 8001b10:	4b5e      	ldr	r3, [pc, #376]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001b12:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001b14:	2104      	movs	r1, #4
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f004 f96a 	bl	8005df0 <HAL_TIM_ReadCapturedValue>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	4a5a      	ldr	r2, [pc, #360]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001b26:	6013      	str	r3, [r2, #0]
				break;
 8001b28:	e004      	b.n	8001b34 <HAL_TIM_IC_CaptureCallback+0x100>
				default:
					nowState = 0;
 8001b2a:	4b58      	ldr	r3, [pc, #352]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
					break;
 8001b30:	e000      	b.n	8001b34 <HAL_TIM_IC_CaptureCallback+0x100>
			}
		}
 8001b32:	bf00      	nop

	}
	if (htim->Instance == TIM4)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a56      	ldr	r2, [pc, #344]	; (8001c94 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d175      	bne.n	8001c2a <HAL_TIM_IC_CaptureCallback+0x1f6>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7f1b      	ldrb	r3, [r3, #28]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d134      	bne.n	8001bb0 <HAL_TIM_IC_CaptureCallback+0x17c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 8001b4e:	4b4f      	ldr	r3, [pc, #316]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	b25b      	sxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_TIM_IC_CaptureCallback+0x12a>
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d011      	beq.n	8001b80 <HAL_TIM_IC_CaptureCallback+0x14c>
 8001b5c:	e024      	b.n	8001ba8 <HAL_TIM_IC_CaptureCallback+0x174>
			{
				case 0:
					nowState--;
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b25b      	sxtb	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	b25a      	sxtb	r2, r3
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001b6e:	701a      	strb	r2, [r3, #0]
					averageTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001b70:	2100      	movs	r1, #0
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f004 f93c 	bl	8005df0 <HAL_TIM_ReadCapturedValue>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a45      	ldr	r2, [pc, #276]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001b7c:	6013      	str	r3, [r2, #0]
					break;
 8001b7e:	e018      	b.n	8001bb2 <HAL_TIM_IC_CaptureCallback+0x17e>
				case 1:
					nowState++;
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	b25a      	sxtb	r2, r3
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001b90:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001b92:	2100      	movs	r1, #0
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f004 f92b 	bl	8005df0 <HAL_TIM_ReadCapturedValue>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b3c      	ldr	r3, [pc, #240]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a3b      	ldr	r2, [pc, #236]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001ba4:	6013      	str	r3, [r2, #0]
					break;
 8001ba6:	e004      	b.n	8001bb2 <HAL_TIM_IC_CaptureCallback+0x17e>
				default:
					nowState = 0;
 8001ba8:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
					break;
 8001bae:	e000      	b.n	8001bb2 <HAL_TIM_IC_CaptureCallback+0x17e>
			}
		}
 8001bb0:	bf00      	nop
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7f1b      	ldrb	r3, [r3, #28]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d137      	bne.n	8001c2a <HAL_TIM_IC_CaptureCallback+0x1f6>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 8001bc2:	4b32      	ldr	r3, [pc, #200]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b25b      	sxtb	r3, r3
 8001bc8:	f113 0f02 	cmn.w	r3, #2
 8001bcc:	d015      	beq.n	8001bfa <HAL_TIM_IC_CaptureCallback+0x1c6>
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d127      	bne.n	8001c22 <HAL_TIM_IC_CaptureCallback+0x1ee>
			{
				case 3:
					nowState++;
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b25b      	sxtb	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	b25a      	sxtb	r2, r3
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001be2:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001be4:	2104      	movs	r1, #4
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f004 f902 	bl	8005df0 <HAL_TIM_ReadCapturedValue>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b28      	ldr	r3, [pc, #160]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a26      	ldr	r2, [pc, #152]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001bf6:	6013      	str	r3, [r2, #0]
					break;
 8001bf8:	e018      	b.n	8001c2c <HAL_TIM_IC_CaptureCallback+0x1f8>
				case -2:
					nowState--;
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	b25a      	sxtb	r2, r3
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c0a:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f004 f8ee 	bl	8005df0 <HAL_TIM_ReadCapturedValue>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001c1e:	6013      	str	r3, [r2, #0]
				break;
 8001c20:	e004      	b.n	8001c2c <HAL_TIM_IC_CaptureCallback+0x1f8>
				default:
					nowState = 0;
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
					break;
 8001c28:	e000      	b.n	8001c2c <HAL_TIM_IC_CaptureCallback+0x1f8>
			}
		}
 8001c2a:	bf00      	nop
	}
	if (abs(nowState) == 4)
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bfb8      	it	lt
 8001c36:	425b      	neglt	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d120      	bne.n	8001c80 <HAL_TIM_IC_CaptureCallback+0x24c>
	{
		int32_t bufTime = averageTime;
 8001c3e:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]
		averageTime = 0;
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
		if (NowSettings.Config & 0x08)
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <HAL_TIM_IC_CaptureCallback+0x228>
		{
			bufTime <<= 1;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
		}
		if (nowState < 0)
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da02      	bge.n	8001c6c <HAL_TIM_IC_CaptureCallback+0x238>
		{
			bufTime = -bufTime;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	425b      	negs	r3, r3
 8001c6a:	60fb      	str	r3, [r7, #12]
		}
		nowState = 0;
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x258>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
		 * минута в тиках = 120000;
		 * ufTime = 2 * Время одного цикла (оборота);
		 * 120000 / (bufTime / 2) обороты в минуту
		 * 240000 / bufTime обороты в минуту
		 */
		NowSettings.Current_F_ChannelSpeed = 240000 / bufTime;
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_TIM_IC_CaptureCallback+0x268>)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001c7e:	80da      	strh	r2, [r3, #6]
	}
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40000400 	.word	0x40000400
 8001c8c:	20000268 	.word	0x20000268
 8001c90:	2000026c 	.word	0x2000026c
 8001c94:	40000800 	.word	0x40000800
 8001c98:	200000b8 	.word	0x200000b8
 8001c9c:	0003a980 	.word	0x0003a980

08001ca0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	if ((htim->Instance == TIM3) || (htim->Instance == TIM4))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a09      	ldr	r2, [pc, #36]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_TIM_PeriodElapsedCallback+0x1c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d105      	bne.n	8001cc8 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		NowSettings.Current_F_ChannelSpeed = 0;
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	80da      	strh	r2, [r3, #6]
		nowState = 0;
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]
	}
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40000800 	.word	0x40000800
 8001cdc:	200000b8 	.word	0x200000b8
 8001ce0:	20000268 	.word	0x20000268

08001ce4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ce6:	490d      	ldr	r1, [pc, #52]	; (8001d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	; (8001d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d0a:	f7ff fbdb 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d0e:	f004 fcad 	bl	800666c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d12:	f7ff f997 	bl	8001044 <main>
  bx lr
 8001d16:	4770      	bx	lr
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001d20:	08006728 	.word	0x08006728
  ldr r2, =_sbss
 8001d24:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001d28:	20000298 	.word	0x20000298

08001d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC1_2_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_Init+0x28>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_Init+0x28>)
 8001d3a:	f043 0310 	orr.w	r3, r3, #16
 8001d3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f000 fb6f 	bl	8002424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d46:	200f      	movs	r0, #15
 8001d48:	f000 f808 	bl	8001d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4c:	f7ff fb38 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40022000 	.word	0x40022000

08001d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_InitTick+0x54>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x58>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fb8b 	bl	8002496 <HAL_SYSTICK_Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00e      	b.n	8001da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b0f      	cmp	r3, #15
 8001d8e:	d80a      	bhi.n	8001da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d90:	2200      	movs	r2, #0
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f000 fb4f 	bl	800243a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d9c:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <HAL_InitTick+0x5c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000048 	.word	0x20000048
 8001db4:	20000050 	.word	0x20000050
 8001db8:	2000004c 	.word	0x2000004c

08001dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_IncTick+0x1c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_IncTick+0x20>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a03      	ldr	r2, [pc, #12]	; (8001ddc <HAL_IncTick+0x20>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	20000050 	.word	0x20000050
 8001ddc:	20000270 	.word	0x20000270

08001de0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <HAL_GetTick+0x10>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20000270 	.word	0x20000270

08001df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_GetTick>
 8001e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0c:	d005      	beq.n	8001e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <HAL_Delay+0x44>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e1a:	bf00      	nop
 8001e1c:	f7ff ffe0 	bl	8001de0 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d8f7      	bhi.n	8001e1c <HAL_Delay+0x28>
  {
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000050 	.word	0x20000050

08001e3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0be      	b.n	8001fdc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe fc02 	bl	8000684 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f9ab 	bl	80021dc <ADC_ConversionStop_Disable>
 8001e86:	4603      	mov	r3, r0
 8001e88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 8099 	bne.w	8001fca <HAL_ADC_Init+0x18e>
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 8095 	bne.w	8001fca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ea8:	f023 0302 	bic.w	r3, r3, #2
 8001eac:	f043 0202 	orr.w	r2, r3, #2
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ebc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	7b1b      	ldrb	r3, [r3, #12]
 8001ec2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ec4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed4:	d003      	beq.n	8001ede <HAL_ADC_Init+0xa2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d102      	bne.n	8001ee4 <HAL_ADC_Init+0xa8>
 8001ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee2:	e000      	b.n	8001ee6 <HAL_ADC_Init+0xaa>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7d1b      	ldrb	r3, [r3, #20]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d119      	bne.n	8001f28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7b1b      	ldrb	r3, [r3, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	035a      	lsls	r2, r3, #13
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	e00b      	b.n	8001f28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	f043 0220 	orr.w	r2, r3, #32
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_ADC_Init+0x1a8>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f58:	d003      	beq.n	8001f62 <HAL_ADC_Init+0x126>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d104      	bne.n	8001f6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	051b      	lsls	r3, r3, #20
 8001f6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f72:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_ADC_Init+0x1ac>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fa6:	e018      	b.n	8001fda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	f023 0312 	bic.w	r3, r3, #18
 8001fb0:	f043 0210 	orr.w	r2, r3, #16
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fc8:	e007      	b.n	8001fda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	f043 0210 	orr.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	ffe1f7fd 	.word	0xffe1f7fd
 8001fe8:	ff1f0efe 	.word	0xff1f0efe

08001fec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ADC_ConfigChannel+0x20>
 8002008:	2302      	movs	r3, #2
 800200a:	e0dc      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x1da>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b06      	cmp	r3, #6
 800201a:	d81c      	bhi.n	8002056 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3b05      	subs	r3, #5
 800202e:	221f      	movs	r2, #31
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	4019      	ands	r1, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	3b05      	subs	r3, #5
 8002048:	fa00 f203 	lsl.w	r2, r0, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	635a      	str	r2, [r3, #52]	; 0x34
 8002054:	e03c      	b.n	80020d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d81c      	bhi.n	8002098 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	3b23      	subs	r3, #35	; 0x23
 8002070:	221f      	movs	r2, #31
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	4019      	ands	r1, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	3b23      	subs	r3, #35	; 0x23
 800208a:	fa00 f203 	lsl.w	r2, r0, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
 8002096:	e01b      	b.n	80020d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	3b41      	subs	r3, #65	; 0x41
 80020aa:	221f      	movs	r2, #31
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4019      	ands	r1, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3b41      	subs	r3, #65	; 0x41
 80020c4:	fa00 f203 	lsl.w	r2, r0, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b09      	cmp	r3, #9
 80020d6:	d91c      	bls.n	8002112 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68d9      	ldr	r1, [r3, #12]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	3b1e      	subs	r3, #30
 80020ea:	2207      	movs	r2, #7
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	4019      	ands	r1, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6898      	ldr	r0, [r3, #8]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	3b1e      	subs	r3, #30
 8002104:	fa00 f203 	lsl.w	r2, r0, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	60da      	str	r2, [r3, #12]
 8002110:	e019      	b.n	8002146 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6919      	ldr	r1, [r3, #16]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	2207      	movs	r2, #7
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	4019      	ands	r1, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6898      	ldr	r0, [r3, #8]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	fa00 f203 	lsl.w	r2, r0, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b10      	cmp	r3, #16
 800214c:	d003      	beq.n	8002156 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002152:	2b11      	cmp	r3, #17
 8002154:	d132      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d125      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d126      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800217c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b10      	cmp	r3, #16
 8002184:	d11a      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a13      	ldr	r2, [pc, #76]	; (80021d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	0c9a      	lsrs	r2, r3, #18
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800219c:	e002      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f9      	bne.n	800219e <HAL_ADC_ConfigChannel+0x1b2>
 80021aa:	e007      	b.n	80021bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f043 0220 	orr.w	r2, r3, #32
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	40012400 	.word	0x40012400
 80021d4:	20000048 	.word	0x20000048
 80021d8:	431bde83 	.word	0x431bde83

080021dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d12e      	bne.n	8002254 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002206:	f7ff fdeb 	bl	8001de0 <HAL_GetTick>
 800220a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800220c:	e01b      	b.n	8002246 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800220e:	f7ff fde7 	bl	8001de0 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d914      	bls.n	8002246 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10d      	bne.n	8002246 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	f043 0210 	orr.w	r2, r3, #16
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f043 0201 	orr.w	r2, r3, #1
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e007      	b.n	8002256 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d0dc      	beq.n	800220e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4906      	ldr	r1, [pc, #24]	; (80022f8 <__NVIC_EnableIRQ+0x34>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	; (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023b8:	f3bf 8f4f 	dsb	sy
}
 80023bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <__NVIC_SystemReset+0x24>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80023c6:	4904      	ldr	r1, [pc, #16]	; (80023d8 <__NVIC_SystemReset+0x24>)
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_SystemReset+0x28>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80023ce:	f3bf 8f4f 	dsb	sy
}
 80023d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <__NVIC_SystemReset+0x20>
 80023d8:	e000ed00 	.word	0xe000ed00
 80023dc:	05fa0004 	.word	0x05fa0004

080023e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023f0:	d301      	bcc.n	80023f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023f6:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <SysTick_Config+0x40>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023fe:	210f      	movs	r1, #15
 8002400:	f04f 30ff 	mov.w	r0, #4294967295
 8002404:	f7ff ff7a 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <SysTick_Config+0x40>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <SysTick_Config+0x40>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	e000e010 	.word	0xe000e010

08002424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ff17 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800243a:	b580      	push	{r7, lr}
 800243c:	b086      	sub	sp, #24
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800244c:	f7ff ff2c 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 8002450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	6978      	ldr	r0, [r7, #20]
 8002458:	f7ff ff7a 	bl	8002350 <NVIC_EncodePriority>
 800245c:	4602      	mov	r2, r0
 800245e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002462:	4611      	mov	r1, r2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff49 	bl	80022fc <__NVIC_SetPriority>
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	4603      	mov	r3, r0
 800247a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff1f 	bl	80022c4 <__NVIC_EnableIRQ>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002492:	f7ff ff8f 	bl	80023b4 <__NVIC_SystemReset>

08002496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff ff9e 	bl	80023e0 <SysTick_Config>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d005      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2204      	movs	r2, #4
 80024ca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e051      	b.n	8002576 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 020e 	bic.w	r2, r2, #14
 80024e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0201 	bic.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a22      	ldr	r2, [pc, #136]	; (8002580 <HAL_DMA_Abort_IT+0xd0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d029      	beq.n	8002550 <HAL_DMA_Abort_IT+0xa0>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a20      	ldr	r2, [pc, #128]	; (8002584 <HAL_DMA_Abort_IT+0xd4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d022      	beq.n	800254c <HAL_DMA_Abort_IT+0x9c>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1f      	ldr	r2, [pc, #124]	; (8002588 <HAL_DMA_Abort_IT+0xd8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d01a      	beq.n	8002546 <HAL_DMA_Abort_IT+0x96>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a1d      	ldr	r2, [pc, #116]	; (800258c <HAL_DMA_Abort_IT+0xdc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d012      	beq.n	8002540 <HAL_DMA_Abort_IT+0x90>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <HAL_DMA_Abort_IT+0xe0>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d00a      	beq.n	800253a <HAL_DMA_Abort_IT+0x8a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <HAL_DMA_Abort_IT+0xe4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d102      	bne.n	8002534 <HAL_DMA_Abort_IT+0x84>
 800252e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002532:	e00e      	b.n	8002552 <HAL_DMA_Abort_IT+0xa2>
 8002534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002538:	e00b      	b.n	8002552 <HAL_DMA_Abort_IT+0xa2>
 800253a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800253e:	e008      	b.n	8002552 <HAL_DMA_Abort_IT+0xa2>
 8002540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002544:	e005      	b.n	8002552 <HAL_DMA_Abort_IT+0xa2>
 8002546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254a:	e002      	b.n	8002552 <HAL_DMA_Abort_IT+0xa2>
 800254c:	2310      	movs	r3, #16
 800254e:	e000      	b.n	8002552 <HAL_DMA_Abort_IT+0xa2>
 8002550:	2301      	movs	r3, #1
 8002552:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_DMA_Abort_IT+0xe8>)
 8002554:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
    } 
  }
  return status;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40020008 	.word	0x40020008
 8002584:	4002001c 	.word	0x4002001c
 8002588:	40020030 	.word	0x40020030
 800258c:	40020044 	.word	0x40020044
 8002590:	40020058 	.word	0x40020058
 8002594:	4002006c 	.word	0x4002006c
 8002598:	40020000 	.word	0x40020000

0800259c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80025b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025ce:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_FLASH_Program+0xd8>)
 80025d0:	7e1b      	ldrb	r3, [r3, #24]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_FLASH_Program+0x26>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e054      	b.n	8002684 <HAL_FLASH_Program+0xd0>
 80025da:	4b2c      	ldr	r3, [pc, #176]	; (800268c <HAL_FLASH_Program+0xd8>)
 80025dc:	2201      	movs	r2, #1
 80025de:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025e4:	f000 f8b2 	bl	800274c <FLASH_WaitForLastOperation>
 80025e8:	4603      	mov	r3, r0
 80025ea:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d144      	bne.n	800267c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80025f8:	2301      	movs	r3, #1
 80025fa:	757b      	strb	r3, [r7, #21]
 80025fc:	e007      	b.n	800260e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d102      	bne.n	800260a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002604:	2302      	movs	r3, #2
 8002606:	757b      	strb	r3, [r7, #21]
 8002608:	e001      	b.n	800260e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800260a:	2304      	movs	r3, #4
 800260c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800260e:	2300      	movs	r3, #0
 8002610:	75bb      	strb	r3, [r7, #22]
 8002612:	e02d      	b.n	8002670 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002614:	7dbb      	ldrb	r3, [r7, #22]
 8002616:	005a      	lsls	r2, r3, #1
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	eb02 0c03 	add.w	ip, r2, r3
 800261e:	7dbb      	ldrb	r3, [r7, #22]
 8002620:	0119      	lsls	r1, r3, #4
 8002622:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002626:	f1c1 0620 	rsb	r6, r1, #32
 800262a:	f1a1 0020 	sub.w	r0, r1, #32
 800262e:	fa22 f401 	lsr.w	r4, r2, r1
 8002632:	fa03 f606 	lsl.w	r6, r3, r6
 8002636:	4334      	orrs	r4, r6
 8002638:	fa23 f000 	lsr.w	r0, r3, r0
 800263c:	4304      	orrs	r4, r0
 800263e:	fa23 f501 	lsr.w	r5, r3, r1
 8002642:	b2a3      	uxth	r3, r4
 8002644:	4619      	mov	r1, r3
 8002646:	4660      	mov	r0, ip
 8002648:	f000 f864 	bl	8002714 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800264c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002650:	f000 f87c 	bl	800274c <FLASH_WaitForLastOperation>
 8002654:	4603      	mov	r3, r0
 8002656:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002658:	4b0d      	ldr	r3, [pc, #52]	; (8002690 <HAL_FLASH_Program+0xdc>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <HAL_FLASH_Program+0xdc>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800266a:	7dbb      	ldrb	r3, [r7, #22]
 800266c:	3301      	adds	r3, #1
 800266e:	75bb      	strb	r3, [r7, #22]
 8002670:	7dba      	ldrb	r2, [r7, #22]
 8002672:	7d7b      	ldrb	r3, [r7, #21]
 8002674:	429a      	cmp	r2, r3
 8002676:	d3cd      	bcc.n	8002614 <HAL_FLASH_Program+0x60>
 8002678:	e000      	b.n	800267c <HAL_FLASH_Program+0xc8>
      {
        break;
 800267a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_FLASH_Program+0xd8>)
 800267e:	2200      	movs	r2, #0
 8002680:	761a      	strb	r2, [r3, #24]

  return status;
 8002682:	7dfb      	ldrb	r3, [r7, #23]
}
 8002684:	4618      	mov	r0, r3
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268c:	20000278 	.word	0x20000278
 8002690:	40022000 	.word	0x40022000

08002694 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800269e:	4b0d      	ldr	r3, [pc, #52]	; (80026d4 <HAL_FLASH_Unlock+0x40>)
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_FLASH_Unlock+0x40>)
 80026ac:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_FLASH_Unlock+0x44>)
 80026ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <HAL_FLASH_Unlock+0x40>)
 80026b2:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_FLASH_Unlock+0x48>)
 80026b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_FLASH_Unlock+0x40>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80026c6:	79fb      	ldrb	r3, [r7, #7]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40022000 	.word	0x40022000
 80026d8:	45670123 	.word	0x45670123
 80026dc:	cdef89ab 	.word	0xcdef89ab

080026e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_FLASH_Lock+0x1c>)
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_FLASH_Lock+0x1c>)
 80026ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ee:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40022000 	.word	0x40022000

08002700 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8002704:	4b02      	ldr	r3, [pc, #8]	; (8002710 <HAL_FLASH_GetError+0x10>)
 8002706:	69db      	ldr	r3, [r3, #28]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	20000278 	.word	0x20000278

08002714 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002720:	4b08      	ldr	r3, [pc, #32]	; (8002744 <FLASH_Program_HalfWord+0x30>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <FLASH_Program_HalfWord+0x34>)
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	4a07      	ldr	r2, [pc, #28]	; (8002748 <FLASH_Program_HalfWord+0x34>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	887a      	ldrh	r2, [r7, #2]
 8002736:	801a      	strh	r2, [r3, #0]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000278 	.word	0x20000278
 8002748:	40022000 	.word	0x40022000

0800274c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002754:	f7ff fb44 	bl	8001de0 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800275a:	e010      	b.n	800277e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d00c      	beq.n	800277e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <FLASH_WaitForLastOperation+0x2e>
 800276a:	f7ff fb39 	bl	8001de0 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	429a      	cmp	r2, r3
 8002778:	d201      	bcs.n	800277e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e025      	b.n	80027ca <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <FLASH_WaitForLastOperation+0x88>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e8      	bne.n	800275c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800278a:	4b12      	ldr	r3, [pc, #72]	; (80027d4 <FLASH_WaitForLastOperation+0x88>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0320 	and.w	r3, r3, #32
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <FLASH_WaitForLastOperation+0x88>)
 8002798:	2220      	movs	r2, #32
 800279a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <FLASH_WaitForLastOperation+0x88>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10b      	bne.n	80027c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <FLASH_WaitForLastOperation+0x88>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <FLASH_WaitForLastOperation+0x88>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80027c0:	f000 f80a 	bl	80027d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40022000 	.word	0x40022000

080027d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80027e2:	4b23      	ldr	r3, [pc, #140]	; (8002870 <FLASH_SetErrorCode+0x98>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <FLASH_SetErrorCode+0x9c>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f043 0302 	orr.w	r3, r3, #2
 80027f6:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <FLASH_SetErrorCode+0x9c>)
 80027f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <FLASH_SetErrorCode+0x98>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d009      	beq.n	8002822 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800280e:	4b19      	ldr	r3, [pc, #100]	; (8002874 <FLASH_SetErrorCode+0x9c>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	4a17      	ldr	r2, [pc, #92]	; (8002874 <FLASH_SetErrorCode+0x9c>)
 8002818:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002822:	4b13      	ldr	r3, [pc, #76]	; (8002870 <FLASH_SetErrorCode+0x98>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <FLASH_SetErrorCode+0x9c>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <FLASH_SetErrorCode+0x9c>)
 8002838:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <FLASH_SetErrorCode+0x98>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <FLASH_SetErrorCode+0x98>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f240 1201 	movw	r2, #257	; 0x101
 800284c:	4293      	cmp	r3, r2
 800284e:	d106      	bne.n	800285e <FLASH_SetErrorCode+0x86>
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <FLASH_SetErrorCode+0x98>)
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	4a06      	ldr	r2, [pc, #24]	; (8002870 <FLASH_SetErrorCode+0x98>)
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	61d3      	str	r3, [r2, #28]
}  
 800285c:	e002      	b.n	8002864 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800285e:	4a04      	ldr	r2, [pc, #16]	; (8002870 <FLASH_SetErrorCode+0x98>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	60d3      	str	r3, [r2, #12]
}  
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40022000 	.word	0x40022000
 8002874:	20000278 	.word	0x20000278

08002878 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <HAL_FLASHEx_Erase+0xd0>)
 800288c:	7e1b      	ldrb	r3, [r3, #24]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_FLASHEx_Erase+0x1e>
 8002892:	2302      	movs	r3, #2
 8002894:	e053      	b.n	800293e <HAL_FLASHEx_Erase+0xc6>
 8002896:	4b2c      	ldr	r3, [pc, #176]	; (8002948 <HAL_FLASHEx_Erase+0xd0>)
 8002898:	2201      	movs	r2, #1
 800289a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d116      	bne.n	80028d2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80028a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028a8:	f7ff ff50 	bl	800274c <FLASH_WaitForLastOperation>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d141      	bne.n	8002936 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f000 f84c 	bl	8002950 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028bc:	f7ff ff46 	bl	800274c <FLASH_WaitForLastOperation>
 80028c0:	4603      	mov	r3, r0
 80028c2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80028c4:	4b21      	ldr	r3, [pc, #132]	; (800294c <HAL_FLASHEx_Erase+0xd4>)
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	4a20      	ldr	r2, [pc, #128]	; (800294c <HAL_FLASHEx_Erase+0xd4>)
 80028ca:	f023 0304 	bic.w	r3, r3, #4
 80028ce:	6113      	str	r3, [r2, #16]
 80028d0:	e031      	b.n	8002936 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80028d2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028d6:	f7ff ff39 	bl	800274c <FLASH_WaitForLastOperation>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d12a      	bne.n	8002936 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	f04f 32ff 	mov.w	r2, #4294967295
 80028e6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	e019      	b.n	8002924 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80028f0:	68b8      	ldr	r0, [r7, #8]
 80028f2:	f000 f849 	bl	8002988 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028fa:	f7ff ff27 	bl	800274c <FLASH_WaitForLastOperation>
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_FLASHEx_Erase+0xd4>)
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	4a11      	ldr	r2, [pc, #68]	; (800294c <HAL_FLASHEx_Erase+0xd4>)
 8002908:	f023 0302 	bic.w	r3, r3, #2
 800290c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	601a      	str	r2, [r3, #0]
            break;
 800291a:	e00c      	b.n	8002936 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002922:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	029a      	lsls	r2, r3, #10
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	429a      	cmp	r2, r3
 8002934:	d3dc      	bcc.n	80028f0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <HAL_FLASHEx_Erase+0xd0>)
 8002938:	2200      	movs	r2, #0
 800293a:	761a      	strb	r2, [r3, #24]

  return status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000278 	.word	0x20000278
 800294c:	40022000 	.word	0x40022000

08002950 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002958:	4b09      	ldr	r3, [pc, #36]	; (8002980 <FLASH_MassErase+0x30>)
 800295a:	2200      	movs	r2, #0
 800295c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <FLASH_MassErase+0x34>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	4a08      	ldr	r2, [pc, #32]	; (8002984 <FLASH_MassErase+0x34>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <FLASH_MassErase+0x34>)
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	4a05      	ldr	r2, [pc, #20]	; (8002984 <FLASH_MassErase+0x34>)
 8002970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002974:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	20000278 	.word	0x20000278
 8002984:	40022000 	.word	0x40022000

08002988 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <FLASH_PageErase+0x38>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <FLASH_PageErase+0x3c>)
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <FLASH_PageErase+0x3c>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80029a2:	4a08      	ldr	r2, [pc, #32]	; (80029c4 <FLASH_PageErase+0x3c>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <FLASH_PageErase+0x3c>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <FLASH_PageErase+0x3c>)
 80029ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029b2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000278 	.word	0x20000278
 80029c4:	40022000 	.word	0x40022000

080029c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b08b      	sub	sp, #44	; 0x2c
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029da:	e169      	b.n	8002cb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029dc:	2201      	movs	r2, #1
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f040 8158 	bne.w	8002caa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a9a      	ldr	r2, [pc, #616]	; (8002c68 <HAL_GPIO_Init+0x2a0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d05e      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
 8002a04:	4a98      	ldr	r2, [pc, #608]	; (8002c68 <HAL_GPIO_Init+0x2a0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d875      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a0a:	4a98      	ldr	r2, [pc, #608]	; (8002c6c <HAL_GPIO_Init+0x2a4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d058      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
 8002a10:	4a96      	ldr	r2, [pc, #600]	; (8002c6c <HAL_GPIO_Init+0x2a4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d86f      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a16:	4a96      	ldr	r2, [pc, #600]	; (8002c70 <HAL_GPIO_Init+0x2a8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d052      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
 8002a1c:	4a94      	ldr	r2, [pc, #592]	; (8002c70 <HAL_GPIO_Init+0x2a8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d869      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a22:	4a94      	ldr	r2, [pc, #592]	; (8002c74 <HAL_GPIO_Init+0x2ac>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d04c      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
 8002a28:	4a92      	ldr	r2, [pc, #584]	; (8002c74 <HAL_GPIO_Init+0x2ac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d863      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a2e:	4a92      	ldr	r2, [pc, #584]	; (8002c78 <HAL_GPIO_Init+0x2b0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d046      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
 8002a34:	4a90      	ldr	r2, [pc, #576]	; (8002c78 <HAL_GPIO_Init+0x2b0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d85d      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a3a:	2b12      	cmp	r3, #18
 8002a3c:	d82a      	bhi.n	8002a94 <HAL_GPIO_Init+0xcc>
 8002a3e:	2b12      	cmp	r3, #18
 8002a40:	d859      	bhi.n	8002af6 <HAL_GPIO_Init+0x12e>
 8002a42:	a201      	add	r2, pc, #4	; (adr r2, 8002a48 <HAL_GPIO_Init+0x80>)
 8002a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a48:	08002ac3 	.word	0x08002ac3
 8002a4c:	08002a9d 	.word	0x08002a9d
 8002a50:	08002aaf 	.word	0x08002aaf
 8002a54:	08002af1 	.word	0x08002af1
 8002a58:	08002af7 	.word	0x08002af7
 8002a5c:	08002af7 	.word	0x08002af7
 8002a60:	08002af7 	.word	0x08002af7
 8002a64:	08002af7 	.word	0x08002af7
 8002a68:	08002af7 	.word	0x08002af7
 8002a6c:	08002af7 	.word	0x08002af7
 8002a70:	08002af7 	.word	0x08002af7
 8002a74:	08002af7 	.word	0x08002af7
 8002a78:	08002af7 	.word	0x08002af7
 8002a7c:	08002af7 	.word	0x08002af7
 8002a80:	08002af7 	.word	0x08002af7
 8002a84:	08002af7 	.word	0x08002af7
 8002a88:	08002af7 	.word	0x08002af7
 8002a8c:	08002aa5 	.word	0x08002aa5
 8002a90:	08002ab9 	.word	0x08002ab9
 8002a94:	4a79      	ldr	r2, [pc, #484]	; (8002c7c <HAL_GPIO_Init+0x2b4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a9a:	e02c      	b.n	8002af6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	623b      	str	r3, [r7, #32]
          break;
 8002aa2:	e029      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	623b      	str	r3, [r7, #32]
          break;
 8002aac:	e024      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	623b      	str	r3, [r7, #32]
          break;
 8002ab6:	e01f      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	330c      	adds	r3, #12
 8002abe:	623b      	str	r3, [r7, #32]
          break;
 8002ac0:	e01a      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002aca:	2304      	movs	r3, #4
 8002acc:	623b      	str	r3, [r7, #32]
          break;
 8002ace:	e013      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ad8:	2308      	movs	r3, #8
 8002ada:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	611a      	str	r2, [r3, #16]
          break;
 8002ae2:	e009      	b.n	8002af8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ae4:	2308      	movs	r3, #8
 8002ae6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	615a      	str	r2, [r3, #20]
          break;
 8002aee:	e003      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002af0:	2300      	movs	r3, #0
 8002af2:	623b      	str	r3, [r7, #32]
          break;
 8002af4:	e000      	b.n	8002af8 <HAL_GPIO_Init+0x130>
          break;
 8002af6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2bff      	cmp	r3, #255	; 0xff
 8002afc:	d801      	bhi.n	8002b02 <HAL_GPIO_Init+0x13a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	e001      	b.n	8002b06 <HAL_GPIO_Init+0x13e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2bff      	cmp	r3, #255	; 0xff
 8002b0c:	d802      	bhi.n	8002b14 <HAL_GPIO_Init+0x14c>
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	e002      	b.n	8002b1a <HAL_GPIO_Init+0x152>
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	3b08      	subs	r3, #8
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	210f      	movs	r1, #15
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	6a39      	ldr	r1, [r7, #32]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	431a      	orrs	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80b1 	beq.w	8002caa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b48:	4b4d      	ldr	r3, [pc, #308]	; (8002c80 <HAL_GPIO_Init+0x2b8>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a4c      	ldr	r2, [pc, #304]	; (8002c80 <HAL_GPIO_Init+0x2b8>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6193      	str	r3, [r2, #24]
 8002b54:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_GPIO_Init+0x2b8>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b60:	4a48      	ldr	r2, [pc, #288]	; (8002c84 <HAL_GPIO_Init+0x2bc>)
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	3302      	adds	r3, #2
 8002b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	220f      	movs	r2, #15
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a40      	ldr	r2, [pc, #256]	; (8002c88 <HAL_GPIO_Init+0x2c0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <HAL_GPIO_Init+0x1ec>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a3f      	ldr	r2, [pc, #252]	; (8002c8c <HAL_GPIO_Init+0x2c4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00d      	beq.n	8002bb0 <HAL_GPIO_Init+0x1e8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a3e      	ldr	r2, [pc, #248]	; (8002c90 <HAL_GPIO_Init+0x2c8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d007      	beq.n	8002bac <HAL_GPIO_Init+0x1e4>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a3d      	ldr	r2, [pc, #244]	; (8002c94 <HAL_GPIO_Init+0x2cc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_GPIO_Init+0x1e0>
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e006      	b.n	8002bb6 <HAL_GPIO_Init+0x1ee>
 8002ba8:	2304      	movs	r3, #4
 8002baa:	e004      	b.n	8002bb6 <HAL_GPIO_Init+0x1ee>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e002      	b.n	8002bb6 <HAL_GPIO_Init+0x1ee>
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_GPIO_Init+0x1ee>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb8:	f002 0203 	and.w	r2, r2, #3
 8002bbc:	0092      	lsls	r2, r2, #2
 8002bbe:	4093      	lsls	r3, r2
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bc6:	492f      	ldr	r1, [pc, #188]	; (8002c84 <HAL_GPIO_Init+0x2bc>)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	3302      	adds	r3, #2
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	492c      	ldr	r1, [pc, #176]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]
 8002bec:	e006      	b.n	8002bfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bee:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	4928      	ldr	r1, [pc, #160]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d006      	beq.n	8002c16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c08:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	4922      	ldr	r1, [pc, #136]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	491e      	ldr	r1, [pc, #120]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d006      	beq.n	8002c3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	4918      	ldr	r1, [pc, #96]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	608b      	str	r3, [r1, #8]
 8002c3c:	e006      	b.n	8002c4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c3e:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	4914      	ldr	r1, [pc, #80]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d021      	beq.n	8002c9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c58:	4b0f      	ldr	r3, [pc, #60]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	490e      	ldr	r1, [pc, #56]	; (8002c98 <HAL_GPIO_Init+0x2d0>)
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]
 8002c64:	e021      	b.n	8002caa <HAL_GPIO_Init+0x2e2>
 8002c66:	bf00      	nop
 8002c68:	10320000 	.word	0x10320000
 8002c6c:	10310000 	.word	0x10310000
 8002c70:	10220000 	.word	0x10220000
 8002c74:	10210000 	.word	0x10210000
 8002c78:	10120000 	.word	0x10120000
 8002c7c:	10110000 	.word	0x10110000
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40010800 	.word	0x40010800
 8002c8c:	40010c00 	.word	0x40010c00
 8002c90:	40011000 	.word	0x40011000
 8002c94:	40011400 	.word	0x40011400
 8002c98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_GPIO_Init+0x304>)
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	4909      	ldr	r1, [pc, #36]	; (8002ccc <HAL_GPIO_Init+0x304>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	3301      	adds	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f47f ae8e 	bne.w	80029dc <HAL_GPIO_Init+0x14>
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	372c      	adds	r7, #44	; 0x2c
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	40010400 	.word	0x40010400

08002cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	e001      	b.n	8002cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	807b      	strh	r3, [r7, #2]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d0e:	787b      	ldrb	r3, [r7, #1]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d14:	887a      	ldrh	r2, [r7, #2]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d1a:	e003      	b.n	8002d24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	041a      	lsls	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	611a      	str	r2, [r3, #16]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e12b      	b.n	8002f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fd ffca 	bl	8000cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d94:	f002 faa2 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8002d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a81      	ldr	r2, [pc, #516]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d807      	bhi.n	8002db4 <HAL_I2C_Init+0x84>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a80      	ldr	r2, [pc, #512]	; (8002fa8 <HAL_I2C_Init+0x278>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e006      	b.n	8002dc2 <HAL_I2C_Init+0x92>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a7d      	ldr	r2, [pc, #500]	; (8002fac <HAL_I2C_Init+0x27c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0e7      	b.n	8002f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a78      	ldr	r2, [pc, #480]	; (8002fb0 <HAL_I2C_Init+0x280>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0c9b      	lsrs	r3, r3, #18
 8002dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a6a      	ldr	r2, [pc, #424]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d802      	bhi.n	8002e04 <HAL_I2C_Init+0xd4>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	3301      	adds	r3, #1
 8002e02:	e009      	b.n	8002e18 <HAL_I2C_Init+0xe8>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_I2C_Init+0x284>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	3301      	adds	r3, #1
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	495c      	ldr	r1, [pc, #368]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002e34:	428b      	cmp	r3, r1
 8002e36:	d819      	bhi.n	8002e6c <HAL_I2C_Init+0x13c>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1e59      	subs	r1, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e4c:	400b      	ands	r3, r1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_I2C_Init+0x138>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1e59      	subs	r1, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e66:	e051      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	e04f      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d111      	bne.n	8002e98 <HAL_I2C_Init+0x168>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	440b      	add	r3, r1
 8002e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e012      	b.n	8002ebe <HAL_I2C_Init+0x18e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Init+0x196>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e022      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10e      	bne.n	8002eec <HAL_I2C_Init+0x1bc>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1e58      	subs	r0, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	440b      	add	r3, r1
 8002edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eea:	e00f      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	6809      	ldr	r1, [r1, #0]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6911      	ldr	r1, [r2, #16]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68d2      	ldr	r2, [r2, #12]
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	000186a0 	.word	0x000186a0
 8002fa8:	001e847f 	.word	0x001e847f
 8002fac:	003d08ff 	.word	0x003d08ff
 8002fb0:	431bde83 	.word	0x431bde83
 8002fb4:	10624dd3 	.word	0x10624dd3

08002fb8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fd4:	2b28      	cmp	r3, #40	; 0x28
 8002fd6:	d15b      	bne.n	8003090 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d002      	beq.n	8002fe4 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e054      	b.n	8003092 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e04d      	b.n	8003092 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b01      	cmp	r3, #1
 800300a:	d007      	beq.n	800301c <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0201 	orr.w	r2, r2, #1
 800301a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800302a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2229      	movs	r2, #41	; 0x29
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800308a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	371c      	adds	r7, #28
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030b8:	2b28      	cmp	r3, #40	; 0x28
 80030ba:	d15b      	bne.n	8003174 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e054      	b.n	8003176 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e04d      	b.n	8003176 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d007      	beq.n	8003100 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800310e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	222a      	movs	r2, #42	; 0x2a
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800316e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b20      	cmp	r3, #32
 8003192:	d124      	bne.n	80031de <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2228      	movs	r2, #40	; 0x28
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d007      	beq.n	80031ba <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031c8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80031d8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	e000      	b.n	80031e0 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b088      	sub	sp, #32
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800320a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003212:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	2b10      	cmp	r3, #16
 8003218:	d003      	beq.n	8003222 <HAL_I2C_EV_IRQHandler+0x38>
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b40      	cmp	r3, #64	; 0x40
 800321e:	f040 80c1 	bne.w	80033a4 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10d      	bne.n	8003258 <HAL_I2C_EV_IRQHandler+0x6e>
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003242:	d003      	beq.n	800324c <HAL_I2C_EV_IRQHandler+0x62>
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800324a:	d101      	bne.n	8003250 <HAL_I2C_EV_IRQHandler+0x66>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_I2C_EV_IRQHandler+0x68>
 8003250:	2300      	movs	r3, #0
 8003252:	2b01      	cmp	r3, #1
 8003254:	f000 8132 	beq.w	80034bc <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00c      	beq.n	800327c <HAL_I2C_EV_IRQHandler+0x92>
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	0a5b      	lsrs	r3, r3, #9
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d006      	beq.n	800327c <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f001 fc46 	bl	8004b00 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fd48 	bl	8003d0a <I2C_Master_SB>
 800327a:	e092      	b.n	80033a2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	08db      	lsrs	r3, r3, #3
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_I2C_EV_IRQHandler+0xb2>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	0a5b      	lsrs	r3, r3, #9
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fdbd 	bl	8003e14 <I2C_Master_ADD10>
 800329a:	e082      	b.n	80033a2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d009      	beq.n	80032bc <HAL_I2C_EV_IRQHandler+0xd2>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	0a5b      	lsrs	r3, r3, #9
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 fdd6 	bl	8003e66 <I2C_Master_ADDR>
 80032ba:	e072      	b.n	80033a2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d03b      	beq.n	8003340 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d6:	f000 80f3 	beq.w	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	09db      	lsrs	r3, r3, #7
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00f      	beq.n	8003306 <HAL_I2C_EV_IRQHandler+0x11c>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	0a9b      	lsrs	r3, r3, #10
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_I2C_EV_IRQHandler+0x11c>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d103      	bne.n	8003306 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f9c2 	bl	8003688 <I2C_MasterTransmit_TXE>
 8003304:	e04d      	b.n	80033a2 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80d6 	beq.w	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	0a5b      	lsrs	r3, r3, #9
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80cf 	beq.w	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003322:	7bbb      	ldrb	r3, [r7, #14]
 8003324:	2b21      	cmp	r3, #33	; 0x21
 8003326:	d103      	bne.n	8003330 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fa49 	bl	80037c0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800332e:	e0c7      	b.n	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	f040 80c4 	bne.w	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fab7 	bl	80038ac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800333e:	e0bf      	b.n	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800334e:	f000 80b7 	beq.w	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	099b      	lsrs	r3, r3, #6
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00f      	beq.n	800337e <HAL_I2C_EV_IRQHandler+0x194>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	0a9b      	lsrs	r3, r3, #10
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_I2C_EV_IRQHandler+0x194>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d103      	bne.n	800337e <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fb2c 	bl	80039d4 <I2C_MasterReceive_RXNE>
 800337c:	e011      	b.n	80033a2 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 809a 	beq.w	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	0a5b      	lsrs	r3, r3, #9
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8093 	beq.w	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fbcb 	bl	8003b36 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033a0:	e08e      	b.n	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
 80033a2:	e08d      	b.n	80034c0 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d004      	beq.n	80033b6 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	61fb      	str	r3, [r7, #28]
 80033b4:	e007      	b.n	80033c6 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d012      	beq.n	80033f8 <HAL_I2C_EV_IRQHandler+0x20e>
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	0a5b      	lsrs	r3, r3, #9
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80033ee:	69b9      	ldr	r1, [r7, #24]
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 ff8f 	bl	8004314 <I2C_Slave_ADDR>
 80033f6:	e066      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d009      	beq.n	8003418 <HAL_I2C_EV_IRQHandler+0x22e>
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	0a5b      	lsrs	r3, r3, #9
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 ffc9 	bl	80043a8 <I2C_Slave_STOPF>
 8003416:	e056      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003418:	7bbb      	ldrb	r3, [r7, #14]
 800341a:	2b21      	cmp	r3, #33	; 0x21
 800341c:	d002      	beq.n	8003424 <HAL_I2C_EV_IRQHandler+0x23a>
 800341e:	7bbb      	ldrb	r3, [r7, #14]
 8003420:	2b29      	cmp	r3, #41	; 0x29
 8003422:	d125      	bne.n	8003470 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	09db      	lsrs	r3, r3, #7
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00f      	beq.n	8003450 <HAL_I2C_EV_IRQHandler+0x266>
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	0a9b      	lsrs	r3, r3, #10
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <HAL_I2C_EV_IRQHandler+0x266>
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	089b      	lsrs	r3, r3, #2
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d103      	bne.n	8003450 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fea7 	bl	800419c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800344e:	e039      	b.n	80034c4 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d033      	beq.n	80034c4 <HAL_I2C_EV_IRQHandler+0x2da>
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	0a5b      	lsrs	r3, r3, #9
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d02d      	beq.n	80034c4 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fed4 	bl	8004216 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800346e:	e029      	b.n	80034c4 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00f      	beq.n	800349c <HAL_I2C_EV_IRQHandler+0x2b2>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	0a9b      	lsrs	r3, r3, #10
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <HAL_I2C_EV_IRQHandler+0x2b2>
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d103      	bne.n	800349c <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fede 	bl	8004256 <I2C_SlaveReceive_RXNE>
 800349a:	e014      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00e      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2dc>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	0a5b      	lsrs	r3, r3, #9
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 ff0c 	bl	80042d2 <I2C_SlaveReceive_BTF>
 80034ba:	e004      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80034bc:	bf00      	nop
 80034be:	e002      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034c0:	bf00      	nop
 80034c2:	e000      	b.n	80034c6 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80034c4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80034c6:	3720      	adds	r7, #32
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ee:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d016      	beq.n	800352a <HAL_I2C_ER_IRQHandler+0x5e>
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	f043 0301 	orr.w	r3, r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003518:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003528:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	0a5b      	lsrs	r3, r3, #9
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00e      	beq.n	8003554 <HAL_I2C_ER_IRQHandler+0x88>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d008      	beq.n	8003554 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003552:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	0a9b      	lsrs	r3, r3, #10
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d03f      	beq.n	80035e0 <HAL_I2C_ER_IRQHandler+0x114>
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d039      	beq.n	80035e0 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800356c:	7efb      	ldrb	r3, [r7, #27]
 800356e:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003574:	b29b      	uxth	r3, r3
 8003576:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003586:	7ebb      	ldrb	r3, [r7, #26]
 8003588:	2b20      	cmp	r3, #32
 800358a:	d112      	bne.n	80035b2 <HAL_I2C_ER_IRQHandler+0xe6>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10f      	bne.n	80035b2 <HAL_I2C_ER_IRQHandler+0xe6>
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b21      	cmp	r3, #33	; 0x21
 8003596:	d008      	beq.n	80035aa <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003598:	7cfb      	ldrb	r3, [r7, #19]
 800359a:	2b29      	cmp	r3, #41	; 0x29
 800359c:	d005      	beq.n	80035aa <HAL_I2C_ER_IRQHandler+0xde>
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	2b28      	cmp	r3, #40	; 0x28
 80035a2:	d106      	bne.n	80035b2 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b21      	cmp	r3, #33	; 0x21
 80035a8:	d103      	bne.n	80035b2 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f001 f82c 	bl	8004608 <I2C_Slave_AF>
 80035b0:	e016      	b.n	80035e0 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035ba:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035c4:	7efb      	ldrb	r3, [r7, #27]
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d002      	beq.n	80035d0 <HAL_I2C_ER_IRQHandler+0x104>
 80035ca:	7efb      	ldrb	r3, [r7, #27]
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d107      	bne.n	80035e0 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035de:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	0adb      	lsrs	r3, r3, #11
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <HAL_I2C_ER_IRQHandler+0x13e>
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	f043 0308 	orr.w	r3, r3, #8
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003608:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f001 f863 	bl	80046e8 <I2C_ITError>
  }
}
 8003622:	bf00      	nop
 8003624:	3728      	adds	r7, #40	; 0x28
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr

08003688 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003696:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800369e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d150      	bne.n	8003750 <I2C_MasterTransmit_TXE+0xc8>
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b21      	cmp	r3, #33	; 0x21
 80036b2:	d14d      	bne.n	8003750 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d01d      	beq.n	80036f6 <I2C_MasterTransmit_TXE+0x6e>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d01a      	beq.n	80036f6 <I2C_MasterTransmit_TXE+0x6e>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036c6:	d016      	beq.n	80036f6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036d6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2211      	movs	r2, #17
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ff9b 	bl	800362a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036f4:	e060      	b.n	80037b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003704:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003714:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b40      	cmp	r3, #64	; 0x40
 800372e:	d107      	bne.n	8003740 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ff88 	bl	800364e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800373e:	e03b      	b.n	80037b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff ff6e 	bl	800362a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800374e:	e033      	b.n	80037b8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b21      	cmp	r3, #33	; 0x21
 8003754:	d005      	beq.n	8003762 <I2C_MasterTransmit_TXE+0xda>
 8003756:	7bbb      	ldrb	r3, [r7, #14]
 8003758:	2b40      	cmp	r3, #64	; 0x40
 800375a:	d12d      	bne.n	80037b8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800375c:	7bfb      	ldrb	r3, [r7, #15]
 800375e:	2b22      	cmp	r3, #34	; 0x22
 8003760:	d12a      	bne.n	80037b8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d108      	bne.n	800377e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800377c:	e01c      	b.n	80037b8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d103      	bne.n	8003792 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f88e 	bl	80038ac <I2C_MemoryTransmit_TXE_BTF>
}
 8003790:	e012      	b.n	80037b8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	781a      	ldrb	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037b6:	e7ff      	b.n	80037b8 <I2C_MasterTransmit_TXE+0x130>
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b21      	cmp	r3, #33	; 0x21
 80037d8:	d164      	bne.n	80038a4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d012      	beq.n	800380a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003808:	e04c      	b.n	80038a4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d01d      	beq.n	800384c <I2C_MasterTransmit_BTF+0x8c>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b20      	cmp	r3, #32
 8003814:	d01a      	beq.n	800384c <I2C_MasterTransmit_BTF+0x8c>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800381c:	d016      	beq.n	800384c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800382c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2211      	movs	r2, #17
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fef0 	bl	800362a <HAL_I2C_MasterTxCpltCallback>
}
 800384a:	e02b      	b.n	80038a4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800385a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d107      	bne.n	8003896 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff fedd 	bl	800364e <HAL_I2C_MemTxCpltCallback>
}
 8003894:	e006      	b.n	80038a4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff fec3 	bl	800362a <HAL_I2C_MasterTxCpltCallback>
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d11d      	bne.n	8003900 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d10b      	bne.n	80038e4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80038e2:	e073      	b.n	80039cc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	121b      	asrs	r3, r3, #8
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038fe:	e065      	b.n	80039cc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003904:	2b01      	cmp	r3, #1
 8003906:	d10b      	bne.n	8003920 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	b2da      	uxtb	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800391e:	e055      	b.n	80039cc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	2b02      	cmp	r3, #2
 8003926:	d151      	bne.n	80039cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	2b22      	cmp	r3, #34	; 0x22
 800392c:	d10d      	bne.n	800394a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800393c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003948:	e040      	b.n	80039cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d015      	beq.n	8003980 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b21      	cmp	r3, #33	; 0x21
 8003958:	d112      	bne.n	8003980 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800397e:	e025      	b.n	80039cc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d120      	bne.n	80039cc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b21      	cmp	r3, #33	; 0x21
 800398e:	d11d      	bne.n	80039cc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800399e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff fe41 	bl	800364e <HAL_I2C_MemTxCpltCallback>
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b22      	cmp	r3, #34	; 0x22
 80039e6:	f040 80a2 	bne.w	8003b2e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d921      	bls.n	8003a3c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	f040 8082 	bne.w	8003b2e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a38:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003a3a:	e078      	b.n	8003b2e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d074      	beq.n	8003b2e <I2C_MasterReceive_RXNE+0x15a>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d002      	beq.n	8003a50 <I2C_MasterReceive_RXNE+0x7c>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d16e      	bne.n	8003b2e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f001 f823 	bl	8004a9c <I2C_WaitOnSTOPRequestThroughIT>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d142      	bne.n	8003ae2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a7a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d10a      	bne.n	8003acc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff fdcb 	bl	8003660 <HAL_I2C_MemRxCpltCallback>
}
 8003aca:	e030      	b.n	8003b2e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2212      	movs	r2, #18
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff fdae 	bl	800363c <HAL_I2C_MasterRxCpltCallback>
}
 8003ae0:	e025      	b.n	8003b2e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003af0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	b2d2      	uxtb	r2, r2
 8003afe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7fd fa01 	bl	8000f30 <HAL_I2C_ErrorCallback>
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d11b      	bne.n	8003b86 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b84:	e0bd      	b.n	8003d02 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d129      	bne.n	8003be4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d00a      	beq.n	8003bbc <I2C_MasterReceive_BTF+0x86>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d007      	beq.n	8003bbc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003be2:	e08e      	b.n	8003d02 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d176      	bne.n	8003cdc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d002      	beq.n	8003bfa <I2C_MasterReceive_BTF+0xc4>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d108      	bne.n	8003c0c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e019      	b.n	8003c40 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	d002      	beq.n	8003c18 <I2C_MasterReceive_BTF+0xe2>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d108      	bne.n	8003c2a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	e00a      	b.n	8003c40 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d007      	beq.n	8003c40 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c9a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d10a      	bne.n	8003cc6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fcce 	bl	8003660 <HAL_I2C_MemRxCpltCallback>
}
 8003cc4:	e01d      	b.n	8003d02 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2212      	movs	r2, #18
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff fcb1 	bl	800363c <HAL_I2C_MasterRxCpltCallback>
}
 8003cda:	e012      	b.n	8003d02 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d117      	bne.n	8003d4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d109      	bne.n	8003d3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d38:	e067      	b.n	8003e0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]
}
 8003d4c:	e05d      	b.n	8003e0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d56:	d133      	bne.n	8003dc0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b21      	cmp	r3, #33	; 0x21
 8003d62:	d109      	bne.n	8003d78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d74:	611a      	str	r2, [r3, #16]
 8003d76:	e008      	b.n	8003d8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <I2C_Master_SB+0x92>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d108      	bne.n	8003dae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d032      	beq.n	8003e0a <I2C_Master_SB+0x100>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d02d      	beq.n	8003e0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dbc:	605a      	str	r2, [r3, #4]
}
 8003dbe:	e024      	b.n	8003e0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10e      	bne.n	8003de6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	11db      	asrs	r3, r3, #7
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	f003 0306 	and.w	r3, r3, #6
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f063 030f 	orn	r3, r3, #15
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	611a      	str	r2, [r3, #16]
}
 8003de4:	e011      	b.n	8003e0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10d      	bne.n	8003e0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	11db      	asrs	r3, r3, #7
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	f003 0306 	and.w	r3, r3, #6
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f063 030e 	orn	r3, r3, #14
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	611a      	str	r2, [r3, #16]
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d004      	beq.n	8003e3a <I2C_Master_ADD10+0x26>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d108      	bne.n	8003e4c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <I2C_Master_ADD10+0x48>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d007      	beq.n	8003e5c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5a:	605a      	str	r2, [r3, #4]
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr

08003e66 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b091      	sub	sp, #68	; 0x44
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b22      	cmp	r3, #34	; 0x22
 8003e8e:	f040 8174 	bne.w	800417a <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10f      	bne.n	8003eba <I2C_Master_ADDR+0x54>
 8003e9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d10b      	bne.n	8003eba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	e16b      	b.n	8004192 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d11d      	bne.n	8003efe <I2C_Master_ADDR+0x98>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003eca:	d118      	bne.n	8003efe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ef0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	651a      	str	r2, [r3, #80]	; 0x50
 8003efc:	e149      	b.n	8004192 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d113      	bne.n	8003f30 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f08:	2300      	movs	r3, #0
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e120      	b.n	8004172 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	f040 808a 	bne.w	8004050 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f42:	d137      	bne.n	8003fb4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f52:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f62:	d113      	bne.n	8003f8c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f72:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	e0f2      	b.n	8004172 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	623b      	str	r3, [r7, #32]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	623b      	str	r3, [r7, #32]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	623b      	str	r3, [r7, #32]
 8003fa0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e0de      	b.n	8004172 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	2b08      	cmp	r3, #8
 8003fb8:	d02e      	beq.n	8004018 <I2C_Master_ADDR+0x1b2>
 8003fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d02b      	beq.n	8004018 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc2:	2b12      	cmp	r3, #18
 8003fc4:	d102      	bne.n	8003fcc <I2C_Master_ADDR+0x166>
 8003fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d125      	bne.n	8004018 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d00e      	beq.n	8003ff0 <I2C_Master_ADDR+0x18a>
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d00b      	beq.n	8003ff0 <I2C_Master_ADDR+0x18a>
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d008      	beq.n	8003ff0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	e007      	b.n	8004000 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ffe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004000:	2300      	movs	r3, #0
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	e0ac      	b.n	8004172 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004026:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	61bb      	str	r3, [r7, #24]
 800403c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e090      	b.n	8004172 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d158      	bne.n	800410c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	2b04      	cmp	r3, #4
 800405e:	d021      	beq.n	80040a4 <I2C_Master_ADDR+0x23e>
 8004060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004062:	2b02      	cmp	r3, #2
 8004064:	d01e      	beq.n	80040a4 <I2C_Master_ADDR+0x23e>
 8004066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004068:	2b10      	cmp	r3, #16
 800406a:	d01b      	beq.n	80040a4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e012      	b.n	80040ca <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b4:	2300      	movs	r3, #0
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d8:	d14b      	bne.n	8004172 <I2C_Master_ADDR+0x30c>
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040e0:	d00b      	beq.n	80040fa <I2C_Master_ADDR+0x294>
 80040e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d008      	beq.n	80040fa <I2C_Master_ADDR+0x294>
 80040e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d005      	beq.n	80040fa <I2C_Master_ADDR+0x294>
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d002      	beq.n	80040fa <I2C_Master_ADDR+0x294>
 80040f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	d13b      	bne.n	8004172 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	e032      	b.n	8004172 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800411a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412a:	d117      	bne.n	800415c <I2C_Master_ADDR+0x2f6>
 800412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800412e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004132:	d00b      	beq.n	800414c <I2C_Master_ADDR+0x2e6>
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	2b01      	cmp	r3, #1
 8004138:	d008      	beq.n	800414c <I2C_Master_ADDR+0x2e6>
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	2b08      	cmp	r3, #8
 800413e:	d005      	beq.n	800414c <I2C_Master_ADDR+0x2e6>
 8004140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004142:	2b10      	cmp	r3, #16
 8004144:	d002      	beq.n	800414c <I2C_Master_ADDR+0x2e6>
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2b20      	cmp	r3, #32
 800414a:	d107      	bne.n	800415c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800415a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004178:	e00b      	b.n	8004192 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417a:	2300      	movs	r3, #0
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]
}
 8004190:	e7ff      	b.n	8004192 <I2C_Master_ADDR+0x32c>
 8004192:	bf00      	nop
 8004194:	3744      	adds	r7, #68	; 0x44
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02b      	beq.n	800420e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	781a      	ldrb	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d114      	bne.n	800420e <I2C_SlaveTransmit_TXE+0x72>
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b29      	cmp	r3, #41	; 0x29
 80041e8:	d111      	bne.n	800420e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2221      	movs	r2, #33	; 0x21
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2228      	movs	r2, #40	; 0x28
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fc fe63 	bl	8000ed4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d011      	beq.n	800424c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	781a      	ldrb	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	bc80      	pop	{r7}
 8004254:	4770      	bx	lr

08004256 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d02c      	beq.n	80042ca <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	b2d2      	uxtb	r2, r2
 800427c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d114      	bne.n	80042ca <I2C_SlaveReceive_RXNE+0x74>
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	2b2a      	cmp	r3, #42	; 0x2a
 80042a4:	d111      	bne.n	80042ca <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2222      	movs	r2, #34	; 0x22
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2228      	movs	r2, #40	; 0x28
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7fc fdc1 	bl	8000e4c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d012      	beq.n	800430a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800432e:	2b28      	cmp	r3, #40	; 0x28
 8004330:	d127      	bne.n	8004382 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004340:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	09db      	lsrs	r3, r3, #7
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	81bb      	strh	r3, [r7, #12]
 8004364:	e002      	b.n	800436c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004374:	89ba      	ldrh	r2, [r7, #12]
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fd28 	bl	8000dd0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004380:	e00e      	b.n	80043a0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004404:	d172      	bne.n	80044ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b22      	cmp	r3, #34	; 0x22
 800440a:	d002      	beq.n	8004412 <I2C_Slave_STOPF+0x6a>
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b2a      	cmp	r3, #42	; 0x2a
 8004410:	d135      	bne.n	800447e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f043 0204 	orr.w	r2, r3, #4
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004444:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe f8a6 	bl	800259c <HAL_DMA_GetState>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d049      	beq.n	80044ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	4a69      	ldr	r2, [pc, #420]	; (8004600 <I2C_Slave_STOPF+0x258>)
 800445c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe f824 	bl	80024b0 <HAL_DMA_Abort_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d03d      	beq.n	80044ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004478:	4610      	mov	r0, r2
 800447a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800447c:	e035      	b.n	80044ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	b29a      	uxth	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f043 0204 	orr.w	r2, r3, #4
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe f870 	bl	800259c <HAL_DMA_GetState>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d014      	beq.n	80044ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c6:	4a4e      	ldr	r2, [pc, #312]	; (8004600 <I2C_Slave_STOPF+0x258>)
 80044c8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fd ffee 	bl	80024b0 <HAL_DMA_Abort_IT>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044e4:	4610      	mov	r0, r2
 80044e6:	4798      	blx	r3
 80044e8:	e000      	b.n	80044ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d03e      	beq.n	8004574 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d112      	bne.n	800452a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d112      	bne.n	800455e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f043 0204 	orr.w	r2, r3, #4
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f8b3 	bl	80046e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004582:	e039      	b.n	80045f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b2a      	cmp	r3, #42	; 0x2a
 8004588:	d109      	bne.n	800459e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2228      	movs	r2, #40	; 0x28
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7fc fc57 	bl	8000e4c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b28      	cmp	r3, #40	; 0x28
 80045a8:	d111      	bne.n	80045ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <I2C_Slave_STOPF+0x25c>)
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f7fc fbf2 	bl	8000db0 <HAL_I2C_ListenCpltCallback>
}
 80045cc:	e014      	b.n	80045f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	2b22      	cmp	r3, #34	; 0x22
 80045d4:	d002      	beq.n	80045dc <I2C_Slave_STOPF+0x234>
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	2b22      	cmp	r3, #34	; 0x22
 80045da:	d10d      	bne.n	80045f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fc fc2a 	bl	8000e4c <HAL_I2C_SlaveRxCpltCallback>
}
 80045f8:	bf00      	nop
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	0800494d 	.word	0x0800494d
 8004604:	ffff0000 	.word	0xffff0000

08004608 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d002      	beq.n	800462a <I2C_Slave_AF+0x22>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b20      	cmp	r3, #32
 8004628:	d129      	bne.n	800467e <I2C_Slave_AF+0x76>
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b28      	cmp	r3, #40	; 0x28
 800462e:	d126      	bne.n	800467e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a2c      	ldr	r2, [pc, #176]	; (80046e4 <I2C_Slave_AF+0xdc>)
 8004634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004644:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800464e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fc fb9a 	bl	8000db0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800467c:	e02e      	b.n	80046dc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	2b21      	cmp	r3, #33	; 0x21
 8004682:	d126      	bne.n	80046d2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a17      	ldr	r2, [pc, #92]	; (80046e4 <I2C_Slave_AF+0xdc>)
 8004688:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2221      	movs	r2, #33	; 0x21
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc fc02 	bl	8000ed4 <HAL_I2C_SlaveTxCpltCallback>
}
 80046d0:	e004      	b.n	80046dc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046da:	615a      	str	r2, [r3, #20]
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	ffff0000 	.word	0xffff0000

080046e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004700:	7bbb      	ldrb	r3, [r7, #14]
 8004702:	2b10      	cmp	r3, #16
 8004704:	d002      	beq.n	800470c <I2C_ITError+0x24>
 8004706:	7bbb      	ldrb	r3, [r7, #14]
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d10a      	bne.n	8004722 <I2C_ITError+0x3a>
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	2b22      	cmp	r3, #34	; 0x22
 8004710:	d107      	bne.n	8004722 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004720:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004728:	2b28      	cmp	r3, #40	; 0x28
 800472a:	d107      	bne.n	800473c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2228      	movs	r2, #40	; 0x28
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800473a:	e015      	b.n	8004768 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474a:	d00a      	beq.n	8004762 <I2C_ITError+0x7a>
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	2b60      	cmp	r3, #96	; 0x60
 8004750:	d007      	beq.n	8004762 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004776:	d161      	bne.n	800483c <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004786:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004790:	2b01      	cmp	r3, #1
 8004792:	d020      	beq.n	80047d6 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	4a6a      	ldr	r2, [pc, #424]	; (8004944 <I2C_ITError+0x25c>)
 800479a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7fd fe85 	bl	80024b0 <HAL_DMA_Abort_IT>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8089 	beq.w	80048c0 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047d0:	4610      	mov	r0, r2
 80047d2:	4798      	blx	r3
 80047d4:	e074      	b.n	80048c0 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	4a5a      	ldr	r2, [pc, #360]	; (8004944 <I2C_ITError+0x25c>)
 80047dc:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fd fe64 	bl	80024b0 <HAL_DMA_Abort_IT>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d068      	beq.n	80048c0 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d10b      	bne.n	8004814 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0201 	bic.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004836:	4610      	mov	r0, r2
 8004838:	4798      	blx	r3
 800483a:	e041      	b.n	80048c0 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b60      	cmp	r3, #96	; 0x60
 8004846:	d125      	bne.n	8004894 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d10b      	bne.n	800487c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fc fbcf 	bl	8001030 <HAL_I2C_AbortCpltCallback>
 8004892:	e015      	b.n	80048c0 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	2b40      	cmp	r3, #64	; 0x40
 80048a0:	d10b      	bne.n	80048ba <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	b2d2      	uxtb	r2, r2
 80048ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc fb38 	bl	8000f30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10e      	bne.n	80048ee <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048fc:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004904:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b04      	cmp	r3, #4
 8004910:	d113      	bne.n	800493a <I2C_ITError+0x252>
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b28      	cmp	r3, #40	; 0x28
 8004916:	d110      	bne.n	800493a <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a0b      	ldr	r2, [pc, #44]	; (8004948 <I2C_ITError+0x260>)
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7fc fa3b 	bl	8000db0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800493a:	bf00      	nop
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	0800494d 	.word	0x0800494d
 8004948:	ffff0000 	.word	0xffff0000

0800494c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004966:	4b4b      	ldr	r3, [pc, #300]	; (8004a94 <I2C_DMAAbort+0x148>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	08db      	lsrs	r3, r3, #3
 800496c:	4a4a      	ldr	r2, [pc, #296]	; (8004a98 <I2C_DMAAbort+0x14c>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	0a1a      	lsrs	r2, r3, #8
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	00da      	lsls	r2, r3, #3
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d106      	bne.n	8004994 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f043 0220 	orr.w	r2, r3, #32
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004992:	e00a      	b.n	80049aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3b01      	subs	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a8:	d0ea      	beq.n	8004980 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b6:	2200      	movs	r2, #0
 80049b8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	2200      	movs	r2, #0
 80049c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2200      	movs	r2, #0
 80049de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ec:	2200      	movs	r2, #0
 80049ee:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fc:	2200      	movs	r2, #0
 80049fe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0201 	bic.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b60      	cmp	r3, #96	; 0x60
 8004a1a:	d10e      	bne.n	8004a3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a32:	6978      	ldr	r0, [r7, #20]
 8004a34:	f7fc fafc 	bl	8001030 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a38:	e027      	b.n	8004a8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a3a:	7cfb      	ldrb	r3, [r7, #19]
 8004a3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a40:	2b28      	cmp	r3, #40	; 0x28
 8004a42:	d117      	bne.n	8004a74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2200      	movs	r2, #0
 8004a68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	2228      	movs	r2, #40	; 0x28
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a72:	e007      	b.n	8004a84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a84:	6978      	ldr	r0, [r7, #20]
 8004a86:	f7fc fa53 	bl	8000f30 <HAL_I2C_ErrorCallback>
}
 8004a8a:	bf00      	nop
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000048 	.word	0x20000048
 8004a98:	14f8b589 	.word	0x14f8b589

08004a9c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004aa8:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	08db      	lsrs	r3, r3, #3
 8004aae:	4a13      	ldr	r2, [pc, #76]	; (8004afc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab4:	0a1a      	lsrs	r2, r3, #8
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d107      	bne.n	8004ada <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	f043 0220 	orr.w	r2, r3, #32
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e008      	b.n	8004aec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae8:	d0e9      	beq.n	8004abe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000048 	.word	0x20000048
 8004afc:	14f8b589 	.word	0x14f8b589

08004b00 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004b10:	d103      	bne.n	8004b1a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b18:	e007      	b.n	8004b2a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004b22:	d102      	bne.n	8004b2a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2208      	movs	r2, #8
 8004b28:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr

08004b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e272      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 8087 	beq.w	8004c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b54:	4b92      	ldr	r3, [pc, #584]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d00c      	beq.n	8004b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b60:	4b8f      	ldr	r3, [pc, #572]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d112      	bne.n	8004b92 <HAL_RCC_OscConfig+0x5e>
 8004b6c:	4b8c      	ldr	r3, [pc, #560]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d10b      	bne.n	8004b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7a:	4b89      	ldr	r3, [pc, #548]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d06c      	beq.n	8004c60 <HAL_RCC_OscConfig+0x12c>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d168      	bne.n	8004c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e24c      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x76>
 8004b9c:	4b80      	ldr	r3, [pc, #512]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a7f      	ldr	r2, [pc, #508]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	e02e      	b.n	8004c08 <HAL_RCC_OscConfig+0xd4>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x98>
 8004bb2:	4b7b      	ldr	r3, [pc, #492]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a7a      	ldr	r2, [pc, #488]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b78      	ldr	r3, [pc, #480]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a77      	ldr	r2, [pc, #476]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e01d      	b.n	8004c08 <HAL_RCC_OscConfig+0xd4>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0xbc>
 8004bd6:	4b72      	ldr	r3, [pc, #456]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a71      	ldr	r2, [pc, #452]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b6f      	ldr	r3, [pc, #444]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a6e      	ldr	r2, [pc, #440]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0xd4>
 8004bf0:	4b6b      	ldr	r3, [pc, #428]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a6a      	ldr	r2, [pc, #424]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b68      	ldr	r3, [pc, #416]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a67      	ldr	r2, [pc, #412]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7fd f8e6 	bl	8001de0 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c18:	f7fd f8e2 	bl	8001de0 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e200      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b5d      	ldr	r3, [pc, #372]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0xe4>
 8004c36:	e014      	b.n	8004c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fd f8d2 	bl	8001de0 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c40:	f7fd f8ce 	bl	8001de0 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e1ec      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c52:	4b53      	ldr	r3, [pc, #332]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x10c>
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d063      	beq.n	8004d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c6e:	4b4c      	ldr	r3, [pc, #304]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c7a:	4b49      	ldr	r3, [pc, #292]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d11c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x18c>
 8004c86:	4b46      	ldr	r3, [pc, #280]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c92:	4b43      	ldr	r3, [pc, #268]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_RCC_OscConfig+0x176>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e1c0      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004caa:	4b3d      	ldr	r3, [pc, #244]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4939      	ldr	r1, [pc, #228]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	e03a      	b.n	8004d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc8:	4b36      	ldr	r3, [pc, #216]	; (8004da4 <HAL_RCC_OscConfig+0x270>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cce:	f7fd f887 	bl	8001de0 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd6:	f7fd f883 	bl	8001de0 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e1a1      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce8:	4b2d      	ldr	r3, [pc, #180]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4927      	ldr	r1, [pc, #156]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	600b      	str	r3, [r1, #0]
 8004d08:	e015      	b.n	8004d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0a:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_RCC_OscConfig+0x270>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fd f866 	bl	8001de0 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d18:	f7fd f862 	bl	8001de0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e180      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d03a      	beq.n	8004db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d019      	beq.n	8004d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4a:	4b17      	ldr	r3, [pc, #92]	; (8004da8 <HAL_RCC_OscConfig+0x274>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d50:	f7fd f846 	bl	8001de0 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d58:	f7fd f842 	bl	8001de0 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e160      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d76:	2001      	movs	r0, #1
 8004d78:	f000 fac4 	bl	8005304 <RCC_Delay>
 8004d7c:	e01c      	b.n	8004db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d7e:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <HAL_RCC_OscConfig+0x274>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d84:	f7fd f82c 	bl	8001de0 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d8a:	e00f      	b.n	8004dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d8c:	f7fd f828 	bl	8001de0 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d908      	bls.n	8004dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e146      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000
 8004da4:	42420000 	.word	0x42420000
 8004da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dac:	4b92      	ldr	r3, [pc, #584]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e9      	bne.n	8004d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80a6 	beq.w	8004f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dca:	4b8b      	ldr	r3, [pc, #556]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10d      	bne.n	8004df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd6:	4b88      	ldr	r3, [pc, #544]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	4a87      	ldr	r2, [pc, #540]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de0:	61d3      	str	r3, [r2, #28]
 8004de2:	4b85      	ldr	r3, [pc, #532]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dee:	2301      	movs	r3, #1
 8004df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df2:	4b82      	ldr	r3, [pc, #520]	; (8004ffc <HAL_RCC_OscConfig+0x4c8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d118      	bne.n	8004e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dfe:	4b7f      	ldr	r3, [pc, #508]	; (8004ffc <HAL_RCC_OscConfig+0x4c8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a7e      	ldr	r2, [pc, #504]	; (8004ffc <HAL_RCC_OscConfig+0x4c8>)
 8004e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0a:	f7fc ffe9 	bl	8001de0 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e12:	f7fc ffe5 	bl	8001de0 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b64      	cmp	r3, #100	; 0x64
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e103      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e24:	4b75      	ldr	r3, [pc, #468]	; (8004ffc <HAL_RCC_OscConfig+0x4c8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f0      	beq.n	8004e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d106      	bne.n	8004e46 <HAL_RCC_OscConfig+0x312>
 8004e38:	4b6f      	ldr	r3, [pc, #444]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	4a6e      	ldr	r2, [pc, #440]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	6213      	str	r3, [r2, #32]
 8004e44:	e02d      	b.n	8004ea2 <HAL_RCC_OscConfig+0x36e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x334>
 8004e4e:	4b6a      	ldr	r3, [pc, #424]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4a69      	ldr	r2, [pc, #420]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e54:	f023 0301 	bic.w	r3, r3, #1
 8004e58:	6213      	str	r3, [r2, #32]
 8004e5a:	4b67      	ldr	r3, [pc, #412]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	4a66      	ldr	r2, [pc, #408]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e60:	f023 0304 	bic.w	r3, r3, #4
 8004e64:	6213      	str	r3, [r2, #32]
 8004e66:	e01c      	b.n	8004ea2 <HAL_RCC_OscConfig+0x36e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	2b05      	cmp	r3, #5
 8004e6e:	d10c      	bne.n	8004e8a <HAL_RCC_OscConfig+0x356>
 8004e70:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	4a60      	ldr	r2, [pc, #384]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e76:	f043 0304 	orr.w	r3, r3, #4
 8004e7a:	6213      	str	r3, [r2, #32]
 8004e7c:	4b5e      	ldr	r3, [pc, #376]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	4a5d      	ldr	r2, [pc, #372]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6213      	str	r3, [r2, #32]
 8004e88:	e00b      	b.n	8004ea2 <HAL_RCC_OscConfig+0x36e>
 8004e8a:	4b5b      	ldr	r3, [pc, #364]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4a5a      	ldr	r2, [pc, #360]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	6213      	str	r3, [r2, #32]
 8004e96:	4b58      	ldr	r3, [pc, #352]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	4a57      	ldr	r2, [pc, #348]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d015      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eaa:	f7fc ff99 	bl	8001de0 <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb0:	e00a      	b.n	8004ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fc ff95 	bl	8001de0 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e0b1      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec8:	4b4b      	ldr	r3, [pc, #300]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ee      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x37e>
 8004ed4:	e014      	b.n	8004f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ed6:	f7fc ff83 	bl	8001de0 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fc ff7f 	bl	8001de0 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e09b      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef4:	4b40      	ldr	r3, [pc, #256]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ee      	bne.n	8004ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d105      	bne.n	8004f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f06:	4b3c      	ldr	r3, [pc, #240]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	4a3b      	ldr	r2, [pc, #236]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8087 	beq.w	800502a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f1c:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 030c 	and.w	r3, r3, #12
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d061      	beq.n	8004fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d146      	bne.n	8004fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f30:	4b33      	ldr	r3, [pc, #204]	; (8005000 <HAL_RCC_OscConfig+0x4cc>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f36:	f7fc ff53 	bl	8001de0 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3e:	f7fc ff4f 	bl	8001de0 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e06d      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f50:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f0      	bne.n	8004f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f64:	d108      	bne.n	8004f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f66:	4b24      	ldr	r3, [pc, #144]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	4921      	ldr	r1, [pc, #132]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f78:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a19      	ldr	r1, [r3, #32]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	491b      	ldr	r1, [pc, #108]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f90:	4b1b      	ldr	r3, [pc, #108]	; (8005000 <HAL_RCC_OscConfig+0x4cc>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f96:	f7fc ff23 	bl	8001de0 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9e:	f7fc ff1f 	bl	8001de0 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e03d      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fb0:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x46a>
 8004fbc:	e035      	b.n	800502a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b10      	ldr	r3, [pc, #64]	; (8005000 <HAL_RCC_OscConfig+0x4cc>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fc ff0c 	bl	8001de0 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fc ff08 	bl	8001de0 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e026      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <HAL_RCC_OscConfig+0x4c4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x498>
 8004fea:	e01e      	b.n	800502a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d107      	bne.n	8005004 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e019      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	40007000 	.word	0x40007000
 8005000:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_RCC_OscConfig+0x500>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	429a      	cmp	r2, r3
 8005016:	d106      	bne.n	8005026 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005022:	429a      	cmp	r2, r3
 8005024:	d001      	beq.n	800502a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40021000 	.word	0x40021000

08005038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0d0      	b.n	80051ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800504c:	4b6a      	ldr	r3, [pc, #424]	; (80051f8 <HAL_RCC_ClockConfig+0x1c0>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d910      	bls.n	800507c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505a:	4b67      	ldr	r3, [pc, #412]	; (80051f8 <HAL_RCC_ClockConfig+0x1c0>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 0207 	bic.w	r2, r3, #7
 8005062:	4965      	ldr	r1, [pc, #404]	; (80051f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	4313      	orrs	r3, r2
 8005068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b63      	ldr	r3, [pc, #396]	; (80051f8 <HAL_RCC_ClockConfig+0x1c0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0b8      	b.n	80051ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d020      	beq.n	80050ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005094:	4b59      	ldr	r3, [pc, #356]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	4a58      	ldr	r2, [pc, #352]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 800509a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800509e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050ac:	4b53      	ldr	r3, [pc, #332]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	4a52      	ldr	r2, [pc, #328]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80050b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b50      	ldr	r3, [pc, #320]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	494d      	ldr	r1, [pc, #308]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d040      	beq.n	8005158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	4b47      	ldr	r3, [pc, #284]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d115      	bne.n	8005116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e07f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d107      	bne.n	8005106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050f6:	4b41      	ldr	r3, [pc, #260]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e073      	b.n	80051ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005106:	4b3d      	ldr	r3, [pc, #244]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e06b      	b.n	80051ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005116:	4b39      	ldr	r3, [pc, #228]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f023 0203 	bic.w	r2, r3, #3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	4936      	ldr	r1, [pc, #216]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	4313      	orrs	r3, r2
 8005126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005128:	f7fc fe5a 	bl	8001de0 <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800512e:	e00a      	b.n	8005146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005130:	f7fc fe56 	bl	8001de0 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f241 3288 	movw	r2, #5000	; 0x1388
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e053      	b.n	80051ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005146:	4b2d      	ldr	r3, [pc, #180]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f003 020c 	and.w	r2, r3, #12
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	429a      	cmp	r2, r3
 8005156:	d1eb      	bne.n	8005130 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005158:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <HAL_RCC_ClockConfig+0x1c0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d210      	bcs.n	8005188 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005166:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 0207 	bic.w	r2, r3, #7
 800516e:	4922      	ldr	r1, [pc, #136]	; (80051f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b20      	ldr	r3, [pc, #128]	; (80051f8 <HAL_RCC_ClockConfig+0x1c0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e032      	b.n	80051ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4916      	ldr	r1, [pc, #88]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	490e      	ldr	r1, [pc, #56]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051c6:	f000 f821 	bl	800520c <HAL_RCC_GetSysClockFreq>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_ClockConfig+0x1c4>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	490a      	ldr	r1, [pc, #40]	; (8005200 <HAL_RCC_ClockConfig+0x1c8>)
 80051d8:	5ccb      	ldrb	r3, [r1, r3]
 80051da:	fa22 f303 	lsr.w	r3, r2, r3
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <HAL_RCC_ClockConfig+0x1cc>)
 80051e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_RCC_ClockConfig+0x1d0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fc fdb8 	bl	8001d5c <HAL_InitTick>

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40022000 	.word	0x40022000
 80051fc:	40021000 	.word	0x40021000
 8005200:	08006708 	.word	0x08006708
 8005204:	20000048 	.word	0x20000048
 8005208:	2000004c 	.word	0x2000004c

0800520c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800520c:	b490      	push	{r4, r7}
 800520e:	b08a      	sub	sp, #40	; 0x28
 8005210:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005212:	4b29      	ldr	r3, [pc, #164]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8005214:	1d3c      	adds	r4, r7, #4
 8005216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800521c:	f240 2301 	movw	r3, #513	; 0x201
 8005220:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	2300      	movs	r3, #0
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	2300      	movs	r3, #0
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005236:	4b21      	ldr	r3, [pc, #132]	; (80052bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b04      	cmp	r3, #4
 8005244:	d002      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x40>
 8005246:	2b08      	cmp	r3, #8
 8005248:	d003      	beq.n	8005252 <HAL_RCC_GetSysClockFreq+0x46>
 800524a:	e02b      	b.n	80052a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800524c:	4b1c      	ldr	r3, [pc, #112]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800524e:	623b      	str	r3, [r7, #32]
      break;
 8005250:	e02b      	b.n	80052aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	0c9b      	lsrs	r3, r3, #18
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	3328      	adds	r3, #40	; 0x28
 800525c:	443b      	add	r3, r7
 800525e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005262:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d012      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800526e:	4b13      	ldr	r3, [pc, #76]	; (80052bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	0c5b      	lsrs	r3, r3, #17
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	3328      	adds	r3, #40	; 0x28
 800527a:	443b      	add	r3, r7
 800527c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005280:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	4a0e      	ldr	r2, [pc, #56]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005286:	fb03 f202 	mul.w	r2, r3, r2
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
 8005292:	e004      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4a0b      	ldr	r2, [pc, #44]	; (80052c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005298:	fb02 f303 	mul.w	r3, r2, r3
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	623b      	str	r3, [r7, #32]
      break;
 80052a2:	e002      	b.n	80052aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80052a4:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80052a6:	623b      	str	r3, [r7, #32]
      break;
 80052a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052aa:	6a3b      	ldr	r3, [r7, #32]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3728      	adds	r7, #40	; 0x28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bc90      	pop	{r4, r7}
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	080066f8 	.word	0x080066f8
 80052bc:	40021000 	.word	0x40021000
 80052c0:	007a1200 	.word	0x007a1200
 80052c4:	003d0900 	.word	0x003d0900

080052c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052cc:	4b02      	ldr	r3, [pc, #8]	; (80052d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80052ce:	681b      	ldr	r3, [r3, #0]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc80      	pop	{r7}
 80052d6:	4770      	bx	lr
 80052d8:	20000048 	.word	0x20000048

080052dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052e0:	f7ff fff2 	bl	80052c8 <HAL_RCC_GetHCLKFreq>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	4903      	ldr	r1, [pc, #12]	; (8005300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f2:	5ccb      	ldrb	r3, [r1, r3]
 80052f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40021000 	.word	0x40021000
 8005300:	08006718 	.word	0x08006718

08005304 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <RCC_Delay+0x34>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0a      	ldr	r2, [pc, #40]	; (800533c <RCC_Delay+0x38>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	0a5b      	lsrs	r3, r3, #9
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	fb02 f303 	mul.w	r3, r2, r3
 800531e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005320:	bf00      	nop
  }
  while (Delay --);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1e5a      	subs	r2, r3, #1
 8005326:	60fa      	str	r2, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1f9      	bne.n	8005320 <RCC_Delay+0x1c>
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	20000048 	.word	0x20000048
 800533c:	10624dd3 	.word	0x10624dd3

08005340 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d07d      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800535c:	2300      	movs	r3, #0
 800535e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005360:	4b4f      	ldr	r3, [pc, #316]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10d      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536c:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	4a4b      	ldr	r2, [pc, #300]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005376:	61d3      	str	r3, [r2, #28]
 8005378:	4b49      	ldr	r3, [pc, #292]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005384:	2301      	movs	r3, #1
 8005386:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005388:	4b46      	ldr	r3, [pc, #280]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005390:	2b00      	cmp	r3, #0
 8005392:	d118      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005394:	4b43      	ldr	r3, [pc, #268]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a42      	ldr	r2, [pc, #264]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800539a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a0:	f7fc fd1e 	bl	8001de0 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a6:	e008      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a8:	f7fc fd1a 	bl	8001de0 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e06d      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ba:	4b3a      	ldr	r3, [pc, #232]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053c6:	4b36      	ldr	r3, [pc, #216]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d02e      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d027      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053e4:	4b2e      	ldr	r3, [pc, #184]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ee:	4b2e      	ldr	r3, [pc, #184]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053f4:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053fa:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d014      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540a:	f7fc fce9 	bl	8001de0 <HAL_GetTick>
 800540e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005410:	e00a      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005412:	f7fc fce5 	bl	8001de0 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005420:	4293      	cmp	r3, r2
 8005422:	d901      	bls.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e036      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005428:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0ee      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005434:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4917      	ldr	r1, [pc, #92]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005442:	4313      	orrs	r3, r2
 8005444:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d105      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544c:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005456:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005464:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	490b      	ldr	r1, [pc, #44]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005472:	4313      	orrs	r3, r2
 8005474:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005482:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4904      	ldr	r1, [pc, #16]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40007000 	.word	0x40007000
 80054a8:	42420440 	.word	0x42420440

080054ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e041      	b.n	8005542 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fc f9b0 	bl	8001838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4619      	mov	r1, r3
 80054ea:	4610      	mov	r0, r2
 80054ec:	f000 fce0 	bl	8005eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d109      	bne.n	8005570 <HAL_TIM_PWM_Start+0x24>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e022      	b.n	80055b6 <HAL_TIM_PWM_Start+0x6a>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	2b04      	cmp	r3, #4
 8005574:	d109      	bne.n	800558a <HAL_TIM_PWM_Start+0x3e>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	e015      	b.n	80055b6 <HAL_TIM_PWM_Start+0x6a>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d109      	bne.n	80055a4 <HAL_TIM_PWM_Start+0x58>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	e008      	b.n	80055b6 <HAL_TIM_PWM_Start+0x6a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	bf14      	ite	ne
 80055b0:	2301      	movne	r3, #1
 80055b2:	2300      	moveq	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e05e      	b.n	800567c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_PWM_Start+0x82>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055cc:	e013      	b.n	80055f6 <HAL_TIM_PWM_Start+0xaa>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d104      	bne.n	80055de <HAL_TIM_PWM_Start+0x92>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055dc:	e00b      	b.n	80055f6 <HAL_TIM_PWM_Start+0xaa>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d104      	bne.n	80055ee <HAL_TIM_PWM_Start+0xa2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ec:	e003      	b.n	80055f6 <HAL_TIM_PWM_Start+0xaa>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2201      	movs	r2, #1
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 ff4d 	bl	800649e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <HAL_TIM_PWM_Start+0x138>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d107      	bne.n	800561e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800561c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a18      	ldr	r2, [pc, #96]	; (8005684 <HAL_TIM_PWM_Start+0x138>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00e      	beq.n	8005646 <HAL_TIM_PWM_Start+0xfa>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005630:	d009      	beq.n	8005646 <HAL_TIM_PWM_Start+0xfa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a14      	ldr	r2, [pc, #80]	; (8005688 <HAL_TIM_PWM_Start+0x13c>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <HAL_TIM_PWM_Start+0xfa>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a12      	ldr	r2, [pc, #72]	; (800568c <HAL_TIM_PWM_Start+0x140>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d111      	bne.n	800566a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b06      	cmp	r3, #6
 8005656:	d010      	beq.n	800567a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005668:	e007      	b.n	800567a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0201 	orr.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800

08005690 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e041      	b.n	8005726 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fc f8ee 	bl	8001898 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f000 fbee 	bl	8005eb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d104      	bne.n	800574a <HAL_TIM_IC_Start_IT+0x1a>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005746:	b2db      	uxtb	r3, r3
 8005748:	e013      	b.n	8005772 <HAL_TIM_IC_Start_IT+0x42>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b04      	cmp	r3, #4
 800574e:	d104      	bne.n	800575a <HAL_TIM_IC_Start_IT+0x2a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005756:	b2db      	uxtb	r3, r3
 8005758:	e00b      	b.n	8005772 <HAL_TIM_IC_Start_IT+0x42>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d104      	bne.n	800576a <HAL_TIM_IC_Start_IT+0x3a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005766:	b2db      	uxtb	r3, r3
 8005768:	e003      	b.n	8005772 <HAL_TIM_IC_Start_IT+0x42>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005770:	b2db      	uxtb	r3, r3
 8005772:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d104      	bne.n	8005784 <HAL_TIM_IC_Start_IT+0x54>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005780:	b2db      	uxtb	r3, r3
 8005782:	e013      	b.n	80057ac <HAL_TIM_IC_Start_IT+0x7c>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b04      	cmp	r3, #4
 8005788:	d104      	bne.n	8005794 <HAL_TIM_IC_Start_IT+0x64>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005790:	b2db      	uxtb	r3, r3
 8005792:	e00b      	b.n	80057ac <HAL_TIM_IC_Start_IT+0x7c>
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b08      	cmp	r3, #8
 8005798:	d104      	bne.n	80057a4 <HAL_TIM_IC_Start_IT+0x74>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	e003      	b.n	80057ac <HAL_TIM_IC_Start_IT+0x7c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d102      	bne.n	80057ba <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80057b4:	7bbb      	ldrb	r3, [r7, #14]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d001      	beq.n	80057be <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e0b3      	b.n	8005926 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <HAL_TIM_IC_Start_IT+0x9e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057cc:	e013      	b.n	80057f6 <HAL_TIM_IC_Start_IT+0xc6>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d104      	bne.n	80057de <HAL_TIM_IC_Start_IT+0xae>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057dc:	e00b      	b.n	80057f6 <HAL_TIM_IC_Start_IT+0xc6>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_IC_Start_IT+0xbe>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ec:	e003      	b.n	80057f6 <HAL_TIM_IC_Start_IT+0xc6>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2202      	movs	r2, #2
 80057f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_IC_Start_IT+0xd6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005804:	e013      	b.n	800582e <HAL_TIM_IC_Start_IT+0xfe>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b04      	cmp	r3, #4
 800580a:	d104      	bne.n	8005816 <HAL_TIM_IC_Start_IT+0xe6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005814:	e00b      	b.n	800582e <HAL_TIM_IC_Start_IT+0xfe>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b08      	cmp	r3, #8
 800581a:	d104      	bne.n	8005826 <HAL_TIM_IC_Start_IT+0xf6>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005824:	e003      	b.n	800582e <HAL_TIM_IC_Start_IT+0xfe>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b0c      	cmp	r3, #12
 8005832:	d841      	bhi.n	80058b8 <HAL_TIM_IC_Start_IT+0x188>
 8005834:	a201      	add	r2, pc, #4	; (adr r2, 800583c <HAL_TIM_IC_Start_IT+0x10c>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	08005871 	.word	0x08005871
 8005840:	080058b9 	.word	0x080058b9
 8005844:	080058b9 	.word	0x080058b9
 8005848:	080058b9 	.word	0x080058b9
 800584c:	08005883 	.word	0x08005883
 8005850:	080058b9 	.word	0x080058b9
 8005854:	080058b9 	.word	0x080058b9
 8005858:	080058b9 	.word	0x080058b9
 800585c:	08005895 	.word	0x08005895
 8005860:	080058b9 	.word	0x080058b9
 8005864:	080058b9 	.word	0x080058b9
 8005868:	080058b9 	.word	0x080058b9
 800586c:	080058a7 	.word	0x080058a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f042 0202 	orr.w	r2, r2, #2
 800587e:	60da      	str	r2, [r3, #12]
      break;
 8005880:	e01b      	b.n	80058ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68da      	ldr	r2, [r3, #12]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0204 	orr.w	r2, r2, #4
 8005890:	60da      	str	r2, [r3, #12]
      break;
 8005892:	e012      	b.n	80058ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0208 	orr.w	r2, r2, #8
 80058a2:	60da      	str	r2, [r3, #12]
      break;
 80058a4:	e009      	b.n	80058ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0210 	orr.w	r2, r2, #16
 80058b4:	60da      	str	r2, [r3, #12]
      break;
 80058b6:	e000      	b.n	80058ba <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80058b8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2201      	movs	r2, #1
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fdeb 	bl	800649e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a18      	ldr	r2, [pc, #96]	; (8005930 <HAL_TIM_IC_Start_IT+0x200>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d00e      	beq.n	80058f0 <HAL_TIM_IC_Start_IT+0x1c0>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058da:	d009      	beq.n	80058f0 <HAL_TIM_IC_Start_IT+0x1c0>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a14      	ldr	r2, [pc, #80]	; (8005934 <HAL_TIM_IC_Start_IT+0x204>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d004      	beq.n	80058f0 <HAL_TIM_IC_Start_IT+0x1c0>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <HAL_TIM_IC_Start_IT+0x208>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d111      	bne.n	8005914 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2b06      	cmp	r3, #6
 8005900:	d010      	beq.n	8005924 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0201 	orr.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005912:	e007      	b.n	8005924 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800

0800593c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b02      	cmp	r3, #2
 8005950:	d122      	bne.n	8005998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b02      	cmp	r3, #2
 800595e:	d11b      	bne.n	8005998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0202 	mvn.w	r2, #2
 8005968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7fc f858 	bl	8001a34 <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa76 	bl	8005e78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fa7c 	bl	8005e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d122      	bne.n	80059ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d11b      	bne.n	80059ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0204 	mvn.w	r2, #4
 80059bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fc f82e 	bl	8001a34 <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa4c 	bl	8005e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fa52 	bl	8005e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d122      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d11b      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0208 	mvn.w	r2, #8
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2204      	movs	r2, #4
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f003 0303 	and.w	r3, r3, #3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fc f804 	bl	8001a34 <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa22 	bl	8005e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fa28 	bl	8005e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0310 	and.w	r3, r3, #16
 8005a4a:	2b10      	cmp	r3, #16
 8005a4c:	d122      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d11b      	bne.n	8005a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0210 	mvn.w	r2, #16
 8005a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fb ffda 	bl	8001a34 <HAL_TIM_IC_CaptureCallback>
 8005a80:	e005      	b.n	8005a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f9f8 	bl	8005e78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f9fe 	bl	8005e8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d107      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0201 	mvn.w	r2, #1
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fc f8f0 	bl	8001ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aca:	2b80      	cmp	r3, #128	; 0x80
 8005acc:	d10e      	bne.n	8005aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	2b80      	cmp	r3, #128	; 0x80
 8005ada:	d107      	bne.n	8005aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fdb6 	bl	8006658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d10e      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d107      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9c2 	bl	8005e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	d10e      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0320 	and.w	r3, r3, #32
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0220 	mvn.w	r2, #32
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fd81 	bl	8006646 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e082      	b.n	8005c6c <HAL_TIM_IC_ConfigChannel+0x120>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d11b      	bne.n	8005bac <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6819      	ldr	r1, [r3, #0]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f000 fb7e 	bl	8006284 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 020c 	bic.w	r2, r2, #12
 8005b96:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6999      	ldr	r1, [r3, #24]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	619a      	str	r2, [r3, #24]
 8005baa:	e05a      	b.n	8005c62 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d11c      	bne.n	8005bec <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	6819      	ldr	r1, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f000 fbb9 	bl	8006338 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699a      	ldr	r2, [r3, #24]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bd4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6999      	ldr	r1, [r3, #24]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	021a      	lsls	r2, r3, #8
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	619a      	str	r2, [r3, #24]
 8005bea:	e03a      	b.n	8005c62 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d11b      	bne.n	8005c2a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f000 fbd5 	bl	80063b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 020c 	bic.w	r2, r2, #12
 8005c14:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69d9      	ldr	r1, [r3, #28]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	61da      	str	r2, [r3, #28]
 8005c28:	e01b      	b.n	8005c62 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	6819      	ldr	r1, [r3, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f000 fbf4 	bl	8006426 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c4c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e0ac      	b.n	8005de8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b0c      	cmp	r3, #12
 8005c9a:	f200 809f 	bhi.w	8005ddc <HAL_TIM_PWM_ConfigChannel+0x168>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cd9 	.word	0x08005cd9
 8005ca8:	08005ddd 	.word	0x08005ddd
 8005cac:	08005ddd 	.word	0x08005ddd
 8005cb0:	08005ddd 	.word	0x08005ddd
 8005cb4:	08005d19 	.word	0x08005d19
 8005cb8:	08005ddd 	.word	0x08005ddd
 8005cbc:	08005ddd 	.word	0x08005ddd
 8005cc0:	08005ddd 	.word	0x08005ddd
 8005cc4:	08005d5b 	.word	0x08005d5b
 8005cc8:	08005ddd 	.word	0x08005ddd
 8005ccc:	08005ddd 	.word	0x08005ddd
 8005cd0:	08005ddd 	.word	0x08005ddd
 8005cd4:	08005d9b 	.word	0x08005d9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f948 	bl	8005f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0208 	orr.w	r2, r2, #8
 8005cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0204 	bic.w	r2, r2, #4
 8005d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6999      	ldr	r1, [r3, #24]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	691a      	ldr	r2, [r3, #16]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	619a      	str	r2, [r3, #24]
      break;
 8005d16:	e062      	b.n	8005dde <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 f98e 	bl	8006040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699a      	ldr	r2, [r3, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6999      	ldr	r1, [r3, #24]
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	021a      	lsls	r2, r3, #8
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	619a      	str	r2, [r3, #24]
      break;
 8005d58:	e041      	b.n	8005dde <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 f9d7 	bl	8006114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0208 	orr.w	r2, r2, #8
 8005d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69da      	ldr	r2, [r3, #28]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0204 	bic.w	r2, r2, #4
 8005d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	69d9      	ldr	r1, [r3, #28]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	61da      	str	r2, [r3, #28]
      break;
 8005d98:	e021      	b.n	8005dde <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68b9      	ldr	r1, [r7, #8]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f000 fa21 	bl	80061e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69da      	ldr	r2, [r3, #28]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69d9      	ldr	r1, [r3, #28]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	021a      	lsls	r2, r3, #8
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	61da      	str	r2, [r3, #28]
      break;
 8005dda:	e000      	b.n	8005dde <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005ddc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b0c      	cmp	r3, #12
 8005e02:	d831      	bhi.n	8005e68 <HAL_TIM_ReadCapturedValue+0x78>
 8005e04:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e41 	.word	0x08005e41
 8005e10:	08005e69 	.word	0x08005e69
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005e69 	.word	0x08005e69
 8005e1c:	08005e4b 	.word	0x08005e4b
 8005e20:	08005e69 	.word	0x08005e69
 8005e24:	08005e69 	.word	0x08005e69
 8005e28:	08005e69 	.word	0x08005e69
 8005e2c:	08005e55 	.word	0x08005e55
 8005e30:	08005e69 	.word	0x08005e69
 8005e34:	08005e69 	.word	0x08005e69
 8005e38:	08005e69 	.word	0x08005e69
 8005e3c:	08005e5f 	.word	0x08005e5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e46:	60fb      	str	r3, [r7, #12]

      break;
 8005e48:	e00f      	b.n	8005e6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	60fb      	str	r3, [r7, #12]

      break;
 8005e52:	e00a      	b.n	8005e6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	60fb      	str	r3, [r7, #12]

      break;
 8005e5c:	e005      	b.n	8005e6a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e64:	60fb      	str	r3, [r7, #12]

      break;
 8005e66:	e000      	b.n	8005e6a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005e68:	bf00      	nop
  }

  return tmpreg;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bc80      	pop	{r7}
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop

08005e78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr
	...

08005eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a29      	ldr	r2, [pc, #164]	; (8005f68 <TIM_Base_SetConfig+0xb8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00b      	beq.n	8005ee0 <TIM_Base_SetConfig+0x30>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ece:	d007      	beq.n	8005ee0 <TIM_Base_SetConfig+0x30>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <TIM_Base_SetConfig+0xbc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_Base_SetConfig+0x30>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <TIM_Base_SetConfig+0xc0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d108      	bne.n	8005ef2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a1c      	ldr	r2, [pc, #112]	; (8005f68 <TIM_Base_SetConfig+0xb8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00b      	beq.n	8005f12 <TIM_Base_SetConfig+0x62>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f00:	d007      	beq.n	8005f12 <TIM_Base_SetConfig+0x62>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <TIM_Base_SetConfig+0xbc>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_Base_SetConfig+0x62>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a18      	ldr	r2, [pc, #96]	; (8005f70 <TIM_Base_SetConfig+0xc0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d108      	bne.n	8005f24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <TIM_Base_SetConfig+0xb8>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d103      	bne.n	8005f58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	615a      	str	r2, [r3, #20]
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bc80      	pop	{r7}
 8005f66:	4770      	bx	lr
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40000400 	.word	0x40000400
 8005f70:	40000800 	.word	0x40000800

08005f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f023 0303 	bic.w	r3, r3, #3
 8005faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 0302 	bic.w	r3, r3, #2
 8005fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a1c      	ldr	r2, [pc, #112]	; (800603c <TIM_OC1_SetConfig+0xc8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d10c      	bne.n	8005fea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f023 0308 	bic.w	r3, r3, #8
 8005fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 0304 	bic.w	r3, r3, #4
 8005fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a13      	ldr	r2, [pc, #76]	; (800603c <TIM_OC1_SetConfig+0xc8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d111      	bne.n	8006016 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	621a      	str	r2, [r3, #32]
}
 8006030:	bf00      	nop
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40012c00 	.word	0x40012c00

08006040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f023 0210 	bic.w	r2, r3, #16
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0320 	bic.w	r3, r3, #32
 800608a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <TIM_OC2_SetConfig+0xd0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d10d      	bne.n	80060bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a14      	ldr	r2, [pc, #80]	; (8006110 <TIM_OC2_SetConfig+0xd0>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d113      	bne.n	80060ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	621a      	str	r2, [r3, #32]
}
 8006106:	bf00      	nop
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr
 8006110:	40012c00 	.word	0x40012c00

08006114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0303 	bic.w	r3, r3, #3
 800614a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800615c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <TIM_OC3_SetConfig+0xd0>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d10d      	bne.n	800618e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800618c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a14      	ldr	r2, [pc, #80]	; (80061e4 <TIM_OC3_SetConfig+0xd0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d113      	bne.n	80061be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800619c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	621a      	str	r2, [r3, #32]
}
 80061d8:	bf00      	nop
 80061da:	371c      	adds	r7, #28
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40012c00 	.word	0x40012c00

080061e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	031b      	lsls	r3, r3, #12
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <TIM_OC4_SetConfig+0x98>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d109      	bne.n	800625c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	019b      	lsls	r3, r3, #6
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	621a      	str	r2, [r3, #32]
}
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	bc80      	pop	{r7}
 800627e:	4770      	bx	lr
 8006280:	40012c00 	.word	0x40012c00

08006284 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f023 0201 	bic.w	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a1f      	ldr	r2, [pc, #124]	; (800632c <TIM_TI1_SetConfig+0xa8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00b      	beq.n	80062ca <TIM_TI1_SetConfig+0x46>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b8:	d007      	beq.n	80062ca <TIM_TI1_SetConfig+0x46>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <TIM_TI1_SetConfig+0xac>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_TI1_SetConfig+0x46>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4a1b      	ldr	r2, [pc, #108]	; (8006334 <TIM_TI1_SetConfig+0xb0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d101      	bne.n	80062ce <TIM_TI1_SetConfig+0x4a>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <TIM_TI1_SetConfig+0x4c>
 80062ce:	2300      	movs	r3, #0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d008      	beq.n	80062e6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e003      	b.n	80062ee <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f023 030a 	bic.w	r3, r3, #10
 8006308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	f003 030a 	and.w	r3, r3, #10
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	621a      	str	r2, [r3, #32]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr
 800632c:	40012c00 	.word	0x40012c00
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800

08006338 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
 8006344:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6a1b      	ldr	r3, [r3, #32]
 800634a:	f023 0210 	bic.w	r2, r3, #16
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a1b      	ldr	r3, [r3, #32]
 800635c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006364:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	021b      	lsls	r3, r3, #8
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006376:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	031b      	lsls	r3, r3, #12
 800637c:	b29b      	uxth	r3, r3
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800638a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	621a      	str	r2, [r3, #32]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr

080063b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 0303 	bic.w	r3, r3, #3
 80063dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006400:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	621a      	str	r2, [r3, #32]
}
 800641c:	bf00      	nop
 800641e:	371c      	adds	r7, #28
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr

08006426 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006426:	b480      	push	{r7}
 8006428:	b087      	sub	sp, #28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
 8006432:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006452:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	021b      	lsls	r3, r3, #8
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006464:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	031b      	lsls	r3, r3, #12
 800646a:	b29b      	uxth	r3, r3
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006478:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	031b      	lsls	r3, r3, #12
 800647e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	621a      	str	r2, [r3, #32]
}
 8006494:	bf00      	nop
 8006496:	371c      	adds	r7, #28
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	4770      	bx	lr

0800649e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800649e:	b480      	push	{r7}
 80064a0:	b087      	sub	sp, #28
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	2201      	movs	r2, #1
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	43db      	mvns	r3, r3
 80064c0:	401a      	ands	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a1a      	ldr	r2, [r3, #32]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	f003 031f 	and.w	r3, r3, #31
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	fa01 f303 	lsl.w	r3, r1, r3
 80064d6:	431a      	orrs	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	621a      	str	r2, [r3, #32]
}
 80064dc:	bf00      	nop
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr
	...

080064e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e046      	b.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a16      	ldr	r2, [pc, #88]	; (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00e      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654c:	d009      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a12      	ldr	r2, [pc, #72]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a10      	ldr	r2, [pc, #64]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d10c      	bne.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	4313      	orrs	r3, r2
 8006572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	bc80      	pop	{r7}
 8006596:	4770      	bx	lr
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800

080065a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065bc:	2302      	movs	r3, #2
 80065be:	e03d      	b.n	800663c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006646:	b480      	push	{r7}
 8006648:	b083      	sub	sp, #12
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr

08006658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr
	...

0800666c <__libc_init_array>:
 800666c:	b570      	push	{r4, r5, r6, lr}
 800666e:	2600      	movs	r6, #0
 8006670:	4d0c      	ldr	r5, [pc, #48]	; (80066a4 <__libc_init_array+0x38>)
 8006672:	4c0d      	ldr	r4, [pc, #52]	; (80066a8 <__libc_init_array+0x3c>)
 8006674:	1b64      	subs	r4, r4, r5
 8006676:	10a4      	asrs	r4, r4, #2
 8006678:	42a6      	cmp	r6, r4
 800667a:	d109      	bne.n	8006690 <__libc_init_array+0x24>
 800667c:	f000 f830 	bl	80066e0 <_init>
 8006680:	2600      	movs	r6, #0
 8006682:	4d0a      	ldr	r5, [pc, #40]	; (80066ac <__libc_init_array+0x40>)
 8006684:	4c0a      	ldr	r4, [pc, #40]	; (80066b0 <__libc_init_array+0x44>)
 8006686:	1b64      	subs	r4, r4, r5
 8006688:	10a4      	asrs	r4, r4, #2
 800668a:	42a6      	cmp	r6, r4
 800668c:	d105      	bne.n	800669a <__libc_init_array+0x2e>
 800668e:	bd70      	pop	{r4, r5, r6, pc}
 8006690:	f855 3b04 	ldr.w	r3, [r5], #4
 8006694:	4798      	blx	r3
 8006696:	3601      	adds	r6, #1
 8006698:	e7ee      	b.n	8006678 <__libc_init_array+0xc>
 800669a:	f855 3b04 	ldr.w	r3, [r5], #4
 800669e:	4798      	blx	r3
 80066a0:	3601      	adds	r6, #1
 80066a2:	e7f2      	b.n	800668a <__libc_init_array+0x1e>
 80066a4:	08006720 	.word	0x08006720
 80066a8:	08006720 	.word	0x08006720
 80066ac:	08006720 	.word	0x08006720
 80066b0:	08006724 	.word	0x08006724

080066b4 <memcpy>:
 80066b4:	440a      	add	r2, r1
 80066b6:	4291      	cmp	r1, r2
 80066b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066bc:	d100      	bne.n	80066c0 <memcpy+0xc>
 80066be:	4770      	bx	lr
 80066c0:	b510      	push	{r4, lr}
 80066c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066c6:	4291      	cmp	r1, r2
 80066c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066cc:	d1f9      	bne.n	80066c2 <memcpy+0xe>
 80066ce:	bd10      	pop	{r4, pc}

080066d0 <memset>:
 80066d0:	4603      	mov	r3, r0
 80066d2:	4402      	add	r2, r0
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d100      	bne.n	80066da <memset+0xa>
 80066d8:	4770      	bx	lr
 80066da:	f803 1b01 	strb.w	r1, [r3], #1
 80066de:	e7f9      	b.n	80066d4 <memset+0x4>

080066e0 <_init>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	bf00      	nop
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr

080066ec <_fini>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	bf00      	nop
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr
