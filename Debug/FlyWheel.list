
FlyWheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080073d0  080073d0  000173d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f8  080073f8  0002fc30  2**0
                  CONTENTS
  4 .ARM          00000000  080073f8  080073f8  0002fc30  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073f8  080073f8  0002fc30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f8  080073f8  000173f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073fc  080073fc  000173fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .eeprom       00000030  0800fc00  0800fc00  0002fc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000054  20000000  08007400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000240  20000058  08007454  00020058  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20000298  08007454  00020298  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0002fc30  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105fe  00000000  00000000  0002fc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d3e  00000000  00000000  00040257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  00042f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef8  00000000  00000000  00043fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019413  00000000  00000000  00044ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014575  00000000  00000000  0005e2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f23b  00000000  00000000  00072850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00101a8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004548  00000000  00000000  00101adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000058 	.word	0x20000058
 800012c:	00000000 	.word	0x00000000
 8000130:	080073b8 	.word	0x080073b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000005c 	.word	0x2000005c
 800014c:	080073b8 	.word	0x080073b8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_fmul>:
 8000bf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c00:	bf1e      	ittt	ne
 8000c02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c06:	ea92 0f0c 	teqne	r2, ip
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d06f      	beq.n	8000cf0 <__aeabi_fmul+0xf8>
 8000c10:	441a      	add	r2, r3
 8000c12:	ea80 0c01 	eor.w	ip, r0, r1
 8000c16:	0240      	lsls	r0, r0, #9
 8000c18:	bf18      	it	ne
 8000c1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c1e:	d01e      	beq.n	8000c5e <__aeabi_fmul+0x66>
 8000c20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c2c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c38:	bf3e      	ittt	cc
 8000c3a:	0049      	lslcc	r1, r1, #1
 8000c3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c40:	005b      	lslcc	r3, r3, #1
 8000c42:	ea40 0001 	orr.w	r0, r0, r1
 8000c46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c4a:	2afd      	cmp	r2, #253	; 0xfd
 8000c4c:	d81d      	bhi.n	8000c8a <__aeabi_fmul+0x92>
 8000c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c56:	bf08      	it	eq
 8000c58:	f020 0001 	biceq.w	r0, r0, #1
 8000c5c:	4770      	bx	lr
 8000c5e:	f090 0f00 	teq	r0, #0
 8000c62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c66:	bf08      	it	eq
 8000c68:	0249      	lsleq	r1, r1, #9
 8000c6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c72:	3a7f      	subs	r2, #127	; 0x7f
 8000c74:	bfc2      	ittt	gt
 8000c76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c7e:	4770      	bxgt	lr
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	dc5d      	bgt.n	8000d48 <__aeabi_fmul+0x150>
 8000c8c:	f112 0f19 	cmn.w	r2, #25
 8000c90:	bfdc      	itt	le
 8000c92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c96:	4770      	bxle	lr
 8000c98:	f1c2 0200 	rsb	r2, r2, #0
 8000c9c:	0041      	lsls	r1, r0, #1
 8000c9e:	fa21 f102 	lsr.w	r1, r1, r2
 8000ca2:	f1c2 0220 	rsb	r2, r2, #32
 8000ca6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000caa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cae:	f140 0000 	adc.w	r0, r0, #0
 8000cb2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cb6:	bf08      	it	eq
 8000cb8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cbc:	4770      	bx	lr
 8000cbe:	f092 0f00 	teq	r2, #0
 8000cc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cc6:	bf02      	ittt	eq
 8000cc8:	0040      	lsleq	r0, r0, #1
 8000cca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cce:	3a01      	subeq	r2, #1
 8000cd0:	d0f9      	beq.n	8000cc6 <__aeabi_fmul+0xce>
 8000cd2:	ea40 000c 	orr.w	r0, r0, ip
 8000cd6:	f093 0f00 	teq	r3, #0
 8000cda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cde:	bf02      	ittt	eq
 8000ce0:	0049      	lsleq	r1, r1, #1
 8000ce2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ce6:	3b01      	subeq	r3, #1
 8000ce8:	d0f9      	beq.n	8000cde <__aeabi_fmul+0xe6>
 8000cea:	ea41 010c 	orr.w	r1, r1, ip
 8000cee:	e78f      	b.n	8000c10 <__aeabi_fmul+0x18>
 8000cf0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	bf18      	it	ne
 8000cfa:	ea93 0f0c 	teqne	r3, ip
 8000cfe:	d00a      	beq.n	8000d16 <__aeabi_fmul+0x11e>
 8000d00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d04:	bf18      	it	ne
 8000d06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d0a:	d1d8      	bne.n	8000cbe <__aeabi_fmul+0xc6>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	4770      	bx	lr
 8000d16:	f090 0f00 	teq	r0, #0
 8000d1a:	bf17      	itett	ne
 8000d1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d20:	4608      	moveq	r0, r1
 8000d22:	f091 0f00 	teqne	r1, #0
 8000d26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d2a:	d014      	beq.n	8000d56 <__aeabi_fmul+0x15e>
 8000d2c:	ea92 0f0c 	teq	r2, ip
 8000d30:	d101      	bne.n	8000d36 <__aeabi_fmul+0x13e>
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	d10f      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d36:	ea93 0f0c 	teq	r3, ip
 8000d3a:	d103      	bne.n	8000d44 <__aeabi_fmul+0x14c>
 8000d3c:	024b      	lsls	r3, r1, #9
 8000d3e:	bf18      	it	ne
 8000d40:	4608      	movne	r0, r1
 8000d42:	d108      	bne.n	8000d56 <__aeabi_fmul+0x15e>
 8000d44:	ea80 0001 	eor.w	r0, r0, r1
 8000d48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d5e:	4770      	bx	lr

08000d60 <__aeabi_fdiv>:
 8000d60:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d68:	bf1e      	ittt	ne
 8000d6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6e:	ea92 0f0c 	teqne	r2, ip
 8000d72:	ea93 0f0c 	teqne	r3, ip
 8000d76:	d069      	beq.n	8000e4c <__aeabi_fdiv+0xec>
 8000d78:	eba2 0203 	sub.w	r2, r2, r3
 8000d7c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d80:	0249      	lsls	r1, r1, #9
 8000d82:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d86:	d037      	beq.n	8000df8 <__aeabi_fdiv+0x98>
 8000d88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	bf38      	it	cc
 8000d9c:	005b      	lslcc	r3, r3, #1
 8000d9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000da2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000da6:	428b      	cmp	r3, r1
 8000da8:	bf24      	itt	cs
 8000daa:	1a5b      	subcs	r3, r3, r1
 8000dac:	ea40 000c 	orrcs.w	r0, r0, ip
 8000db0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000db4:	bf24      	itt	cs
 8000db6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dbe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dc2:	bf24      	itt	cs
 8000dc4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dcc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dd0:	bf24      	itt	cs
 8000dd2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dd6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000de2:	d1e0      	bne.n	8000da6 <__aeabi_fdiv+0x46>
 8000de4:	2afd      	cmp	r2, #253	; 0xfd
 8000de6:	f63f af50 	bhi.w	8000c8a <__aeabi_fmul+0x92>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df0:	bf08      	it	eq
 8000df2:	f020 0001 	biceq.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dfc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e00:	327f      	adds	r2, #127	; 0x7f
 8000e02:	bfc2      	ittt	gt
 8000e04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0c:	4770      	bxgt	lr
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	3a01      	subs	r2, #1
 8000e18:	e737      	b.n	8000c8a <__aeabi_fmul+0x92>
 8000e1a:	f092 0f00 	teq	r2, #0
 8000e1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0040      	lsleq	r0, r0, #1
 8000e26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2a:	3a01      	subeq	r2, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fdiv+0xc2>
 8000e2e:	ea40 000c 	orr.w	r0, r0, ip
 8000e32:	f093 0f00 	teq	r3, #0
 8000e36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0049      	lsleq	r1, r1, #1
 8000e3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e42:	3b01      	subeq	r3, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fdiv+0xda>
 8000e46:	ea41 010c 	orr.w	r1, r1, ip
 8000e4a:	e795      	b.n	8000d78 <__aeabi_fdiv+0x18>
 8000e4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d108      	bne.n	8000e68 <__aeabi_fdiv+0x108>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	f47f af7d 	bne.w	8000d56 <__aeabi_fmul+0x15e>
 8000e5c:	ea93 0f0c 	teq	r3, ip
 8000e60:	f47f af70 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e776      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e68:	ea93 0f0c 	teq	r3, ip
 8000e6c:	d104      	bne.n	8000e78 <__aeabi_fdiv+0x118>
 8000e6e:	024b      	lsls	r3, r1, #9
 8000e70:	f43f af4c 	beq.w	8000d0c <__aeabi_fmul+0x114>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e76e      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e7c:	bf18      	it	ne
 8000e7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e82:	d1ca      	bne.n	8000e1a <__aeabi_fdiv+0xba>
 8000e84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e88:	f47f af5c 	bne.w	8000d44 <__aeabi_fmul+0x14c>
 8000e8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e90:	f47f af3c 	bne.w	8000d0c <__aeabi_fmul+0x114>
 8000e94:	e75f      	b.n	8000d56 <__aeabi_fmul+0x15e>
 8000e96:	bf00      	nop

08000e98 <__gesf2>:
 8000e98:	f04f 3cff 	mov.w	ip, #4294967295
 8000e9c:	e006      	b.n	8000eac <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__lesf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	e002      	b.n	8000eac <__cmpsf2+0x4>
 8000ea6:	bf00      	nop

08000ea8 <__cmpsf2>:
 8000ea8:	f04f 0c01 	mov.w	ip, #1
 8000eac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000eb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	bf18      	it	ne
 8000ebe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ec2:	d011      	beq.n	8000ee8 <__cmpsf2+0x40>
 8000ec4:	b001      	add	sp, #4
 8000ec6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eca:	bf18      	it	ne
 8000ecc:	ea90 0f01 	teqne	r0, r1
 8000ed0:	bf58      	it	pl
 8000ed2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ed6:	bf88      	it	hi
 8000ed8:	17c8      	asrhi	r0, r1, #31
 8000eda:	bf38      	it	cc
 8000edc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ee0:	bf18      	it	ne
 8000ee2:	f040 0001 	orrne.w	r0, r0, #1
 8000ee6:	4770      	bx	lr
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	d102      	bne.n	8000ef4 <__cmpsf2+0x4c>
 8000eee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ef2:	d105      	bne.n	8000f00 <__cmpsf2+0x58>
 8000ef4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef8:	d1e4      	bne.n	8000ec4 <__cmpsf2+0x1c>
 8000efa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000efe:	d0e1      	beq.n	8000ec4 <__cmpsf2+0x1c>
 8000f00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <__aeabi_cfrcmple>:
 8000f08:	4684      	mov	ip, r0
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	4661      	mov	r1, ip
 8000f0e:	e7ff      	b.n	8000f10 <__aeabi_cfcmpeq>

08000f10 <__aeabi_cfcmpeq>:
 8000f10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f12:	f7ff ffc9 	bl	8000ea8 <__cmpsf2>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	bf48      	it	mi
 8000f1a:	f110 0f00 	cmnmi.w	r0, #0
 8000f1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f20 <__aeabi_fcmpeq>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff fff4 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f28:	bf0c      	ite	eq
 8000f2a:	2001      	moveq	r0, #1
 8000f2c:	2000      	movne	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_fcmplt>:
 8000f34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f38:	f7ff ffea 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f3c:	bf34      	ite	cc
 8000f3e:	2001      	movcc	r0, #1
 8000f40:	2000      	movcs	r0, #0
 8000f42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f46:	bf00      	nop

08000f48 <__aeabi_fcmple>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff ffe0 	bl	8000f10 <__aeabi_cfcmpeq>
 8000f50:	bf94      	ite	ls
 8000f52:	2001      	movls	r0, #1
 8000f54:	2000      	movhi	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmpge>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffd2 	bl	8000f08 <__aeabi_cfrcmple>
 8000f64:	bf94      	ite	ls
 8000f66:	2001      	movls	r0, #1
 8000f68:	2000      	movhi	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmpgt>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffc8 	bl	8000f08 <__aeabi_cfrcmple>
 8000f78:	bf34      	ite	cc
 8000f7a:	2001      	movcc	r0, #1
 8000f7c:	2000      	movcs	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2iz>:
 8000f84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30f      	bcc.n	8000fae <__aeabi_f2iz+0x2a>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d90d      	bls.n	8000fb4 <__aeabi_f2iz+0x30>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fa4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa8:	bf18      	it	ne
 8000faa:	4240      	negne	r0, r0
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2iz+0x3a>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d105      	bne.n	8000fca <__aeabi_f2iz+0x46>
 8000fbe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fc2:	bf08      	it	eq
 8000fc4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr

08000fd0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fe0:	4b18      	ldr	r3, [pc, #96]	; (8001044 <MX_ADC1_Init+0x74>)
 8000fe2:	4a19      	ldr	r2, [pc, #100]	; (8001048 <MX_ADC1_Init+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fe6:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_ADC1_Init+0x74>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_ADC1_Init+0x74>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_ADC1_Init+0x74>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_ADC1_Init+0x74>)
 8000ffa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ffe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_ADC1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001006:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <MX_ADC1_Init+0x74>)
 8001008:	2201      	movs	r2, #1
 800100a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <MX_ADC1_Init+0x74>)
 800100e:	f001 fd81 	bl	8002b14 <HAL_ADC_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001018:	f000 ffaa 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800101c:	2301      	movs	r3, #1
 800101e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001020:	2301      	movs	r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_ADC1_Init+0x74>)
 800102e:	f001 fe49 	bl	8002cc4 <HAL_ADC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001038:	f000 ff9a 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000074 	.word	0x20000074
 8001048:	40012400 	.word	0x40012400

0800104c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a14      	ldr	r2, [pc, #80]	; (80010b8 <HAL_ADC_MspInit+0x6c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d121      	bne.n	80010b0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <HAL_ADC_MspInit+0x70>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a12      	ldr	r2, [pc, #72]	; (80010bc <HAL_ADC_MspInit+0x70>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_ADC_MspInit+0x70>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_ADC_MspInit+0x70>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_ADC_MspInit+0x70>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_ADC_MspInit+0x70>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800109c:	2306      	movs	r3, #6
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a0:	2303      	movs	r3, #3
 80010a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_ADC_MspInit+0x74>)
 80010ac:	f002 faf8 	bl	80036a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40012400 	.word	0x40012400
 80010bc:	40021000 	.word	0x40021000
 80010c0:	40010800 	.word	0x40010800

080010c4 <Flash_Write>:
	1

};

uint32_t Flash_Write(uint32_t address, uint32_t* data, uint32_t len)
{
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef result = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	75fb      	strb	r3, [r7, #23]

	result = HAL_FLASH_Unlock();
 80010d4:	f002 f94a 	bl	800336c <HAL_FLASH_Unlock>
 80010d8:	4603      	mov	r3, r0
 80010da:	75fb      	strb	r3, [r7, #23]
	if (result) return result;
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <Flash_Write+0x22>
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	e037      	b.n	8001156 <Flash_Write+0x92>
	result = Flash_Erase(address);
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 f83a 	bl	8001160 <Flash_Erase>
 80010ec:	4603      	mov	r3, r0
 80010ee:	75fb      	strb	r3, [r7, #23]
	if (result) return HAL_FLASH_GetError();
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <Flash_Write+0x3a>
 80010f6:	f002 f96f 	bl	80033d8 <HAL_FLASH_GetError>
 80010fa:	4603      	mov	r3, r0
 80010fc:	e02b      	b.n	8001156 <Flash_Write+0x92>
	uint32_t i = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
	for (uint32_t addr = address; addr < address + len; addr += 4)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	e01b      	b.n	8001140 <Flash_Write+0x7c>
	{
		result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, addr, data[i++]);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	61fa      	str	r2, [r7, #28]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2200      	movs	r2, #0
 8001118:	461c      	mov	r4, r3
 800111a:	4615      	mov	r5, r2
 800111c:	4622      	mov	r2, r4
 800111e:	462b      	mov	r3, r5
 8001120:	69b9      	ldr	r1, [r7, #24]
 8001122:	2002      	movs	r0, #2
 8001124:	f002 f8b2 	bl	800328c <HAL_FLASH_Program>
 8001128:	4603      	mov	r3, r0
 800112a:	75fb      	strb	r3, [r7, #23]
		if (result) return HAL_FLASH_GetError();
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <Flash_Write+0x76>
 8001132:	f002 f951 	bl	80033d8 <HAL_FLASH_GetError>
 8001136:	4603      	mov	r3, r0
 8001138:	e00d      	b.n	8001156 <Flash_Write+0x92>
	for (uint32_t addr = address; addr < address + len; addr += 4)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	3304      	adds	r3, #4
 800113e:	61bb      	str	r3, [r7, #24]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	429a      	cmp	r2, r3
 800114a:	d3dd      	bcc.n	8001108 <Flash_Write+0x44>
	}
	result = HAL_FLASH_Lock();
 800114c:	f002 f934 	bl	80033b8 <HAL_FLASH_Lock>
 8001150:	4603      	mov	r3, r0
 8001152:	75fb      	strb	r3, [r7, #23]
	return result;
 8001154:	7dfb      	ldrb	r3, [r7, #23]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001160 <Flash_Erase>:

HAL_StatusTypeDef Flash_Erase(uint32_t address)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	static uint32_t PAGEError = 0;
	eraseSetting.PageAddress = address - address % 0x400;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800116e:	f023 0303 	bic.w	r3, r3, #3
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <Flash_Erase+0x28>)
 8001174:	6093      	str	r3, [r2, #8]
	return HAL_FLASHEx_Erase(&eraseSetting, &PAGEError);
 8001176:	4905      	ldr	r1, [pc, #20]	; (800118c <Flash_Erase+0x2c>)
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <Flash_Erase+0x28>)
 800117a:	f002 f9e9 	bl	8003550 <HAL_FLASHEx_Erase>
 800117e:	4603      	mov	r3, r0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000000 	.word	0x20000000
 800118c:	200000a4 	.word	0x200000a4

08001190 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b31      	ldr	r3, [pc, #196]	; (800126c <MX_GPIO_Init+0xdc>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a30      	ldr	r2, [pc, #192]	; (800126c <MX_GPIO_Init+0xdc>)
 80011aa:	f043 0320 	orr.w	r3, r3, #32
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b2e      	ldr	r3, [pc, #184]	; (800126c <MX_GPIO_Init+0xdc>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0320 	and.w	r3, r3, #32
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011bc:	4b2b      	ldr	r3, [pc, #172]	; (800126c <MX_GPIO_Init+0xdc>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a2a      	ldr	r2, [pc, #168]	; (800126c <MX_GPIO_Init+0xdc>)
 80011c2:	f043 0304 	orr.w	r3, r3, #4
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <MX_GPIO_Init+0xdc>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <MX_GPIO_Init+0xdc>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a24      	ldr	r2, [pc, #144]	; (800126c <MX_GPIO_Init+0xdc>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <MX_GPIO_Init+0xdc>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, POLARITY_MOTOR_Pin|POLARITY_COIL_Pin|ADC_ON_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2138      	movs	r1, #56	; 0x38
 80011f0:	481f      	ldr	r0, [pc, #124]	; (8001270 <MX_GPIO_Init+0xe0>)
 80011f2:	f002 fbf0 	bl	80039d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C_PWR_GPIO_Port, C_PWR_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011fc:	481d      	ldr	r0, [pc, #116]	; (8001274 <MX_GPIO_Init+0xe4>)
 80011fe:	f002 fbea 	bl	80039d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001208:	481a      	ldr	r0, [pc, #104]	; (8001274 <MX_GPIO_Init+0xe4>)
 800120a:	f002 fbe4 	bl	80039d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = POLARITY_MOTOR_Pin|POLARITY_COIL_Pin|ADC_ON_Pin;
 800120e:	2338      	movs	r3, #56	; 0x38
 8001210:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2302      	movs	r3, #2
 800121c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4619      	mov	r1, r3
 8001224:	4812      	ldr	r0, [pc, #72]	; (8001270 <MX_GPIO_Init+0xe0>)
 8001226:	f002 fa3b 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = C_PWR_Pin|Led_Pin;
 800122a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800122e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2302      	movs	r3, #2
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <MX_GPIO_Init+0xe4>)
 8001244:	f002 fa2c 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEST1_Pin|ADDR0_Pin|ADDR1_Pin;
 8001248:	f44f 6303 	mov.w	r3, #2096	; 0x830
 800124c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_GPIO_Init+0xe4>)
 800125e:	f002 fa1f 	bl	80036a0 <HAL_GPIO_Init>

}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40021000 	.word	0x40021000
 8001270:	40010800 	.word	0x40010800
 8001274:	40010c00 	.word	0x40010c00

08001278 <Set_Configuration>:
#include "hardware_settings.h"

void Set_Configuration()
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	/**
	 * Ограничение на минимальное измерение в 10 оборотов в минуту
	 * Если хотим другое
	 * Считаем по формуле 60000 / обороты в минунту
	 */
	if (NowSettings.Clock_Setting & (1 << 3))
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <Set_Configuration+0x64>)
 800127e:	78db      	ldrb	r3, [r3, #3]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d012      	beq.n	80012ae <Set_Configuration+0x36>
	{
		__HAL_TIM_SET_AUTORELOAD(&htim3, 29999); // Рассчитанное значение / 2
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <Set_Configuration+0x68>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <Set_Configuration+0x68>)
 8001294:	f247 522f 	movw	r2, #29999	; 0x752f
 8001298:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4, 29999); // Рассчитанное значение / 2
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <Set_Configuration+0x6c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f247 522f 	movw	r2, #29999	; 0x752f
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <Set_Configuration+0x6c>)
 80012a6:	f247 522f 	movw	r2, #29999	; 0x752f
 80012aa:	60da      	str	r2, [r3, #12]
	else
	{
		__HAL_TIM_SET_AUTORELOAD(&htim3, 59999); // Рассчитанное значение
		__HAL_TIM_SET_AUTORELOAD(&htim4, 59999); // Рассчитанное значение
	}
}
 80012ac:	e011      	b.n	80012d2 <Set_Configuration+0x5a>
		__HAL_TIM_SET_AUTORELOAD(&htim3, 59999); // Рассчитанное значение
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <Set_Configuration+0x68>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <Set_Configuration+0x68>)
 80012ba:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80012be:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim4, 59999); // Рассчитанное значение
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <Set_Configuration+0x6c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <Set_Configuration+0x6c>)
 80012cc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80012d0:	60da      	str	r2, [r3, #12]
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	200000b8 	.word	0x200000b8
 80012e0:	200001d8 	.word	0x200001d8
 80012e4:	20000220 	.word	0x20000220

080012e8 <Set_Channel_Raw>:


void Set_Channel_Raw(uint8_t channel, int32_t value)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
	uint32_t absValue = abs(value);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bfb8      	it	lt
 80012fa:	425b      	neglt	r3, r3
 80012fc:	60fb      	str	r3, [r7, #12]
	GPIO_PinState polarity = value > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	bfcc      	ite	gt
 8001304:	2301      	movgt	r3, #1
 8001306:	2300      	movle	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	72fb      	strb	r3, [r7, #11]
	if (absValue >= 0x7FFF)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001312:	4293      	cmp	r3, r2
 8001314:	d903      	bls.n	800131e <Set_Channel_Raw+0x36>
	{
		absValue = 0xFFFF;
 8001316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e002      	b.n	8001324 <Set_Channel_Raw+0x3c>
	}
	else
	{
		absValue = absValue << 1;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
	}
	uint8_t revers = NowSettings.Config & (channel == 0 ? 0x20 : 0x10);
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <Set_Channel_Raw+0xa0>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b25b      	sxtb	r3, r3
 800132a:	79fa      	ldrb	r2, [r7, #7]
 800132c:	2a00      	cmp	r2, #0
 800132e:	d101      	bne.n	8001334 <Set_Channel_Raw+0x4c>
 8001330:	2220      	movs	r2, #32
 8001332:	e000      	b.n	8001336 <Set_Channel_Raw+0x4e>
 8001334:	2210      	movs	r2, #16
 8001336:	4013      	ands	r3, r2
 8001338:	b25b      	sxtb	r3, r3
 800133a:	72bb      	strb	r3, [r7, #10]
	switch (channel) {
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d002      	beq.n	8001348 <Set_Channel_Raw+0x60>
 8001342:	2b01      	cmp	r3, #1
 8001344:	d00e      	beq.n	8001364 <Set_Channel_Raw+0x7c>
		case 1:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, absValue);
			HAL_GPIO_WritePin(POLARITY_COIL_GPIO_Port, POLARITY_COIL_Pin, polarity ^ revers);
			break;
		default:
			break;
 8001346:	e01b      	b.n	8001380 <Set_Channel_Raw+0x98>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, absValue);
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <Set_Channel_Raw+0xa4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(POLARITY_MOTOR_GPIO_Port, POLARITY_MOTOR_Pin, polarity ^ revers);
 8001350:	7afa      	ldrb	r2, [r7, #11]
 8001352:	7abb      	ldrb	r3, [r7, #10]
 8001354:	4053      	eors	r3, r2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	2108      	movs	r1, #8
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <Set_Channel_Raw+0xa8>)
 800135e:	f002 fb3a 	bl	80039d6 <HAL_GPIO_WritePin>
			break;
 8001362:	e00d      	b.n	8001380 <Set_Channel_Raw+0x98>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, absValue);
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <Set_Channel_Raw+0xac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(POLARITY_COIL_GPIO_Port, POLARITY_COIL_Pin, polarity ^ revers);
 800136c:	7afa      	ldrb	r2, [r7, #11]
 800136e:	7abb      	ldrb	r3, [r7, #10]
 8001370:	4053      	eors	r3, r2
 8001372:	b2db      	uxtb	r3, r3
 8001374:	461a      	mov	r2, r3
 8001376:	2110      	movs	r1, #16
 8001378:	4805      	ldr	r0, [pc, #20]	; (8001390 <Set_Channel_Raw+0xa8>)
 800137a:	f002 fb2c 	bl	80039d6 <HAL_GPIO_WritePin>
			break;
 800137e:	bf00      	nop
	}
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200000b8 	.word	0x200000b8
 800138c:	20000190 	.word	0x20000190
 8001390:	40010800 	.word	0x40010800
 8001394:	20000148 	.word	0x20000148

08001398 <Calculate_Channel>:

int32_t lastError[ChannelCount] = {0};
float Integral[ChannelCount] = {0};
void Calculate_Channel(uint8_t channel)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b08e      	sub	sp, #56	; 0x38
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	uint8_t DM = NowSettings.Config & (channel == 0 ? 0x02 : 0x01);
 80013a2:	4ba3      	ldr	r3, [pc, #652]	; (8001630 <Calculate_Channel+0x298>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	79fa      	ldrb	r2, [r7, #7]
 80013aa:	2a00      	cmp	r2, #0
 80013ac:	d101      	bne.n	80013b2 <Calculate_Channel+0x1a>
 80013ae:	2202      	movs	r2, #2
 80013b0:	e000      	b.n	80013b4 <Calculate_Channel+0x1c>
 80013b2:	2201      	movs	r2, #1
 80013b4:	4013      	ands	r3, r2
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int16_t *NeedSpeed = channel == 0 ? &NowSettings.Need_F_ChannelSpeed : &NowSettings.Need_S_ChannelSpeed;
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <Calculate_Channel+0x2e>
 80013c2:	4b9c      	ldr	r3, [pc, #624]	; (8001634 <Calculate_Channel+0x29c>)
 80013c4:	e000      	b.n	80013c8 <Calculate_Channel+0x30>
 80013c6:	4b9c      	ldr	r3, [pc, #624]	; (8001638 <Calculate_Channel+0x2a0>)
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (DM)
 80013ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <Calculate_Channel+0x4e>
	{
		Set_Channel_Raw(channel, *NeedSpeed);
 80013d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d8:	461a      	mov	r2, r3
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff82 	bl	80012e8 <Set_Channel_Raw>
		}
		if(val > 32766) val = 32766;
		if(val < -32766) val = -32766;
		Set_Channel_Raw(channel, (int32_t)val);
	}
}
 80013e4:	e11b      	b.n	800161e <Calculate_Channel+0x286>
		int16_t *CurrentSpeed = NeedSpeed + 1;
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	3302      	adds	r3, #2
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
		uint16_t *MaxAbsSpeed = CurrentSpeed + 1;
 80013ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ee:	3302      	adds	r3, #2
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
		uint16_t *Min_Force = MaxAbsSpeed + 1;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	3302      	adds	r3, #2
 80013f6:	623b      	str	r3, [r7, #32]
		if (*NeedSpeed > *MaxAbsSpeed)
 80013f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fe:	461a      	mov	r2, r3
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	dd04      	ble.n	8001412 <Calculate_Channel+0x7a>
			*NeedSpeed = *MaxAbsSpeed;
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	b21a      	sxth	r2, r3
 800140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001410:	801a      	strh	r2, [r3, #0]
		if (*NeedSpeed < -(*MaxAbsSpeed))
 8001412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001414:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001418:	461a      	mov	r2, r3
 800141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	425b      	negs	r3, r3
 8001420:	429a      	cmp	r2, r3
 8001422:	da06      	bge.n	8001432 <Calculate_Channel+0x9a>
			*NeedSpeed = -(*MaxAbsSpeed);
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	425b      	negs	r3, r3
 800142a:	b29b      	uxth	r3, r3
 800142c:	b21a      	sxth	r2, r3
 800142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001430:	801a      	strh	r2, [r3, #0]
		float *Kp = Min_Force + 1, *Ki = Kp + 1, *Kd = Ki + 1;
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	3302      	adds	r3, #2
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	3304      	adds	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	3304      	adds	r3, #4
 8001442:	617b      	str	r3, [r7, #20]
		int32_t error = (1000.0/950)*(*NeedSpeed) - *CurrentSpeed;
 8001444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ffd2 	bl	80003f4 <__aeabi_i2d>
 8001450:	a375      	add	r3, pc, #468	; (adr r3, 8001628 <Calculate_Channel+0x290>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f837 	bl	80004c8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4614      	mov	r4, r2
 8001460:	461d      	mov	r5, r3
 8001462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffc3 	bl	80003f4 <__aeabi_i2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4620      	mov	r0, r4
 8001474:	4629      	mov	r1, r5
 8001476:	f7fe fe6f 	bl	8000158 <__aeabi_dsub>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fa33 	bl	80008ec <__aeabi_d2iz>
 8001486:	4603      	mov	r3, r0
 8001488:	613b      	str	r3, [r7, #16]
		float Prop = *Kp * error;
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	681c      	ldr	r4, [r3, #0]
 800148e:	6938      	ldr	r0, [r7, #16]
 8001490:	f7ff fb5e 	bl	8000b50 <__aeabi_i2f>
 8001494:	4603      	mov	r3, r0
 8001496:	4619      	mov	r1, r3
 8001498:	4620      	mov	r0, r4
 800149a:	f7ff fbad 	bl	8000bf8 <__aeabi_fmul>
 800149e:	4603      	mov	r3, r0
 80014a0:	60fb      	str	r3, [r7, #12]
		float Dif = *Kd * (error - lastError[channel]);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	681c      	ldr	r4, [r3, #0]
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	4a64      	ldr	r2, [pc, #400]	; (800163c <Calculate_Channel+0x2a4>)
 80014aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fb4c 	bl	8000b50 <__aeabi_i2f>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4619      	mov	r1, r3
 80014bc:	4620      	mov	r0, r4
 80014be:	f7ff fb9b 	bl	8000bf8 <__aeabi_fmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	60bb      	str	r3, [r7, #8]
		lastError[channel] = error;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	495c      	ldr	r1, [pc, #368]	; (800163c <Calculate_Channel+0x2a4>)
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (abs(*CurrentSpeed) < 200 && abs(*NeedSpeed) < 10)
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bfb8      	it	lt
 80014da:	425b      	neglt	r3, r3
 80014dc:	b29b      	uxth	r3, r3
 80014de:	2bc7      	cmp	r3, #199	; 0xc7
 80014e0:	d80e      	bhi.n	8001500 <Calculate_Channel+0x168>
 80014e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bfb8      	it	lt
 80014ec:	425b      	neglt	r3, r3
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	d805      	bhi.n	8001500 <Calculate_Channel+0x168>
			Integral[channel] = 0;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4a52      	ldr	r2, [pc, #328]	; (8001640 <Calculate_Channel+0x2a8>)
 80014f8:	f04f 0100 	mov.w	r1, #0
 80014fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		float val = Prop + Integral[channel] + Dif;
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	4a4f      	ldr	r2, [pc, #316]	; (8001640 <Calculate_Channel+0x2a8>)
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	68f9      	ldr	r1, [r7, #12]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fa6c 	bl	80009e8 <__addsf3>
 8001510:	4603      	mov	r3, r0
 8001512:	4619      	mov	r1, r3
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f7ff fa67 	bl	80009e8 <__addsf3>
 800151a:	4603      	mov	r3, r0
 800151c:	637b      	str	r3, [r7, #52]	; 0x34
		if (abs(*NeedSpeed) < 10 && abs(*CurrentSpeed) < 200)
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	2b00      	cmp	r3, #0
 8001526:	bfb8      	it	lt
 8001528:	425b      	neglt	r3, r3
 800152a:	b29b      	uxth	r3, r3
 800152c:	2b09      	cmp	r3, #9
 800152e:	d80c      	bhi.n	800154a <Calculate_Channel+0x1b2>
 8001530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfb8      	it	lt
 800153a:	425b      	neglt	r3, r3
 800153c:	b29b      	uxth	r3, r3
 800153e:	2bc7      	cmp	r3, #199	; 0xc7
 8001540:	d803      	bhi.n	800154a <Calculate_Channel+0x1b2>
			val = 0;
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
 8001548:	e027      	b.n	800159a <Calculate_Channel+0x202>
			if (NowSettings.Config & (channel == 0 ? 0x80 : 0x40))
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <Calculate_Channel+0x298>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <Calculate_Channel+0x1c2>
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	e000      	b.n	800155c <Calculate_Channel+0x1c4>
 800155a:	2340      	movs	r3, #64	; 0x40
 800155c:	4013      	ands	r3, r2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d01b      	beq.n	800159a <Calculate_Channel+0x202>
				val += val > 0 ? *Min_Force : -(*Min_Force);
 8001562:	f04f 0100 	mov.w	r1, #0
 8001566:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001568:	f7ff fd02 	bl	8000f70 <__aeabi_fcmpgt>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <Calculate_Channel+0x1e8>
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff faea 	bl	8000b50 <__aeabi_i2f>
 800157c:	4603      	mov	r3, r0
 800157e:	e006      	b.n	800158e <Calculate_Channel+0x1f6>
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	425b      	negs	r3, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fae2 	bl	8000b50 <__aeabi_i2f>
 800158c:	4603      	mov	r3, r0
 800158e:	4619      	mov	r1, r3
 8001590:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001592:	f7ff fa29 	bl	80009e8 <__addsf3>
 8001596:	4603      	mov	r3, r0
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
		if(val < 32766 && val > -32766)
 800159a:	492a      	ldr	r1, [pc, #168]	; (8001644 <Calculate_Channel+0x2ac>)
 800159c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800159e:	f7ff fcc9 	bl	8000f34 <__aeabi_fcmplt>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01f      	beq.n	80015e8 <Calculate_Channel+0x250>
 80015a8:	4927      	ldr	r1, [pc, #156]	; (8001648 <Calculate_Channel+0x2b0>)
 80015aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015ac:	f7ff fce0 	bl	8000f70 <__aeabi_fcmpgt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d018      	beq.n	80015e8 <Calculate_Channel+0x250>
			Integral[channel] = Integral[channel] + (*Ki * error);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4a21      	ldr	r2, [pc, #132]	; (8001640 <Calculate_Channel+0x2a8>)
 80015ba:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	681c      	ldr	r4, [r3, #0]
 80015c2:	6938      	ldr	r0, [r7, #16]
 80015c4:	f7ff fac4 	bl	8000b50 <__aeabi_i2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7ff fb13 	bl	8000bf8 <__aeabi_fmul>
 80015d2:	4603      	mov	r3, r0
 80015d4:	79fc      	ldrb	r4, [r7, #7]
 80015d6:	4619      	mov	r1, r3
 80015d8:	4628      	mov	r0, r5
 80015da:	f7ff fa05 	bl	80009e8 <__addsf3>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <Calculate_Channel+0x2a8>)
 80015e4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if(val > 32766) val = 32766;
 80015e8:	4916      	ldr	r1, [pc, #88]	; (8001644 <Calculate_Channel+0x2ac>)
 80015ea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015ec:	f7ff fcc0 	bl	8000f70 <__aeabi_fcmpgt>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <Calculate_Channel+0x262>
 80015f6:	4b13      	ldr	r3, [pc, #76]	; (8001644 <Calculate_Channel+0x2ac>)
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
		if(val < -32766) val = -32766;
 80015fa:	4913      	ldr	r1, [pc, #76]	; (8001648 <Calculate_Channel+0x2b0>)
 80015fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015fe:	f7ff fc99 	bl	8000f34 <__aeabi_fcmplt>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <Calculate_Channel+0x274>
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <Calculate_Channel+0x2b0>)
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
		Set_Channel_Raw(channel, (int32_t)val);
 800160c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800160e:	f7ff fcb9 	bl	8000f84 <__aeabi_f2iz>
 8001612:	4602      	mov	r2, r0
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4611      	mov	r1, r2
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fe65 	bl	80012e8 <Set_Channel_Raw>
}
 800161e:	bf00      	nop
 8001620:	3738      	adds	r7, #56	; 0x38
 8001622:	46bd      	mov	sp, r7
 8001624:	bdb0      	pop	{r4, r5, r7, pc}
 8001626:	bf00      	nop
 8001628:	35e50d79 	.word	0x35e50d79
 800162c:	3ff0d794 	.word	0x3ff0d794
 8001630:	200000b8 	.word	0x200000b8
 8001634:	200000bc 	.word	0x200000bc
 8001638:	200000d0 	.word	0x200000d0
 800163c:	200000a8 	.word	0x200000a8
 8001640:	200000b0 	.word	0x200000b0
 8001644:	46fffc00 	.word	0x46fffc00
 8001648:	c6fffc00 	.word	0xc6fffc00

0800164c <Clear_Chanel>:

void Clear_Chanel(uint8_t channel)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
	Integral[channel] = 0;
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	4a0c      	ldr	r2, [pc, #48]	; (800168c <Clear_Chanel+0x40>)
 800165a:	f04f 0100 	mov.w	r1, #0
 800165e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	lastError[channel] = channel == 0 ? NowSettings.Current_F_ChannelSpeed : NowSettings.Current_S_ChannelSpeed;
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d104      	bne.n	8001672 <Clear_Chanel+0x26>
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <Clear_Chanel+0x44>)
 800166a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800166e:	4619      	mov	r1, r3
 8001670:	e003      	b.n	800167a <Clear_Chanel+0x2e>
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <Clear_Chanel+0x44>)
 8001674:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001678:	4619      	mov	r1, r3
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4a05      	ldr	r2, [pc, #20]	; (8001694 <Clear_Chanel+0x48>)
 800167e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	200000b0 	.word	0x200000b0
 8001690:	200000b8 	.word	0x200000b8
 8001694:	200000a8 	.word	0x200000a8

08001698 <CalculateRPM>:

int16_t CalculateRPM(int8_t state, int32_t counter)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
	 * минута в тиках = 120000;
	 * ufTime = 2 * Время одного цикла (оборота);
	 * 120000 / (bufTime / 2) обороты в минуту
	 * 240000 / bufTime обороты в минуту
	 */
	if (NowSettings.Clock_Setting & 0x08)
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <CalculateRPM+0x70>)
 80016a6:	78db      	ldrb	r3, [r3, #3]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <CalculateRPM+0x1e>
	{
		counter <<= 1;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	603b      	str	r3, [r7, #0]
	}
	double speed = (600000 * abs(state));
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	bfb8      	it	lt
 80016be:	425b      	neglt	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <CalculateRPM+0x74>)
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fe92 	bl	80003f4 <__aeabi_i2d>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed = speed / counter;
 80016d8:	6838      	ldr	r0, [r7, #0]
 80016da:	f7fe fe8b 	bl	80003f4 <__aeabi_i2d>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016e6:	f7ff f819 	bl	800071c <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return speed;
 80016f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016f6:	f7ff f8f9 	bl	80008ec <__aeabi_d2iz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	b21b      	sxth	r3, r3
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200000b8 	.word	0x200000b8
 800170c:	000927c0 	.word	0x000927c0

08001710 <Select_Setting>:

void Select_Setting(MemoryMap *from, volatile MemoryMap *to)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	if ((uint32_t)to < 0x20000000)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001720:	d206      	bcs.n	8001730 <Select_Setting+0x20>
	{
		Flash_Write((uint32_t)to, (uint32_t *)from, sizeof(MemoryMap));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2230      	movs	r2, #48	; 0x30
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fccb 	bl	80010c4 <Flash_Write>
	}
	else
	{
		memcpy(to, from, sizeof(MemoryMap));
	}
}
 800172e:	e004      	b.n	800173a <Select_Setting+0x2a>
		memcpy(to, from, sizeof(MemoryMap));
 8001730:	2230      	movs	r2, #48	; 0x30
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f005 fe29 	bl	800738c <memcpy>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(uint8_t address)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END I2C1_Init 0 */
#endif
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <MX_I2C1_Init+0x60>)
 8001750:	4a15      	ldr	r2, [pc, #84]	; (80017a8 <MX_I2C1_Init+0x64>)
 8001752:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <MX_I2C1_Init+0x60>)
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <MX_I2C1_Init+0x68>)
 8001758:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_I2C1_Init+0x60>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = address << 1;
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	461a      	mov	r2, r3
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_I2C1_Init+0x60>)
 8001768:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_I2C1_Init+0x60>)
 800176c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_I2C1_Init+0x60>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <MX_I2C1_Init+0x60>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_I2C1_Init+0x60>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <MX_I2C1_Init+0x60>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800178a:	4806      	ldr	r0, [pc, #24]	; (80017a4 <MX_I2C1_Init+0x60>)
 800178c:	f002 f93c 	bl	8003a08 <HAL_I2C_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_I2C1_Init+0x56>
  {
    Error_Handler();
 8001796:	f000 fbeb 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200000e8 	.word	0x200000e8
 80017a8:	40005400 	.word	0x40005400
 80017ac:	00061a80 	.word	0x00061a80

080017b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a25      	ldr	r2, [pc, #148]	; (8001860 <HAL_I2C_MspInit+0xb0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d142      	bne.n	8001856 <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_I2C_MspInit+0xb4>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a23      	ldr	r2, [pc, #140]	; (8001864 <HAL_I2C_MspInit+0xb4>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_I2C_MspInit+0xb4>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	613b      	str	r3, [r7, #16]
 80017e6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ee:	2312      	movs	r3, #18
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f2:	2303      	movs	r3, #3
 80017f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	481a      	ldr	r0, [pc, #104]	; (8001868 <HAL_I2C_MspInit+0xb8>)
 80017fe:	f001 ff4f 	bl	80036a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_I2C_MspInit+0xbc>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_I2C_MspInit+0xbc>)
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_I2C_MspInit+0xb4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_I2C_MspInit+0xb4>)
 8001824:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_I2C_MspInit+0xb4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2102      	movs	r1, #2
 800183a:	201f      	movs	r0, #31
 800183c:	f001 fc69 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001840:	201f      	movs	r0, #31
 8001842:	f001 fc82 	bl	800314a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 2, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2102      	movs	r1, #2
 800184a:	2020      	movs	r0, #32
 800184c:	f001 fc61 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001850:	2020      	movs	r0, #32
 8001852:	f001 fc7a 	bl	800314a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40005400 	.word	0x40005400
 8001864:	40021000 	.word	0x40021000
 8001868:	40010c00 	.word	0x40010c00
 800186c:	40010000 	.word	0x40010000

08001870 <HAL_I2C_ListenCpltCallback>:
volatile uint8_t offset = 0;
volatile uint8_t MOC = 0;
#define ram ((uint8_t *) &DefaultSettings)

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	first = 1;
 8001878:	4b04      	ldr	r3, [pc, #16]	; (800188c <HAL_I2C_ListenCpltCallback+0x1c>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_EnableListen_IT(hi2c); // slave is ready again
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f002 faea 	bl	8003e58 <HAL_I2C_EnableListen_IT>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000040 	.word	0x20000040

08001890 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
 800189c:	4613      	mov	r3, r2
 800189e:	803b      	strh	r3, [r7, #0]
	uint8_t* addres = (offset < sizeof(MemoryMap)) ? &ram[offset] : (uint8_t *)&MOC;
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_I2C_AddrCallback+0x6c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	2b2f      	cmp	r3, #47	; 0x2f
 80018a8:	d806      	bhi.n	80018b8 <HAL_I2C_AddrCallback+0x28>
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_I2C_AddrCallback+0x6c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_I2C_AddrCallback+0x70>)
 80018b4:	4413      	add	r3, r2
 80018b6:	e000      	b.n	80018ba <HAL_I2C_AddrCallback+0x2a>
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_I2C_AddrCallback+0x74>)
 80018ba:	60fb      	str	r3, [r7, #12]

	if(TransferDirection==I2C_DIRECTION_TRANSMIT)
 80018bc:	78fb      	ldrb	r3, [r7, #3]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d112      	bne.n	80018e8 <HAL_I2C_AddrCallback+0x58>
	{
		if(first)
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_I2C_AddrCallback+0x78>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d006      	beq.n	80018da <HAL_I2C_AddrCallback+0x4a>
		{
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, (uint8_t *)&offset, 1, I2C_NEXT_FRAME);
 80018cc:	2304      	movs	r3, #4
 80018ce:	2201      	movs	r2, #1
 80018d0:	490a      	ldr	r1, [pc, #40]	; (80018fc <HAL_I2C_AddrCallback+0x6c>)
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f002 fa4e 	bl	8003d74 <HAL_I2C_Slave_Seq_Receive_IT>
	}
	else
	{
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
	}
}
 80018d8:	e00c      	b.n	80018f4 <HAL_I2C_AddrCallback+0x64>
			HAL_I2C_Slave_Seq_Receive_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
 80018da:	2304      	movs	r3, #4
 80018dc:	2201      	movs	r2, #1
 80018de:	68f9      	ldr	r1, [r7, #12]
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f002 fa47 	bl	8003d74 <HAL_I2C_Slave_Seq_Receive_IT>
}
 80018e6:	e005      	b.n	80018f4 <HAL_I2C_AddrCallback+0x64>
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
 80018e8:	2304      	movs	r3, #4
 80018ea:	2201      	movs	r2, #1
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f002 f9ce 	bl	8003c90 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	2000013c 	.word	0x2000013c
 8001900:	20000010 	.word	0x20000010
 8001904:	2000013d 	.word	0x2000013d
 8001908:	20000040 	.word	0x20000040

0800190c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	if(first)
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <HAL_I2C_SlaveRxCpltCallback+0x2a>
	{
		first = 0;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
		Select_Setting(&NowSettings, &DefaultSettings);
 8001924:	4914      	ldr	r1, [pc, #80]	; (8001978 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001926:	4815      	ldr	r0, [pc, #84]	; (800197c <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8001928:	f7ff fef2 	bl	8001710 <Select_Setting>
		DefaultSettings.WriteToMemory = 0;
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 800192e:	2200      	movs	r2, #0
 8001930:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8001934:	e006      	b.n	8001944 <HAL_I2C_SlaveRxCpltCallback+0x38>
	}
	else
	{
		offset++;
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	3301      	adds	r3, #1
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001942:	701a      	strb	r2, [r3, #0]
	}
	uint8_t* addres = (offset < sizeof(MemoryMap)) ? &ram[offset] : (uint8_t *)&MOC;
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b2f      	cmp	r3, #47	; 0x2f
 800194c:	d806      	bhi.n	800195c <HAL_I2C_SlaveRxCpltCallback+0x50>
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 8001958:	4413      	add	r3, r2
 800195a:	e000      	b.n	800195e <HAL_I2C_SlaveRxCpltCallback+0x52>
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 800195e:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Slave_Seq_Receive_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
 8001960:	2304      	movs	r3, #4
 8001962:	2201      	movs	r2, #1
 8001964:	68f9      	ldr	r1, [r7, #12]
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f002 fa04 	bl	8003d74 <HAL_I2C_Slave_Seq_Receive_IT>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000040 	.word	0x20000040
 8001978:	20000010 	.word	0x20000010
 800197c:	200000b8 	.word	0x200000b8
 8001980:	2000013c 	.word	0x2000013c
 8001984:	2000013d 	.word	0x2000013d

08001988 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	offset++;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_I2C_SlaveTxCpltCallback+0x48>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	3301      	adds	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_I2C_SlaveTxCpltCallback+0x48>)
 800199c:	701a      	strb	r2, [r3, #0]
	uint8_t* addres = (offset < sizeof(MemoryMap)) ? &ram[offset] : (uint8_t *)&MOC;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_I2C_SlaveTxCpltCallback+0x48>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b2f      	cmp	r3, #47	; 0x2f
 80019a6:	d806      	bhi.n	80019b6 <HAL_I2C_SlaveTxCpltCallback+0x2e>
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_I2C_SlaveTxCpltCallback+0x48>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <HAL_I2C_SlaveTxCpltCallback+0x4c>)
 80019b2:	4413      	add	r3, r2
 80019b4:	e000      	b.n	80019b8 <HAL_I2C_SlaveTxCpltCallback+0x30>
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 80019b8:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Slave_Seq_Transmit_IT(hi2c, addres, 1, I2C_NEXT_FRAME);
 80019ba:	2304      	movs	r3, #4
 80019bc:	2201      	movs	r2, #1
 80019be:	68f9      	ldr	r1, [r7, #12]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f002 f965 	bl	8003c90 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000013c 	.word	0x2000013c
 80019d4:	20000010 	.word	0x20000010
 80019d8:	2000013d 	.word	0x2000013d

080019dc <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	if( HAL_I2C_GetError(hi2c)==HAL_I2C_ERROR_AF)
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f002 fcb0 	bl	800434a <HAL_I2C_GetError>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d16a      	bne.n	8001ac6 <HAL_I2C_ErrorCallback+0xea>
	{
		offset--;
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <HAL_I2C_ErrorCallback+0xf4>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <HAL_I2C_ErrorCallback+0xf4>)
 80019fc:	701a      	strb	r2, [r3, #0]
		DefaultSettings.Current_F_ChannelSpeed = NowSettings.Current_F_ChannelSpeed;
 80019fe:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <HAL_I2C_ErrorCallback+0xf8>)
 8001a00:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8001a04:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001a06:	80da      	strh	r2, [r3, #6]
		DefaultSettings.Current_S_ChannelSpeed = NowSettings.Current_S_ChannelSpeed;
 8001a08:	4b32      	ldr	r3, [pc, #200]	; (8001ad4 <HAL_I2C_ErrorCallback+0xf8>)
 8001a0a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001a10:	835a      	strh	r2, [r3, #26]
#if CanWriteMemoryFromI2C
		uint8_t writeToMemory = DefaultSettings.WriteToMemory != 0;
 8001a12:	4b31      	ldr	r3, [pc, #196]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001a14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf14      	ite	ne
 8001a1c:	2301      	movne	r3, #1
 8001a1e:	2300      	moveq	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	73fb      	strb	r3, [r7, #15]
#endif
		DefaultSettings.WriteToMemory = 0;
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		if (DefaultSettings.F_D != NowSettings.F_D || DefaultSettings.F_I != NowSettings.F_I)
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	4a28      	ldr	r2, [pc, #160]	; (8001ad4 <HAL_I2C_ErrorCallback+0xf8>)
 8001a32:	6952      	ldr	r2, [r2, #20]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fa72 	bl	8000f20 <__aeabi_fcmpeq>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00a      	beq.n	8001a58 <HAL_I2C_ErrorCallback+0x7c>
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <HAL_I2C_ErrorCallback+0xf8>)
 8001a48:	6912      	ldr	r2, [r2, #16]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fa67 	bl	8000f20 <__aeabi_fcmpeq>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d102      	bne.n	8001a5e <HAL_I2C_ErrorCallback+0x82>
		{
			Clear_Chanel(0);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff fdf7 	bl	800164c <Clear_Chanel>
		}
		if (DefaultSettings.S_D != NowSettings.S_D || DefaultSettings.S_I != NowSettings.S_I)
 8001a5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	4a1c      	ldr	r2, [pc, #112]	; (8001ad4 <HAL_I2C_ErrorCallback+0xf8>)
 8001a64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fa59 	bl	8000f20 <__aeabi_fcmpeq>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00a      	beq.n	8001a8a <HAL_I2C_ErrorCallback+0xae>
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <HAL_I2C_ErrorCallback+0xf8>)
 8001a7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fa4e 	bl	8000f20 <__aeabi_fcmpeq>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <HAL_I2C_ErrorCallback+0xb4>
		{
			Clear_Chanel(1);
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	f7ff fdde 	bl	800164c <Clear_Chanel>
		}
		Select_Setting(&DefaultSettings, &NowSettings);
 8001a90:	4910      	ldr	r1, [pc, #64]	; (8001ad4 <HAL_I2C_ErrorCallback+0xf8>)
 8001a92:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001a94:	f7ff fe3c 	bl	8001710 <Select_Setting>
		Set_Configuration();
 8001a98:	f7ff fbee 	bl	8001278 <Set_Configuration>
#if CanWriteMemoryFromI2C
		if(writeToMemory)
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d011      	beq.n	8001ac6 <HAL_I2C_ErrorCallback+0xea>
		{
			DefaultSettings.Need_F_ChannelSpeed = 0;
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	809a      	strh	r2, [r3, #4]
			DefaultSettings.Need_S_ChannelSpeed = 0;
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	831a      	strh	r2, [r3, #24]
			DefaultSettings.Current_F_ChannelSpeed = 0;
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	80da      	strh	r2, [r3, #6]
			DefaultSettings.Current_S_ChannelSpeed = 0;
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	835a      	strh	r2, [r3, #26]
			Select_Setting(&DefaultSettings, (MemoryMap *)&EEPROM_SETTING);
 8001aba:	4908      	ldr	r1, [pc, #32]	; (8001adc <HAL_I2C_ErrorCallback+0x100>)
 8001abc:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <HAL_I2C_ErrorCallback+0xfc>)
 8001abe:	f7ff fe27 	bl	8001710 <Select_Setting>
			HAL_NVIC_SystemReset();
 8001ac2:	f001 fb50 	bl	8003166 <HAL_NVIC_SystemReset>
#endif
	}
	else
	{
	}
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000013c 	.word	0x2000013c
 8001ad4:	200000b8 	.word	0x200000b8
 8001ad8:	20000010 	.word	0x20000010
 8001adc:	0800fc00 	.word	0x0800fc00

08001ae0 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
	...

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001afa:	f000 ff85 	bl	8002a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afe:	f000 f88d 	bl	8001c1c <SystemClock_Config>
   * #endif
   */
  /* USER CODE END SysInit */
#endif
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b02:	f7ff fb45 	bl	8001190 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001b06:	f000 fc09 	bl	800231c <MX_TIM4_Init>
  MX_TIM3_Init();
 8001b0a:	f000 fb9b 	bl	8002244 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001b0e:	f000 fabd 	bl	800208c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b12:	f000 fb3f 	bl	8002194 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001b16:	f7ff fa5b 	bl	8000fd0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(C_PWR_GPIO_Port, C_PWR_Pin, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b20:	4837      	ldr	r0, [pc, #220]	; (8001c00 <main+0x10c>)
 8001b22:	f001 ff58 	bl	80039d6 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b26:	2100      	movs	r1, #0
 8001b28:	4836      	ldr	r0, [pc, #216]	; (8001c04 <main+0x110>)
 8001b2a:	f004 fb7b 	bl	8006224 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001b2e:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <main+0x110>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b36:	2100      	movs	r1, #0
 8001b38:	4833      	ldr	r0, [pc, #204]	; (8001c08 <main+0x114>)
 8001b3a:	f004 fb73 	bl	8006224 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001b3e:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <main+0x114>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2200      	movs	r2, #0
 8001b44:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001b46:	2100      	movs	r1, #0
 8001b48:	4830      	ldr	r0, [pc, #192]	; (8001c0c <main+0x118>)
 8001b4a:	f004 fc5d 	bl	8006408 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001b4e:	2104      	movs	r1, #4
 8001b50:	482e      	ldr	r0, [pc, #184]	; (8001c0c <main+0x118>)
 8001b52:	f004 fc59 	bl	8006408 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001b56:	2100      	movs	r1, #0
 8001b58:	482d      	ldr	r0, [pc, #180]	; (8001c10 <main+0x11c>)
 8001b5a:	f004 fc55 	bl	8006408 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001b5e:	2104      	movs	r1, #4
 8001b60:	482b      	ldr	r0, [pc, #172]	; (8001c10 <main+0x11c>)
 8001b62:	f004 fc51 	bl	8006408 <HAL_TIM_IC_Start_IT>

  Memory_Manage();
 8001b66:	f000 f979 	bl	8001e5c <Memory_Manage>
  uint8_t addr = Select_Address();
 8001b6a:	f000 f987 	bl	8001e7c <Select_Address>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71bb      	strb	r3, [r7, #6]

  MX_I2C1_Init(addr);
 8001b72:	79bb      	ldrb	r3, [r7, #6]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fde5 	bl	8001744 <MX_I2C1_Init>

  Set_Configuration();
 8001b7a:	f7ff fb7d 	bl	8001278 <Set_Configuration>

  Calibration_Motor();
 8001b7e:	f000 f8ab 	bl	8001cd8 <Calibration_Motor>

  NowSettings.Need_S_ChannelSpeed = 0;
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <main+0x120>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	831a      	strh	r2, [r3, #24]
  NowSettings.Need_F_ChannelSpeed = 0;
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <main+0x120>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	809a      	strh	r2, [r3, #4]

  uint8_t test = !HAL_GPIO_ReadPin(TEST1_GPIO_Port, TEST1_Pin) | 1;
 8001b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b92:	481b      	ldr	r0, [pc, #108]	; (8001c00 <main+0x10c>)
 8001b94:	f001 ff08 	bl	80039a8 <HAL_GPIO_ReadPin>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	717b      	strb	r3, [r7, #5]
  if (!test)
 8001b9c:	797b      	ldrb	r3, [r7, #5]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <main+0xc2>
  {
	  HAL_I2C_EnableListen_IT(&hi2c1);
 8001ba2:	481d      	ldr	r0, [pc, #116]	; (8001c18 <main+0x124>)
 8001ba4:	f002 f958 	bl	8003e58 <HAL_I2C_EnableListen_IT>
	  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bae:	4814      	ldr	r0, [pc, #80]	; (8001c00 <main+0x10c>)
 8001bb0:	f001 ff11 	bl	80039d6 <HAL_GPIO_WritePin>
 8001bb4:	e01c      	b.n	8001bf0 <main+0xfc>
  }
  else
  {
	  for (uint8_t i = 0; i < 10; i++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71fb      	strb	r3, [r7, #7]
 8001bba:	e016      	b.n	8001bea <main+0xf6>
	  {
		  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc2:	480f      	ldr	r0, [pc, #60]	; (8001c00 <main+0x10c>)
 8001bc4:	f001 ff07 	bl	80039d6 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001bc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bcc:	f000 ff7e 	bl	8002acc <HAL_Delay>
		  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd6:	480a      	ldr	r0, [pc, #40]	; (8001c00 <main+0x10c>)
 8001bd8:	f001 fefd 	bl	80039d6 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001be0:	f000 ff74 	bl	8002acc <HAL_Delay>
	  for (uint8_t i = 0; i < 10; i++)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	3301      	adds	r3, #1
 8001be8:	71fb      	strb	r3, [r7, #7]
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b09      	cmp	r3, #9
 8001bee:	d9e5      	bls.n	8001bbc <main+0xc8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Test_Process(test);
 8001bf0:	797b      	ldrb	r3, [r7, #5]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f97c 	bl	8001ef0 <Test_Process>
	  Motor_Process();
 8001bf8:	f000 f962 	bl	8001ec0 <Motor_Process>
	  Test_Process(test);
 8001bfc:	e7f8      	b.n	8001bf0 <main+0xfc>
 8001bfe:	bf00      	nop
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	20000148 	.word	0x20000148
 8001c08:	20000190 	.word	0x20000190
 8001c0c:	200001d8 	.word	0x200001d8
 8001c10:	20000220 	.word	0x20000220
 8001c14:	200000b8 	.word	0x200000b8
 8001c18:	200000e8 	.word	0x200000e8

08001c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b094      	sub	sp, #80	; 0x50
 8001c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c26:	2228      	movs	r2, #40	; 0x28
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f005 fbbc 	bl	80073a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fdca 	bl	800580c <HAL_RCC_OscConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c7e:	f000 f977 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c82:	230f      	movs	r3, #15
 8001c84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c94:	2300      	movs	r3, #0
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f004 f836 	bl	8005d10 <HAL_RCC_ClockConfig>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001caa:	f000 f961 	bl	8001f70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f004 f9ac 	bl	8006018 <HAL_RCCEx_PeriphCLKConfig>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001cc6:	f000 f953 	bl	8001f70 <Error_Handler>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3750      	adds	r7, #80	; 0x50
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	0000      	movs	r0, r0
 8001cd4:	0000      	movs	r0, r0
	...

08001cd8 <Calibration_Motor>:

/* USER CODE BEGIN 4 */
void Calibration_Motor()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0
	if (NowSettings.Calibration != 0)
 8001cde:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <Calibration_Motor+0x170>)
 8001ce0:	789b      	ldrb	r3, [r3, #2]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 80a7 	bne.w	8001e36 <Calibration_Motor+0x15e>
	{
		return;
	}
	for (uint8_t i = 0; i < 5; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cee:	e018      	b.n	8001d22 <Calibration_Motor+0x4a>
	{
		HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf6:	4855      	ldr	r0, [pc, #340]	; (8001e4c <Calibration_Motor+0x174>)
 8001cf8:	f001 fe6d 	bl	80039d6 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d00:	f000 fee4 	bl	8002acc <HAL_Delay>
		HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d0a:	4850      	ldr	r0, [pc, #320]	; (8001e4c <Calibration_Motor+0x174>)
 8001d0c:	f001 fe63 	bl	80039d6 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001d10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d14:	f000 feda 	bl	8002acc <HAL_Delay>
	for (uint8_t i = 0; i < 5; i++)
 8001d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d9e2      	bls.n	8001cf0 <Calibration_Motor+0x18>
	}
	int16_t nowPWM = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	84bb      	strh	r3, [r7, #36]	; 0x24

	while(NowSettings.Current_F_ChannelSpeed == 0)
 8001d2e:	e00c      	b.n	8001d4a <Calibration_Motor+0x72>
	{
		Set_Channel_Raw(0, nowPWM);
 8001d30:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d34:	4619      	mov	r1, r3
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fad6 	bl	80012e8 <Set_Channel_Raw>
		nowPWM += 10;
 8001d3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d3e:	330a      	adds	r3, #10
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	84bb      	strh	r3, [r7, #36]	; 0x24
		HAL_Delay(50);
 8001d44:	2032      	movs	r0, #50	; 0x32
 8001d46:	f000 fec1 	bl	8002acc <HAL_Delay>
	while(NowSettings.Current_F_ChannelSpeed == 0)
 8001d4a:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <Calibration_Motor+0x170>)
 8001d4c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0ed      	beq.n	8001d30 <Calibration_Motor+0x58>
	}
	NowSettings.F_Min_Force = nowPWM >> 1;
 8001d54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d58:	105b      	asrs	r3, r3, #1
 8001d5a:	b21b      	sxth	r3, r3
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <Calibration_Motor+0x170>)
 8001d60:	815a      	strh	r2, [r3, #10]
	if (NowSettings.Current_F_ChannelSpeed < 0)
 8001d62:	4b39      	ldr	r3, [pc, #228]	; (8001e48 <Calibration_Motor+0x170>)
 8001d64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	da06      	bge.n	8001d7a <Calibration_Motor+0xa2>
	{
		NowSettings.Config ^= 1 << 5;
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <Calibration_Motor+0x170>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	f083 0320 	eor.w	r3, r3, #32
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <Calibration_Motor+0x170>)
 8001d78:	701a      	strb	r2, [r3, #0]
	}
	uint8_t config = NowSettings.Config;
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <Calibration_Motor+0x170>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	NowSettings.Config |= 0x02;
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <Calibration_Motor+0x170>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <Calibration_Motor+0x170>)
 8001d8e:	701a      	strb	r2, [r3, #0]
	while(NowSettings.Current_F_ChannelSpeed != 0)
 8001d90:	e005      	b.n	8001d9e <Calibration_Motor+0xc6>
	{
		Calculate_Channel(0);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff fb00 	bl	8001398 <Calculate_Channel>
		HAL_Delay(100);
 8001d98:	2064      	movs	r0, #100	; 0x64
 8001d9a:	f000 fe97 	bl	8002acc <HAL_Delay>
	while(NowSettings.Current_F_ChannelSpeed != 0)
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <Calibration_Motor+0x170>)
 8001da0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f4      	bne.n	8001d92 <Calibration_Motor+0xba>
	}
	NowSettings.Config = config;
 8001da8:	4a27      	ldr	r2, [pc, #156]	; (8001e48 <Calibration_Motor+0x170>)
 8001daa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dae:	7013      	strb	r3, [r2, #0]


	float Kp = 0.0857; // Коэффициент усиления системы ШИМ-обороты
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <Calibration_Motor+0x178>)
 8001db2:	61fb      	str	r3, [r7, #28]
	float Tp = 20; // Большая постоянная времени (с)
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <Calibration_Motor+0x17c>)
 8001db6:	61bb      	str	r3, [r7, #24]
	float Tpu = 0.5; // Малая постоянная времени (с)
 8001db8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001dbc:	617b      	str	r3, [r7, #20]

	float Kk = Tp/(2*Kp*Tpu);
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fe10 	bl	80009e8 <__addsf3>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	6979      	ldr	r1, [r7, #20]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ff13 	bl	8000bf8 <__aeabi_fmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	69b8      	ldr	r0, [r7, #24]
 8001dd8:	f7fe ffc2 	bl	8000d60 <__aeabi_fdiv>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	613b      	str	r3, [r7, #16]
	float Tk = Tp;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	60fb      	str	r3, [r7, #12]

	float KP = Kk;			// Kp регулятора
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	60bb      	str	r3, [r7, #8]
	float KI = Kk/Tk*0.1;	// Ki регулятора
 8001de8:	68f9      	ldr	r1, [r7, #12]
 8001dea:	6938      	ldr	r0, [r7, #16]
 8001dec:	f7fe ffb8 	bl	8000d60 <__aeabi_fdiv>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb10 	bl	8000418 <__aeabi_f2d>
 8001df8:	a311      	add	r3, pc, #68	; (adr r3, 8001e40 <Calibration_Motor+0x168>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fb63 	bl	80004c8 <__aeabi_dmul>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe fd97 	bl	800093c <__aeabi_d2f>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	607b      	str	r3, [r7, #4]
	//				 ^ период ПИДа (100мс)

	NowSettings.F_P = KP;
 8001e12:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <Calibration_Motor+0x170>)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	60d3      	str	r3, [r2, #12]
	NowSettings.F_I = KI;
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <Calibration_Motor+0x170>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6113      	str	r3, [r2, #16]
	NowSettings.F_D = 0;
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <Calibration_Motor+0x170>)
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
	NowSettings.Calibration = 1;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <Calibration_Motor+0x170>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	709a      	strb	r2, [r3, #2]
	Select_Setting(&NowSettings, (MemoryMap *)&EEPROM_SETTING);
 8001e2c:	490a      	ldr	r1, [pc, #40]	; (8001e58 <Calibration_Motor+0x180>)
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <Calibration_Motor+0x170>)
 8001e30:	f7ff fc6e 	bl	8001710 <Select_Setting>
 8001e34:	e000      	b.n	8001e38 <Calibration_Motor+0x160>
		return;
 8001e36:	bf00      	nop
}
 8001e38:	3728      	adds	r7, #40	; 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	9999999a 	.word	0x9999999a
 8001e44:	3fb99999 	.word	0x3fb99999
 8001e48:	200000b8 	.word	0x200000b8
 8001e4c:	40010c00 	.word	0x40010c00
 8001e50:	3daf837b 	.word	0x3daf837b
 8001e54:	41a00000 	.word	0x41a00000
 8001e58:	0800fc00 	.word	0x0800fc00

08001e5c <Memory_Manage>:

void Memory_Manage()
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
#if SetWriteCount
	NowSettings.WriteToMemory = SetWriteCount;
#endif
	Select_Setting((MemoryMap *)&NowSettings, (MemoryMap *)&EEPROM_SETTING);
#endif
	Select_Setting((MemoryMap *)&EEPROM_SETTING, (MemoryMap *)&NowSettings);
 8001e60:	4904      	ldr	r1, [pc, #16]	; (8001e74 <Memory_Manage+0x18>)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <Memory_Manage+0x1c>)
 8001e64:	f7ff fc54 	bl	8001710 <Select_Setting>
	HAL_Delay(10);
 8001e68:	200a      	movs	r0, #10
 8001e6a:	f000 fe2f 	bl	8002acc <HAL_Delay>
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200000b8 	.word	0x200000b8
 8001e78:	0800fc00 	.word	0x0800fc00

08001e7c <Select_Address>:

uint8_t Select_Address()
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
	uint8_t result = NowSettings.BaseAddress;
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <Select_Address+0x3c>)
 8001e84:	785b      	ldrb	r3, [r3, #1]
 8001e86:	71fb      	strb	r3, [r7, #7]
	result += HAL_GPIO_ReadPin(ADDR0_GPIO_Port, ADDR0_Pin);
 8001e88:	2110      	movs	r1, #16
 8001e8a:	480c      	ldr	r0, [pc, #48]	; (8001ebc <Select_Address+0x40>)
 8001e8c:	f001 fd8c 	bl	80039a8 <HAL_GPIO_ReadPin>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	4413      	add	r3, r2
 8001e98:	71fb      	strb	r3, [r7, #7]
	result += HAL_GPIO_ReadPin(ADDR1_GPIO_Port, ADDR1_Pin) << 1;
 8001e9a:	2120      	movs	r1, #32
 8001e9c:	4807      	ldr	r0, [pc, #28]	; (8001ebc <Select_Address+0x40>)
 8001e9e:	f001 fd83 	bl	80039a8 <HAL_GPIO_ReadPin>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4413      	add	r3, r2
 8001eac:	71fb      	strb	r3, [r7, #7]
	return result;
 8001eae:	79fb      	ldrb	r3, [r7, #7]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200000b8 	.word	0x200000b8
 8001ebc:	40010c00 	.word	0x40010c00

08001ec0 <Motor_Process>:

void Motor_Process(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	static uint32_t lastTime = 100;
	if (lastTime < HAL_GetTick())
 8001ec4:	f000 fdf8 	bl	8002ab8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <Motor_Process+0x2c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d90a      	bls.n	8001ee8 <Motor_Process+0x28>
	{
		Calculate_Channel(0);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f7ff fa60 	bl	8001398 <Calculate_Channel>
		Calculate_Channel(1);
 8001ed8:	2001      	movs	r0, #1
 8001eda:	f7ff fa5d 	bl	8001398 <Calculate_Channel>
		lastTime += 100; // период обновления, мс
 8001ede:	4b03      	ldr	r3, [pc, #12]	; (8001eec <Motor_Process+0x2c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3364      	adds	r3, #100	; 0x64
 8001ee4:	4a01      	ldr	r2, [pc, #4]	; (8001eec <Motor_Process+0x2c>)
 8001ee6:	6013      	str	r3, [r2, #0]
	}
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000044 	.word	0x20000044

08001ef0 <Test_Process>:
void Test_Process(uint8_t test)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
	if (!test)
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d02c      	beq.n	8001f5a <Test_Process+0x6a>
	{
		return;
	}
	static uint32_t lastTime = 0;
	static int16_t lastValue = 0;
	if (lastTime < HAL_GetTick())
 8001f00:	f000 fdda 	bl	8002ab8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <Test_Process+0x74>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d926      	bls.n	8001f5c <Test_Process+0x6c>
	{
		lastValue += 500;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <Test_Process+0x78>)
 8001f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <Test_Process+0x78>)
 8001f20:	801a      	strh	r2, [r3, #0]
		if (lastValue > NowSettings.F_MaxAbsSpeed)
 8001f22:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <Test_Process+0x78>)
 8001f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <Test_Process+0x7c>)
 8001f2c:	891b      	ldrh	r3, [r3, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dd06      	ble.n	8001f40 <Test_Process+0x50>
		{
			lastValue = -NowSettings.F_MaxAbsSpeed;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <Test_Process+0x7c>)
 8001f34:	891b      	ldrh	r3, [r3, #8]
 8001f36:	425b      	negs	r3, r3
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <Test_Process+0x78>)
 8001f3e:	801a      	strh	r2, [r3, #0]
		}
		NowSettings.Need_F_ChannelSpeed = lastValue;
 8001f40:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <Test_Process+0x78>)
 8001f42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <Test_Process+0x7c>)
 8001f48:	809a      	strh	r2, [r3, #4]
		lastTime += 5000;
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <Test_Process+0x74>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001f52:	3308      	adds	r3, #8
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <Test_Process+0x74>)
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e000      	b.n	8001f5c <Test_Process+0x6c>
		return;
 8001f5a:	bf00      	nop
	}
}
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000140 	.word	0x20000140
 8001f68:	20000144 	.word	0x20000144
 8001f6c:	200000b8 	.word	0x200000b8

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <Error_Handler+0x8>
	...

08001f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6193      	str	r3, [r2, #24]
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_MspInit+0x5c>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fae:	607b      	str	r3, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_MspInit+0x60>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_MspInit+0x60>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010000 	.word	0x40010000

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002026:	f000 fd35 	bl	8002a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <TIM3_IRQHandler+0x10>)
 8002036:	f004 faed 	bl	8006614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200001d8 	.word	0x200001d8

08002044 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <TIM4_IRQHandler+0x10>)
 800204a:	f004 fae3 	bl	8006614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000220 	.word	0x20000220

08002058 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <I2C1_EV_IRQHandler+0x10>)
 800205e:	f001 ff30 	bl	8003ec2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	200000e8 	.word	0x200000e8

0800206c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <I2C1_ER_IRQHandler+0x10>)
 8002072:	f002 f897 	bl	80041a4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200000e8 	.word	0x200000e8

08002080 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b092      	sub	sp, #72	; 0x48
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002092:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	615a      	str	r2, [r3, #20]
 80020ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	2220      	movs	r2, #32
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f005 f976 	bl	80073a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020bc:	4b33      	ldr	r3, [pc, #204]	; (800218c <MX_TIM1_Init+0x100>)
 80020be:	4a34      	ldr	r2, [pc, #208]	; (8002190 <MX_TIM1_Init+0x104>)
 80020c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020c2:	4b32      	ldr	r3, [pc, #200]	; (800218c <MX_TIM1_Init+0x100>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <MX_TIM1_Init+0x100>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <MX_TIM1_Init+0x100>)
 80020d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d6:	4b2d      	ldr	r3, [pc, #180]	; (800218c <MX_TIM1_Init+0x100>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020dc:	4b2b      	ldr	r3, [pc, #172]	; (800218c <MX_TIM1_Init+0x100>)
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e2:	4b2a      	ldr	r3, [pc, #168]	; (800218c <MX_TIM1_Init+0x100>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020e8:	4828      	ldr	r0, [pc, #160]	; (800218c <MX_TIM1_Init+0x100>)
 80020ea:	f004 f84b 	bl	8006184 <HAL_TIM_PWM_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80020f4:	f7ff ff3c 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002100:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002104:	4619      	mov	r1, r3
 8002106:	4821      	ldr	r0, [pc, #132]	; (800218c <MX_TIM1_Init+0x100>)
 8002108:	f005 f85a 	bl	80071c0 <HAL_TIMEx_MasterConfigSynchronization>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002112:	f7ff ff2d 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002116:	2360      	movs	r3, #96	; 0x60
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002122:	2300      	movs	r3, #0
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800212e:	2300      	movs	r3, #0
 8002130:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	2200      	movs	r2, #0
 8002138:	4619      	mov	r1, r3
 800213a:	4814      	ldr	r0, [pc, #80]	; (800218c <MX_TIM1_Init+0x100>)
 800213c:	f004 fc06 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002146:	f7ff ff13 	bl	8001f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800215e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002162:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	4619      	mov	r1, r3
 800216c:	4807      	ldr	r0, [pc, #28]	; (800218c <MX_TIM1_Init+0x100>)
 800216e:	f005 f885 	bl	800727c <HAL_TIMEx_ConfigBreakDeadTime>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002178:	f7ff fefa 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800217c:	4803      	ldr	r0, [pc, #12]	; (800218c <MX_TIM1_Init+0x100>)
 800217e:	f000 f9e5 	bl	800254c <HAL_TIM_MspPostInit>

}
 8002182:	bf00      	nop
 8002184:	3748      	adds	r7, #72	; 0x48
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000148 	.word	0x20000148
 8002190:	40012c00 	.word	0x40012c00

08002194 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219a:	f107 0320 	add.w	r3, r7, #32
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]
 80021b2:	615a      	str	r2, [r3, #20]
 80021b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <MX_TIM2_Init+0xac>)
 80021b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80021be:	4b20      	ldr	r3, [pc, #128]	; (8002240 <MX_TIM2_Init+0xac>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c4:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <MX_TIM2_Init+0xac>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <MX_TIM2_Init+0xac>)
 80021cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d2:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <MX_TIM2_Init+0xac>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <MX_TIM2_Init+0xac>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80021de:	4818      	ldr	r0, [pc, #96]	; (8002240 <MX_TIM2_Init+0xac>)
 80021e0:	f003 ffd0 	bl	8006184 <HAL_TIM_PWM_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80021ea:	f7ff fec1 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021f6:	f107 0320 	add.w	r3, r7, #32
 80021fa:	4619      	mov	r1, r3
 80021fc:	4810      	ldr	r0, [pc, #64]	; (8002240 <MX_TIM2_Init+0xac>)
 80021fe:	f004 ffdf 	bl	80071c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002208:	f7ff feb2 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800220c:	2360      	movs	r3, #96	; 0x60
 800220e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	2200      	movs	r2, #0
 8002220:	4619      	mov	r1, r3
 8002222:	4807      	ldr	r0, [pc, #28]	; (8002240 <MX_TIM2_Init+0xac>)
 8002224:	f004 fb92 	bl	800694c <HAL_TIM_PWM_ConfigChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800222e:	f7ff fe9f 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002232:	4803      	ldr	r0, [pc, #12]	; (8002240 <MX_TIM2_Init+0xac>)
 8002234:	f000 f98a 	bl	800254c <HAL_TIM_MspPostInit>

}
 8002238:	bf00      	nop
 800223a:	3728      	adds	r7, #40	; 0x28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000190 	.word	0x20000190

08002244 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224a:	f107 0310 	add.w	r3, r7, #16
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002254:	463b      	mov	r3, r7
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002260:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <MX_TIM3_Init+0xd0>)
 8002262:	4a2d      	ldr	r2, [pc, #180]	; (8002318 <MX_TIM3_Init+0xd4>)
 8002264:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3599;
 8002266:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <MX_TIM3_Init+0xd0>)
 8002268:	f640 620f 	movw	r2, #3599	; 0xe0f
 800226c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <MX_TIM3_Init+0xd0>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <MX_TIM3_Init+0xd0>)
 8002276:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800227a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <MX_TIM3_Init+0xd0>)
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <MX_TIM3_Init+0xd0>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002288:	4822      	ldr	r0, [pc, #136]	; (8002314 <MX_TIM3_Init+0xd0>)
 800228a:	f004 f86d 	bl	8006368 <HAL_TIM_IC_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002294:	f7ff fe6c 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	481b      	ldr	r0, [pc, #108]	; (8002314 <MX_TIM3_Init+0xd0>)
 80022a8:	f004 ff8a 	bl	80071c0 <HAL_TIMEx_MasterConfigSynchronization>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80022b2:	f7ff fe5d 	bl	8001f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022b6:	2300      	movs	r3, #0
 80022b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022ba:	2301      	movs	r3, #1
 80022bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022c6:	463b      	mov	r3, r7
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	4811      	ldr	r0, [pc, #68]	; (8002314 <MX_TIM3_Init+0xd0>)
 80022ce:	f004 faa9 	bl	8006824 <HAL_TIM_IC_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80022d8:	f7ff fe4a 	bl	8001f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80022dc:	2302      	movs	r3, #2
 80022de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80022e0:	2302      	movs	r3, #2
 80022e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022e4:	463b      	mov	r3, r7
 80022e6:	2204      	movs	r2, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	480a      	ldr	r0, [pc, #40]	; (8002314 <MX_TIM3_Init+0xd0>)
 80022ec:	f004 fa9a 	bl	8006824 <HAL_TIM_IC_ConfigChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80022f6:	f7ff fe3b 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  __HAL_TIM_ENABLE_IT(&htim3, TIM_IT_UPDATE);
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <MX_TIM3_Init+0xd0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <MX_TIM3_Init+0xd0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f042 0201 	orr.w	r2, r2, #1
 8002308:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM3_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200001d8 	.word	0x200001d8
 8002318:	40000400 	.word	0x40000400

0800231c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002322:	f107 0310 	add.w	r3, r7, #16
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800232c:	463b      	mov	r3, r7
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002338:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <MX_TIM4_Init+0xd0>)
 800233a:	4a2d      	ldr	r2, [pc, #180]	; (80023f0 <MX_TIM4_Init+0xd4>)
 800233c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3599;
 800233e:	4b2b      	ldr	r3, [pc, #172]	; (80023ec <MX_TIM4_Init+0xd0>)
 8002340:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002344:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002346:	4b29      	ldr	r3, [pc, #164]	; (80023ec <MX_TIM4_Init+0xd0>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 800234c:	4b27      	ldr	r3, [pc, #156]	; (80023ec <MX_TIM4_Init+0xd0>)
 800234e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002352:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002354:	4b25      	ldr	r3, [pc, #148]	; (80023ec <MX_TIM4_Init+0xd0>)
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <MX_TIM4_Init+0xd0>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002360:	4822      	ldr	r0, [pc, #136]	; (80023ec <MX_TIM4_Init+0xd0>)
 8002362:	f004 f801 	bl	8006368 <HAL_TIM_IC_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800236c:	f7ff fe00 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	4619      	mov	r1, r3
 800237e:	481b      	ldr	r0, [pc, #108]	; (80023ec <MX_TIM4_Init+0xd0>)
 8002380:	f004 ff1e 	bl	80071c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 800238a:	f7ff fdf1 	bl	8001f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800238e:	2300      	movs	r3, #0
 8002390:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002392:	2301      	movs	r3, #1
 8002394:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800239e:	463b      	mov	r3, r7
 80023a0:	2200      	movs	r2, #0
 80023a2:	4619      	mov	r1, r3
 80023a4:	4811      	ldr	r0, [pc, #68]	; (80023ec <MX_TIM4_Init+0xd0>)
 80023a6:	f004 fa3d 	bl	8006824 <HAL_TIM_IC_ConfigChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80023b0:	f7ff fdde 	bl	8001f70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80023b4:	2302      	movs	r3, #2
 80023b6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80023b8:	2302      	movs	r3, #2
 80023ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023bc:	463b      	mov	r3, r7
 80023be:	2204      	movs	r2, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	480a      	ldr	r0, [pc, #40]	; (80023ec <MX_TIM4_Init+0xd0>)
 80023c4:	f004 fa2e 	bl	8006824 <HAL_TIM_IC_ConfigChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80023ce:	f7ff fdcf 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_TIM4_Init+0xd0>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <MX_TIM4_Init+0xd0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM4_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000220 	.word	0x20000220
 80023f0:	40000800 	.word	0x40000800

080023f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a12      	ldr	r2, [pc, #72]	; (800244c <HAL_TIM_PWM_MspInit+0x58>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d10c      	bne.n	8002420 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_TIM_PWM_MspInit+0x5c>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	4a11      	ldr	r2, [pc, #68]	; (8002450 <HAL_TIM_PWM_MspInit+0x5c>)
 800240c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002410:	6193      	str	r3, [r2, #24]
 8002412:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_TIM_PWM_MspInit+0x5c>)
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800241e:	e010      	b.n	8002442 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002428:	d10b      	bne.n	8002442 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_TIM_PWM_MspInit+0x5c>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a08      	ldr	r2, [pc, #32]	; (8002450 <HAL_TIM_PWM_MspInit+0x5c>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	61d3      	str	r3, [r2, #28]
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_TIM_PWM_MspInit+0x5c>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0318 	add.w	r3, r7, #24
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
  if(tim_icHandle->Instance==TIM3)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a32      	ldr	r2, [pc, #200]	; (8002538 <HAL_TIM_IC_MspInit+0xe4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d12c      	bne.n	80024ce <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002474:	4b31      	ldr	r3, [pc, #196]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	4a30      	ldr	r2, [pc, #192]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 800247a:	f043 0302 	orr.w	r3, r3, #2
 800247e:	61d3      	str	r3, [r2, #28]
 8002480:	4b2e      	ldr	r3, [pc, #184]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	4a2a      	ldr	r2, [pc, #168]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6193      	str	r3, [r2, #24]
 8002498:	4b28      	ldr	r3, [pc, #160]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = HALL2_Pin;
 80024a4:	2340      	movs	r3, #64	; 0x40
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HALL2_GPIO_Port, &GPIO_InitStruct);
 80024b0:	f107 0318 	add.w	r3, r7, #24
 80024b4:	4619      	mov	r1, r3
 80024b6:	4822      	ldr	r0, [pc, #136]	; (8002540 <HAL_TIM_IC_MspInit+0xec>)
 80024b8:	f001 f8f2 	bl	80036a0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024bc:	2200      	movs	r2, #0
 80024be:	2100      	movs	r1, #0
 80024c0:	201d      	movs	r0, #29
 80024c2:	f000 fe26 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024c6:	201d      	movs	r0, #29
 80024c8:	f000 fe3f 	bl	800314a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80024cc:	e030      	b.n	8002530 <HAL_TIM_IC_MspInit+0xdc>
  else if(tim_icHandle->Instance==TIM4)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_TIM_IC_MspInit+0xf0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d12b      	bne.n	8002530 <HAL_TIM_IC_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	61d3      	str	r3, [r2, #28]
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	6193      	str	r3, [r2, #24]
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_TIM_IC_MspInit+0xe8>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = HALL1_Pin;
 8002508:	2340      	movs	r3, #64	; 0x40
 800250a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(HALL1_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 0318 	add.w	r3, r7, #24
 8002518:	4619      	mov	r1, r3
 800251a:	480b      	ldr	r0, [pc, #44]	; (8002548 <HAL_TIM_IC_MspInit+0xf4>)
 800251c:	f001 f8c0 	bl	80036a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002520:	2200      	movs	r2, #0
 8002522:	2100      	movs	r1, #0
 8002524:	201e      	movs	r0, #30
 8002526:	f000 fdf4 	bl	8003112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800252a:	201e      	movs	r0, #30
 800252c:	f000 fe0d 	bl	800314a <HAL_NVIC_EnableIRQ>
}
 8002530:	bf00      	nop
 8002532:	3728      	adds	r7, #40	; 0x28
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40000400 	.word	0x40000400
 800253c:	40021000 	.word	0x40021000
 8002540:	40010800 	.word	0x40010800
 8002544:	40000800 	.word	0x40000800
 8002548:	40010c00 	.word	0x40010c00

0800254c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <HAL_TIM_MspPostInit+0x98>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d119      	bne.n	80025a0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256c:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <HAL_TIM_MspPostInit+0x9c>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <HAL_TIM_MspPostInit+0x9c>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_TIM_MspPostInit+0x9c>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_COIL_Pin;
 8002584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002588:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258e:	2302      	movs	r3, #2
 8002590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_COIL_GPIO_Port, &GPIO_InitStruct);
 8002592:	f107 0310 	add.w	r3, r7, #16
 8002596:	4619      	mov	r1, r3
 8002598:	4814      	ldr	r0, [pc, #80]	; (80025ec <HAL_TIM_MspPostInit+0xa0>)
 800259a:	f001 f881 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800259e:	e01c      	b.n	80025da <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a8:	d117      	bne.n	80025da <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_TIM_MspPostInit+0x9c>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_TIM_MspPostInit+0x9c>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6193      	str	r3, [r2, #24]
 80025b6:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_TIM_MspPostInit+0x9c>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MOTOR_Pin;
 80025c2:	2301      	movs	r3, #1
 80025c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2302      	movs	r3, #2
 80025cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	4619      	mov	r1, r3
 80025d4:	4805      	ldr	r0, [pc, #20]	; (80025ec <HAL_TIM_MspPostInit+0xa0>)
 80025d6:	f001 f863 	bl	80036a0 <HAL_GPIO_Init>
}
 80025da:	bf00      	nop
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40010800 	.word	0x40010800

080025f0 <HAL_TIM_IC_CaptureCallback>:

volatile int8_t nowState = 0;
volatile int32_t averageTime = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a9b      	ldr	r2, [pc, #620]	; (800286c <HAL_TIM_IC_CaptureCallback+0x27c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	f040 80c4 	bne.w	800278c <HAL_TIM_IC_CaptureCallback+0x19c>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7f1b      	ldrb	r3, [r3, #28]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d15c      	bne.n	80026c6 <HAL_TIM_IC_CaptureCallback+0xd6>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2200      	movs	r2, #0
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 8002614:	4b96      	ldr	r3, [pc, #600]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b25b      	sxtb	r3, r3
 800261a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261e:	d026      	beq.n	800266e <HAL_TIM_IC_CaptureCallback+0x7e>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d14c      	bne.n	80026be <HAL_TIM_IC_CaptureCallback+0xce>
			{
				case 0:
					nowState++;
 8002624:	4b92      	ldr	r3, [pc, #584]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b25b      	sxtb	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	3301      	adds	r3, #1
 800262e:	b2db      	uxtb	r3, r3
 8002630:	b25a      	sxtb	r2, r3
 8002632:	4b8f      	ldr	r3, [pc, #572]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002634:	701a      	strb	r2, [r3, #0]
					averageTime = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002636:	2100      	movs	r1, #0
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f004 fa45 	bl	8006ac8 <HAL_TIM_ReadCapturedValue>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	4b8c      	ldr	r3, [pc, #560]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002644:	601a      	str	r2, [r3, #0]
					if ((NowSettings.Clock_Setting & 3) >= 2)
 8002646:	4b8c      	ldr	r3, [pc, #560]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 8002648:	78db      	ldrb	r3, [r3, #3]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d03b      	beq.n	80026ca <HAL_TIM_IC_CaptureCallback+0xda>
					{
						NowSettings.Current_F_ChannelSpeed = CalculateRPM(nowState, averageTime);
 8002652:	4b87      	ldr	r3, [pc, #540]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b25b      	sxtb	r3, r3
 8002658:	4a86      	ldr	r2, [pc, #536]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f81a 	bl	8001698 <CalculateRPM>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b83      	ldr	r3, [pc, #524]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 800266a:	80da      	strh	r2, [r3, #6]
					}
					break;
 800266c:	e02d      	b.n	80026ca <HAL_TIM_IC_CaptureCallback+0xda>
				case -1:
					nowState--;
 800266e:	4b80      	ldr	r3, [pc, #512]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b25b      	sxtb	r3, r3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	b25a      	sxtb	r2, r3
 800267c:	4b7c      	ldr	r3, [pc, #496]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 800267e:	701a      	strb	r2, [r3, #0]
					averageTime -= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002680:	2100      	movs	r1, #0
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f004 fa20 	bl	8006ac8 <HAL_TIM_ReadCapturedValue>
 8002688:	4603      	mov	r3, r0
 800268a:	4a7a      	ldr	r2, [pc, #488]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	461a      	mov	r2, r3
 8002692:	4b78      	ldr	r3, [pc, #480]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002694:	601a      	str	r2, [r3, #0]
					if ((NowSettings.Clock_Setting & 3) >= 1)
 8002696:	4b78      	ldr	r3, [pc, #480]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 8002698:	78db      	ldrb	r3, [r3, #3]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	dd15      	ble.n	80026ce <HAL_TIM_IC_CaptureCallback+0xde>
					{
						NowSettings.Current_F_ChannelSpeed = CalculateRPM(nowState, averageTime);
 80026a2:	4b73      	ldr	r3, [pc, #460]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b25b      	sxtb	r3, r3
 80026a8:	4a72      	ldr	r2, [pc, #456]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fff2 	bl	8001698 <CalculateRPM>
 80026b4:	4603      	mov	r3, r0
 80026b6:	461a      	mov	r2, r3
 80026b8:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 80026ba:	80da      	strh	r2, [r3, #6]
					}
					break;
 80026bc:	e007      	b.n	80026ce <HAL_TIM_IC_CaptureCallback+0xde>
				default:
					nowState = 0;
 80026be:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
					break;
 80026c4:	e004      	b.n	80026d0 <HAL_TIM_IC_CaptureCallback+0xe0>
			}
		}
 80026c6:	bf00      	nop
 80026c8:	e002      	b.n	80026d0 <HAL_TIM_IC_CaptureCallback+0xe0>
					break;
 80026ca:	bf00      	nop
 80026cc:	e000      	b.n	80026d0 <HAL_TIM_IC_CaptureCallback+0xe0>
					break;
 80026ce:	bf00      	nop
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7f1b      	ldrb	r3, [r3, #28]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d159      	bne.n	800278c <HAL_TIM_IC_CaptureCallback+0x19c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 80026e0:	4b63      	ldr	r3, [pc, #396]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	b25b      	sxtb	r3, r3
 80026e6:	f113 0f03 	cmn.w	r3, #3
 80026ea:	d029      	beq.n	8002740 <HAL_TIM_IC_CaptureCallback+0x150>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d149      	bne.n	8002784 <HAL_TIM_IC_CaptureCallback+0x194>
			{
				case 2:
					nowState++;
 80026f0:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	b25a      	sxtb	r2, r3
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002700:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002702:	2104      	movs	r1, #4
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f004 f9df 	bl	8006ac8 <HAL_TIM_ReadCapturedValue>
 800270a:	4603      	mov	r3, r0
 800270c:	4a59      	ldr	r2, [pc, #356]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4413      	add	r3, r2
 8002712:	461a      	mov	r2, r3
 8002714:	4b57      	ldr	r3, [pc, #348]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002716:	601a      	str	r2, [r3, #0]
					if ((NowSettings.Clock_Setting & 3) >= 3)
 8002718:	4b57      	ldr	r3, [pc, #348]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 800271a:	78db      	ldrb	r3, [r3, #3]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b02      	cmp	r3, #2
 8002722:	dd35      	ble.n	8002790 <HAL_TIM_IC_CaptureCallback+0x1a0>
					{
						NowSettings.Current_F_ChannelSpeed = CalculateRPM(nowState, averageTime);
 8002724:	4b52      	ldr	r3, [pc, #328]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b25b      	sxtb	r3, r3
 800272a:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe ffb1 	bl	8001698 <CalculateRPM>
 8002736:	4603      	mov	r3, r0
 8002738:	461a      	mov	r2, r3
 800273a:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 800273c:	80da      	strh	r2, [r3, #6]
					}
					break;
 800273e:	e027      	b.n	8002790 <HAL_TIM_IC_CaptureCallback+0x1a0>
				case -3:
					nowState--;
 8002740:	4b4b      	ldr	r3, [pc, #300]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	b25b      	sxtb	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	b25a      	sxtb	r2, r3
 800274e:	4b48      	ldr	r3, [pc, #288]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002750:	701a      	strb	r2, [r3, #0]
					averageTime -= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002752:	2104      	movs	r1, #4
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f004 f9b7 	bl	8006ac8 <HAL_TIM_ReadCapturedValue>
 800275a:	4603      	mov	r3, r0
 800275c:	4a45      	ldr	r2, [pc, #276]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	461a      	mov	r2, r3
 8002764:	4b43      	ldr	r3, [pc, #268]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002766:	601a      	str	r2, [r3, #0]
					if ((NowSettings.Clock_Setting & 3) >= 0)
					{
						NowSettings.Current_F_ChannelSpeed = CalculateRPM(nowState, averageTime);
 8002768:	4b41      	ldr	r3, [pc, #260]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	b25b      	sxtb	r3, r3
 800276e:	4a41      	ldr	r2, [pc, #260]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002770:	6812      	ldr	r2, [r2, #0]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe ff8f 	bl	8001698 <CalculateRPM>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	4b3e      	ldr	r3, [pc, #248]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 8002780:	80da      	strh	r2, [r3, #6]
					}
				break;
 8002782:	e006      	b.n	8002792 <HAL_TIM_IC_CaptureCallback+0x1a2>
				default:
					nowState = 0;
 8002784:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
					break;
 800278a:	e002      	b.n	8002792 <HAL_TIM_IC_CaptureCallback+0x1a2>
			}
		}
 800278c:	bf00      	nop
 800278e:	e000      	b.n	8002792 <HAL_TIM_IC_CaptureCallback+0x1a2>
					break;
 8002790:	bf00      	nop

	}
	if (htim->Instance == TIM4)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a39      	ldr	r2, [pc, #228]	; (800287c <HAL_TIM_IC_CaptureCallback+0x28c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	f040 80d0 	bne.w	800293e <HAL_TIM_IC_CaptureCallback+0x34e>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	7f1b      	ldrb	r3, [r3, #28]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d15d      	bne.n	8002862 <HAL_TIM_IC_CaptureCallback+0x272>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 80027ae:	4b30      	ldr	r3, [pc, #192]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <HAL_TIM_IC_CaptureCallback+0x1ce>
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d026      	beq.n	800280a <HAL_TIM_IC_CaptureCallback+0x21a>
 80027bc:	e04d      	b.n	800285a <HAL_TIM_IC_CaptureCallback+0x26a>
			{
				case 0:
					nowState--;
 80027be:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	b25b      	sxtb	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	b25a      	sxtb	r2, r3
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 80027ce:	701a      	strb	r2, [r3, #0]
					averageTime = -HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80027d0:	2100      	movs	r1, #0
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f004 f978 	bl	8006ac8 <HAL_TIM_ReadCapturedValue>
 80027d8:	4603      	mov	r3, r0
 80027da:	425b      	negs	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	4b25      	ldr	r3, [pc, #148]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 80027e0:	601a      	str	r2, [r3, #0]
					if ((NowSettings.Clock_Setting & 3) >= 2)
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 80027e4:	78db      	ldrb	r3, [r3, #3]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d03b      	beq.n	8002866 <HAL_TIM_IC_CaptureCallback+0x276>
					{
						NowSettings.Current_F_ChannelSpeed = CalculateRPM(nowState, averageTime);
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe ff4c 	bl	8001698 <CalculateRPM>
 8002800:	4603      	mov	r3, r0
 8002802:	461a      	mov	r2, r3
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 8002806:	80da      	strh	r2, [r3, #6]
					}
					break;
 8002808:	e02d      	b.n	8002866 <HAL_TIM_IC_CaptureCallback+0x276>
				case 1:
					nowState++;
 800280a:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b25b      	sxtb	r3, r3
 8002810:	b2db      	uxtb	r3, r3
 8002812:	3301      	adds	r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	b25a      	sxtb	r2, r3
 8002818:	4b15      	ldr	r3, [pc, #84]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 800281a:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800281c:	2100      	movs	r1, #0
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f004 f952 	bl	8006ac8 <HAL_TIM_ReadCapturedValue>
 8002824:	4603      	mov	r3, r0
 8002826:	4a13      	ldr	r2, [pc, #76]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002828:	6812      	ldr	r2, [r2, #0]
 800282a:	4413      	add	r3, r2
 800282c:	461a      	mov	r2, r3
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002830:	601a      	str	r2, [r3, #0]
					if ((NowSettings.Clock_Setting & 3) >= 1)
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 8002834:	78db      	ldrb	r3, [r3, #3]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b00      	cmp	r3, #0
 800283c:	dd20      	ble.n	8002880 <HAL_TIM_IC_CaptureCallback+0x290>
					{
						NowSettings.Current_F_ChannelSpeed = CalculateRPM(nowState, averageTime);
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b25b      	sxtb	r3, r3
 8002844:	4a0b      	ldr	r2, [pc, #44]	; (8002874 <HAL_TIM_IC_CaptureCallback+0x284>)
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe ff24 	bl	8001698 <CalculateRPM>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_TIM_IC_CaptureCallback+0x288>)
 8002856:	80da      	strh	r2, [r3, #6]
					}
					break;
 8002858:	e012      	b.n	8002880 <HAL_TIM_IC_CaptureCallback+0x290>
				default:
					nowState = 0;
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_TIM_IC_CaptureCallback+0x280>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
					break;
 8002860:	e00f      	b.n	8002882 <HAL_TIM_IC_CaptureCallback+0x292>
			}
		}
 8002862:	bf00      	nop
 8002864:	e00d      	b.n	8002882 <HAL_TIM_IC_CaptureCallback+0x292>
					break;
 8002866:	bf00      	nop
 8002868:	e00b      	b.n	8002882 <HAL_TIM_IC_CaptureCallback+0x292>
 800286a:	bf00      	nop
 800286c:	40000400 	.word	0x40000400
 8002870:	20000268 	.word	0x20000268
 8002874:	2000026c 	.word	0x2000026c
 8002878:	200000b8 	.word	0x200000b8
 800287c:	40000800 	.word	0x40000800
					break;
 8002880:	bf00      	nop
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	7f1b      	ldrb	r3, [r3, #28]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d159      	bne.n	800293e <HAL_TIM_IC_CaptureCallback+0x34e>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
			switch (nowState)
 8002892:	4b36      	ldr	r3, [pc, #216]	; (800296c <HAL_TIM_IC_CaptureCallback+0x37c>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b25b      	sxtb	r3, r3
 8002898:	f113 0f02 	cmn.w	r3, #2
 800289c:	d023      	beq.n	80028e6 <HAL_TIM_IC_CaptureCallback+0x2f6>
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d149      	bne.n	8002936 <HAL_TIM_IC_CaptureCallback+0x346>
			{
				case 3:
					nowState++;
 80028a2:	4b32      	ldr	r3, [pc, #200]	; (800296c <HAL_TIM_IC_CaptureCallback+0x37c>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	b25a      	sxtb	r2, r3
 80028b0:	4b2e      	ldr	r3, [pc, #184]	; (800296c <HAL_TIM_IC_CaptureCallback+0x37c>)
 80028b2:	701a      	strb	r2, [r3, #0]
					averageTime += HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80028b4:	2104      	movs	r1, #4
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f004 f906 	bl	8006ac8 <HAL_TIM_ReadCapturedValue>
 80028bc:	4603      	mov	r3, r0
 80028be:	4a2c      	ldr	r2, [pc, #176]	; (8002970 <HAL_TIM_IC_CaptureCallback+0x380>)
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b2a      	ldr	r3, [pc, #168]	; (8002970 <HAL_TIM_IC_CaptureCallback+0x380>)
 80028c8:	601a      	str	r2, [r3, #0]
					if ((NowSettings.Clock_Setting & 3) >= 0)
					{
						NowSettings.Current_F_ChannelSpeed = CalculateRPM(nowState, averageTime);
 80028ca:	4b28      	ldr	r3, [pc, #160]	; (800296c <HAL_TIM_IC_CaptureCallback+0x37c>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b25b      	sxtb	r3, r3
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_TIM_IC_CaptureCallback+0x380>)
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fede 	bl	8001698 <CalculateRPM>
 80028dc:	4603      	mov	r3, r0
 80028de:	461a      	mov	r2, r3
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x384>)
 80028e2:	80da      	strh	r2, [r3, #6]
					}
					break;
 80028e4:	e02e      	b.n	8002944 <HAL_TIM_IC_CaptureCallback+0x354>
				case -2:
					nowState--;
 80028e6:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_TIM_IC_CaptureCallback+0x37c>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	b25a      	sxtb	r2, r3
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_TIM_IC_CaptureCallback+0x37c>)
 80028f6:	701a      	strb	r2, [r3, #0]
					averageTime -= HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80028f8:	2104      	movs	r1, #4
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f004 f8e4 	bl	8006ac8 <HAL_TIM_ReadCapturedValue>
 8002900:	4603      	mov	r3, r0
 8002902:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_TIM_IC_CaptureCallback+0x380>)
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	461a      	mov	r2, r3
 800290a:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_TIM_IC_CaptureCallback+0x380>)
 800290c:	601a      	str	r2, [r3, #0]
					if ((NowSettings.Clock_Setting & 3) >= 3)
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x384>)
 8002910:	78db      	ldrb	r3, [r3, #3]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b02      	cmp	r3, #2
 8002918:	dd13      	ble.n	8002942 <HAL_TIM_IC_CaptureCallback+0x352>
					{
						NowSettings.Current_F_ChannelSpeed = CalculateRPM(nowState, averageTime);
 800291a:	4b14      	ldr	r3, [pc, #80]	; (800296c <HAL_TIM_IC_CaptureCallback+0x37c>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b25b      	sxtb	r3, r3
 8002920:	4a13      	ldr	r2, [pc, #76]	; (8002970 <HAL_TIM_IC_CaptureCallback+0x380>)
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe feb6 	bl	8001698 <CalculateRPM>
 800292c:	4603      	mov	r3, r0
 800292e:	461a      	mov	r2, r3
 8002930:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_TIM_IC_CaptureCallback+0x384>)
 8002932:	80da      	strh	r2, [r3, #6]
					}
				break;
 8002934:	e005      	b.n	8002942 <HAL_TIM_IC_CaptureCallback+0x352>
				default:
					nowState = 0;
 8002936:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HAL_TIM_IC_CaptureCallback+0x37c>)
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
					break;
 800293c:	e002      	b.n	8002944 <HAL_TIM_IC_CaptureCallback+0x354>
			}
		}
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <HAL_TIM_IC_CaptureCallback+0x354>
				break;
 8002942:	bf00      	nop
	}
	if (abs(nowState) == 4)
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_TIM_IC_CaptureCallback+0x37c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	b25b      	sxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	bfb8      	it	lt
 800294e:	425b      	neglt	r3, r3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b04      	cmp	r3, #4
 8002954:	d105      	bne.n	8002962 <HAL_TIM_IC_CaptureCallback+0x372>
	{
		averageTime = 0;
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_TIM_IC_CaptureCallback+0x380>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
		nowState = 0;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_TIM_IC_CaptureCallback+0x37c>)
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
	}
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000268 	.word	0x20000268
 8002970:	2000026c 	.word	0x2000026c
 8002974:	200000b8 	.word	0x200000b8

08002978 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	if ((htim->Instance == TIM3) || (htim->Instance == TIM4))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_TIM_PeriodElapsedCallback+0x1c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d105      	bne.n	80029a0 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		NowSettings.Current_F_ChannelSpeed = 0;
 8002994:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002996:	2200      	movs	r2, #0
 8002998:	80da      	strh	r2, [r3, #6]
		nowState = 0;
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
	}
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800
 80029b4:	200000b8 	.word	0x200000b8
 80029b8:	20000268 	.word	0x20000268

080029bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029bc:	480c      	ldr	r0, [pc, #48]	; (80029f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029be:	490d      	ldr	r1, [pc, #52]	; (80029f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c4:	e002      	b.n	80029cc <LoopCopyDataInit>

080029c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ca:	3304      	adds	r3, #4

080029cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d0:	d3f9      	bcc.n	80029c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029d4:	4c0a      	ldr	r4, [pc, #40]	; (8002a00 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d8:	e001      	b.n	80029de <LoopFillZerobss>

080029da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029dc:	3204      	adds	r2, #4

080029de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e0:	d3fb      	bcc.n	80029da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029e2:	f7ff fb4d 	bl	8002080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029e6:	f004 fcad 	bl	8007344 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ea:	f7ff f883 	bl	8001af4 <main>
  bx lr
 80029ee:	4770      	bx	lr
  ldr r0, =_sdata
 80029f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80029f8:	08007400 	.word	0x08007400
  ldr r2, =_sbss
 80029fc:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8002a00:	20000298 	.word	0x20000298

08002a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a04:	e7fe      	b.n	8002a04 <ADC1_2_IRQHandler>
	...

08002a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a0c:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_Init+0x28>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <HAL_Init+0x28>)
 8002a12:	f043 0310 	orr.w	r3, r3, #16
 8002a16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a18:	2003      	movs	r0, #3
 8002a1a:	f000 fb6f 	bl	80030fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a1e:	200f      	movs	r0, #15
 8002a20:	f000 f808 	bl	8002a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a24:	f7ff faaa 	bl	8001f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40022000 	.word	0x40022000

08002a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_InitTick+0x54>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_InitTick+0x58>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fb8b 	bl	800316e <HAL_SYSTICK_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e00e      	b.n	8002a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b0f      	cmp	r3, #15
 8002a66:	d80a      	bhi.n	8002a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	f000 fb4f 	bl	8003112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a74:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <HAL_InitTick+0x5c>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	e000      	b.n	8002a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000048 	.word	0x20000048
 8002a8c:	20000050 	.word	0x20000050
 8002a90:	2000004c 	.word	0x2000004c

08002a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_IncTick+0x1c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_IncTick+0x20>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	4a03      	ldr	r2, [pc, #12]	; (8002ab4 <HAL_IncTick+0x20>)
 8002aa6:	6013      	str	r3, [r2, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	20000050 	.word	0x20000050
 8002ab4:	20000270 	.word	0x20000270

08002ab8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return uwTick;
 8002abc:	4b02      	ldr	r3, [pc, #8]	; (8002ac8 <HAL_GetTick+0x10>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	20000270 	.word	0x20000270

08002acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff fff0 	bl	8002ab8 <HAL_GetTick>
 8002ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae4:	d005      	beq.n	8002af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_Delay+0x44>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4413      	add	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002af2:	bf00      	nop
 8002af4:	f7ff ffe0 	bl	8002ab8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d8f7      	bhi.n	8002af4 <HAL_Delay+0x28>
  {
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000050 	.word	0x20000050

08002b14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0be      	b.n	8002cb4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe fa7a 	bl	800104c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f9ab 	bl	8002eb4 <ADC_ConversionStop_Disable>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 8099 	bne.w	8002ca2 <HAL_ADC_Init+0x18e>
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 8095 	bne.w	8002ca2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b80:	f023 0302 	bic.w	r3, r3, #2
 8002b84:	f043 0202 	orr.w	r2, r3, #2
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b94:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7b1b      	ldrb	r3, [r3, #12]
 8002b9a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b9c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bac:	d003      	beq.n	8002bb6 <HAL_ADC_Init+0xa2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d102      	bne.n	8002bbc <HAL_ADC_Init+0xa8>
 8002bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bba:	e000      	b.n	8002bbe <HAL_ADC_Init+0xaa>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7d1b      	ldrb	r3, [r3, #20]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d119      	bne.n	8002c00 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7b1b      	ldrb	r3, [r3, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	035a      	lsls	r2, r3, #13
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	e00b      	b.n	8002c00 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	f043 0220 	orr.w	r2, r3, #32
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	4b28      	ldr	r3, [pc, #160]	; (8002cbc <HAL_ADC_Init+0x1a8>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6812      	ldr	r2, [r2, #0]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c30:	d003      	beq.n	8002c3a <HAL_ADC_Init+0x126>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d104      	bne.n	8002c44 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	051b      	lsls	r3, r3, #20
 8002c42:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <HAL_ADC_Init+0x1ac>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d10b      	bne.n	8002c80 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c7e:	e018      	b.n	8002cb2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f023 0312 	bic.w	r3, r3, #18
 8002c88:	f043 0210 	orr.w	r2, r3, #16
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ca0:	e007      	b.n	8002cb2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	f043 0210 	orr.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	ffe1f7fd 	.word	0xffe1f7fd
 8002cc0:	ff1f0efe 	.word	0xff1f0efe

08002cc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x20>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0dc      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x1da>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b06      	cmp	r3, #6
 8002cf2:	d81c      	bhi.n	8002d2e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	3b05      	subs	r3, #5
 8002d06:	221f      	movs	r2, #31
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	4019      	ands	r1, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3b05      	subs	r3, #5
 8002d20:	fa00 f203 	lsl.w	r2, r0, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2c:	e03c      	b.n	8002da8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b0c      	cmp	r3, #12
 8002d34:	d81c      	bhi.n	8002d70 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	3b23      	subs	r3, #35	; 0x23
 8002d48:	221f      	movs	r2, #31
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	4019      	ands	r1, r3
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	3b23      	subs	r3, #35	; 0x23
 8002d62:	fa00 f203 	lsl.w	r2, r0, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d6e:	e01b      	b.n	8002da8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	3b41      	subs	r3, #65	; 0x41
 8002d82:	221f      	movs	r2, #31
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	4019      	ands	r1, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	3b41      	subs	r3, #65	; 0x41
 8002d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b09      	cmp	r3, #9
 8002dae:	d91c      	bls.n	8002dea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68d9      	ldr	r1, [r3, #12]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b1e      	subs	r3, #30
 8002dc2:	2207      	movs	r2, #7
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	4019      	ands	r1, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6898      	ldr	r0, [r3, #8]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b1e      	subs	r3, #30
 8002ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	e019      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6919      	ldr	r1, [r3, #16]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4019      	ands	r1, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6898      	ldr	r0, [r3, #8]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	fa00 f203 	lsl.w	r2, r0, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d003      	beq.n	8002e2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e2a:	2b11      	cmp	r3, #17
 8002e2c:	d132      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d125      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d126      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e54:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d11a      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_ADC_ConfigChannel+0x1e8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	0c9a      	lsrs	r2, r3, #18
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e74:	e002      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f9      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x1b2>
 8002e82:	e007      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	40012400 	.word	0x40012400
 8002eac:	20000048 	.word	0x20000048
 8002eb0:	431bde83 	.word	0x431bde83

08002eb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d12e      	bne.n	8002f2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ede:	f7ff fdeb 	bl	8002ab8 <HAL_GetTick>
 8002ee2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ee4:	e01b      	b.n	8002f1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ee6:	f7ff fde7 	bl	8002ab8 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d914      	bls.n	8002f1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d10d      	bne.n	8002f1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f06:	f043 0210 	orr.w	r2, r3, #16
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e007      	b.n	8002f2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d0dc      	beq.n	8002ee6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f6a:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	60d3      	str	r3, [r2, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <__NVIC_GetPriorityGrouping+0x18>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 0307 	and.w	r3, r3, #7
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db0b      	blt.n	8002fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4906      	ldr	r1, [pc, #24]	; (8002fd0 <__NVIC_EnableIRQ+0x34>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100

08002fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	db0a      	blt.n	8002ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	490c      	ldr	r1, [pc, #48]	; (8003020 <__NVIC_SetPriority+0x4c>)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	0112      	lsls	r2, r2, #4
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ffc:	e00a      	b.n	8003014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	4908      	ldr	r1, [pc, #32]	; (8003024 <__NVIC_SetPriority+0x50>)
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	3b04      	subs	r3, #4
 800300c:	0112      	lsls	r2, r2, #4
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	440b      	add	r3, r1
 8003012:	761a      	strb	r2, [r3, #24]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000e100 	.word	0xe000e100
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f1c3 0307 	rsb	r3, r3, #7
 8003042:	2b04      	cmp	r3, #4
 8003044:	bf28      	it	cs
 8003046:	2304      	movcs	r3, #4
 8003048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3304      	adds	r3, #4
 800304e:	2b06      	cmp	r3, #6
 8003050:	d902      	bls.n	8003058 <NVIC_EncodePriority+0x30>
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3b03      	subs	r3, #3
 8003056:	e000      	b.n	800305a <NVIC_EncodePriority+0x32>
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	f04f 32ff 	mov.w	r2, #4294967295
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43da      	mvns	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	401a      	ands	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003070:	f04f 31ff 	mov.w	r1, #4294967295
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa01 f303 	lsl.w	r3, r1, r3
 800307a:	43d9      	mvns	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003080:	4313      	orrs	r3, r2
         );
}
 8003082:	4618      	mov	r0, r3
 8003084:	3724      	adds	r7, #36	; 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003090:	f3bf 8f4f 	dsb	sy
}
 8003094:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <__NVIC_SystemReset+0x24>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800309e:	4904      	ldr	r1, [pc, #16]	; (80030b0 <__NVIC_SystemReset+0x24>)
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <__NVIC_SystemReset+0x28>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80030a6:	f3bf 8f4f 	dsb	sy
}
 80030aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80030ac:	bf00      	nop
 80030ae:	e7fd      	b.n	80030ac <__NVIC_SystemReset+0x20>
 80030b0:	e000ed00 	.word	0xe000ed00
 80030b4:	05fa0004 	.word	0x05fa0004

080030b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c8:	d301      	bcc.n	80030ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00f      	b.n	80030ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ce:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <SysTick_Config+0x40>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030d6:	210f      	movs	r1, #15
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	f7ff ff7a 	bl	8002fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <SysTick_Config+0x40>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <SysTick_Config+0x40>)
 80030e8:	2207      	movs	r2, #7
 80030ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	e000e010 	.word	0xe000e010

080030fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ff17 	bl	8002f38 <__NVIC_SetPriorityGrouping>
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	4603      	mov	r3, r0
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003124:	f7ff ff2c 	bl	8002f80 <__NVIC_GetPriorityGrouping>
 8003128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff ff7a 	bl	8003028 <NVIC_EncodePriority>
 8003134:	4602      	mov	r2, r0
 8003136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800313a:	4611      	mov	r1, r2
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff ff49 	bl	8002fd4 <__NVIC_SetPriority>
}
 8003142:	bf00      	nop
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff1f 	bl	8002f9c <__NVIC_EnableIRQ>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800316a:	f7ff ff8f 	bl	800308c <__NVIC_SystemReset>

0800316e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff ff9e 	bl	80030b8 <SysTick_Config>
 800317c:	4603      	mov	r3, r0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800319a:	2b02      	cmp	r3, #2
 800319c:	d005      	beq.n	80031aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2204      	movs	r2, #4
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	e051      	b.n	800324e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 020e 	bic.w	r2, r2, #14
 80031b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0201 	bic.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a22      	ldr	r2, [pc, #136]	; (8003258 <HAL_DMA_Abort_IT+0xd0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d029      	beq.n	8003228 <HAL_DMA_Abort_IT+0xa0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a20      	ldr	r2, [pc, #128]	; (800325c <HAL_DMA_Abort_IT+0xd4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d022      	beq.n	8003224 <HAL_DMA_Abort_IT+0x9c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_DMA_Abort_IT+0xd8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d01a      	beq.n	800321e <HAL_DMA_Abort_IT+0x96>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <HAL_DMA_Abort_IT+0xdc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d012      	beq.n	8003218 <HAL_DMA_Abort_IT+0x90>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <HAL_DMA_Abort_IT+0xe0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00a      	beq.n	8003212 <HAL_DMA_Abort_IT+0x8a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1a      	ldr	r2, [pc, #104]	; (800326c <HAL_DMA_Abort_IT+0xe4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d102      	bne.n	800320c <HAL_DMA_Abort_IT+0x84>
 8003206:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800320a:	e00e      	b.n	800322a <HAL_DMA_Abort_IT+0xa2>
 800320c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003210:	e00b      	b.n	800322a <HAL_DMA_Abort_IT+0xa2>
 8003212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003216:	e008      	b.n	800322a <HAL_DMA_Abort_IT+0xa2>
 8003218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800321c:	e005      	b.n	800322a <HAL_DMA_Abort_IT+0xa2>
 800321e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003222:	e002      	b.n	800322a <HAL_DMA_Abort_IT+0xa2>
 8003224:	2310      	movs	r3, #16
 8003226:	e000      	b.n	800322a <HAL_DMA_Abort_IT+0xa2>
 8003228:	2301      	movs	r3, #1
 800322a:	4a11      	ldr	r2, [pc, #68]	; (8003270 <HAL_DMA_Abort_IT+0xe8>)
 800322c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
    } 
  }
  return status;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40020008 	.word	0x40020008
 800325c:	4002001c 	.word	0x4002001c
 8003260:	40020030 	.word	0x40020030
 8003264:	40020044 	.word	0x40020044
 8003268:	40020058 	.word	0x40020058
 800326c:	4002006c 	.word	0x4002006c
 8003270:	40020000 	.word	0x40020000

08003274 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003282:	4618      	mov	r0, r3
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80032a6:	4b2f      	ldr	r3, [pc, #188]	; (8003364 <HAL_FLASH_Program+0xd8>)
 80032a8:	7e1b      	ldrb	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_FLASH_Program+0x26>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e054      	b.n	800335c <HAL_FLASH_Program+0xd0>
 80032b2:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_FLASH_Program+0xd8>)
 80032b4:	2201      	movs	r2, #1
 80032b6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80032b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80032bc:	f000 f8b2 	bl	8003424 <FLASH_WaitForLastOperation>
 80032c0:	4603      	mov	r3, r0
 80032c2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d144      	bne.n	8003354 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d102      	bne.n	80032d6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80032d0:	2301      	movs	r3, #1
 80032d2:	757b      	strb	r3, [r7, #21]
 80032d4:	e007      	b.n	80032e6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d102      	bne.n	80032e2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80032dc:	2302      	movs	r3, #2
 80032de:	757b      	strb	r3, [r7, #21]
 80032e0:	e001      	b.n	80032e6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80032e2:	2304      	movs	r3, #4
 80032e4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80032e6:	2300      	movs	r3, #0
 80032e8:	75bb      	strb	r3, [r7, #22]
 80032ea:	e02d      	b.n	8003348 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80032ec:	7dbb      	ldrb	r3, [r7, #22]
 80032ee:	005a      	lsls	r2, r3, #1
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	eb02 0c03 	add.w	ip, r2, r3
 80032f6:	7dbb      	ldrb	r3, [r7, #22]
 80032f8:	0119      	lsls	r1, r3, #4
 80032fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032fe:	f1c1 0620 	rsb	r6, r1, #32
 8003302:	f1a1 0020 	sub.w	r0, r1, #32
 8003306:	fa22 f401 	lsr.w	r4, r2, r1
 800330a:	fa03 f606 	lsl.w	r6, r3, r6
 800330e:	4334      	orrs	r4, r6
 8003310:	fa23 f000 	lsr.w	r0, r3, r0
 8003314:	4304      	orrs	r4, r0
 8003316:	fa23 f501 	lsr.w	r5, r3, r1
 800331a:	b2a3      	uxth	r3, r4
 800331c:	4619      	mov	r1, r3
 800331e:	4660      	mov	r0, ip
 8003320:	f000 f864 	bl	80033ec <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003324:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003328:	f000 f87c 	bl	8003424 <FLASH_WaitForLastOperation>
 800332c:	4603      	mov	r3, r0
 800332e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_FLASH_Program+0xdc>)
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	4a0c      	ldr	r2, [pc, #48]	; (8003368 <HAL_FLASH_Program+0xdc>)
 8003336:	f023 0301 	bic.w	r3, r3, #1
 800333a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800333c:	7dfb      	ldrb	r3, [r7, #23]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d107      	bne.n	8003352 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003342:	7dbb      	ldrb	r3, [r7, #22]
 8003344:	3301      	adds	r3, #1
 8003346:	75bb      	strb	r3, [r7, #22]
 8003348:	7dba      	ldrb	r2, [r7, #22]
 800334a:	7d7b      	ldrb	r3, [r7, #21]
 800334c:	429a      	cmp	r2, r3
 800334e:	d3cd      	bcc.n	80032ec <HAL_FLASH_Program+0x60>
 8003350:	e000      	b.n	8003354 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003352:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <HAL_FLASH_Program+0xd8>)
 8003356:	2200      	movs	r2, #0
 8003358:	761a      	strb	r2, [r3, #24]

  return status;
 800335a:	7dfb      	ldrb	r3, [r7, #23]
}
 800335c:	4618      	mov	r0, r3
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003364:	20000278 	.word	0x20000278
 8003368:	40022000 	.word	0x40022000

0800336c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003376:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <HAL_FLASH_Unlock+0x40>)
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00d      	beq.n	800339e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_FLASH_Unlock+0x40>)
 8003384:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <HAL_FLASH_Unlock+0x44>)
 8003386:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_FLASH_Unlock+0x40>)
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_FLASH_Unlock+0x48>)
 800338c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_FLASH_Unlock+0x40>)
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800339e:	79fb      	ldrb	r3, [r7, #7]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40022000 	.word	0x40022000
 80033b0:	45670123 	.word	0x45670123
 80033b4:	cdef89ab 	.word	0xcdef89ab

080033b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_FLASH_Lock+0x1c>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <HAL_FLASH_Lock+0x1c>)
 80033c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40022000 	.word	0x40022000

080033d8 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80033dc:	4b02      	ldr	r3, [pc, #8]	; (80033e8 <HAL_FLASH_GetError+0x10>)
 80033de:	69db      	ldr	r3, [r3, #28]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	20000278 	.word	0x20000278

080033ec <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <FLASH_Program_HalfWord+0x30>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <FLASH_Program_HalfWord+0x34>)
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	4a07      	ldr	r2, [pc, #28]	; (8003420 <FLASH_Program_HalfWord+0x34>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	887a      	ldrh	r2, [r7, #2]
 800340e:	801a      	strh	r2, [r3, #0]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	bc80      	pop	{r7}
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000278 	.word	0x20000278
 8003420:	40022000 	.word	0x40022000

08003424 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff fb44 	bl	8002ab8 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003432:	e010      	b.n	8003456 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343a:	d00c      	beq.n	8003456 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <FLASH_WaitForLastOperation+0x2e>
 8003442:	f7ff fb39 	bl	8002ab8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d201      	bcs.n	8003456 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e025      	b.n	80034a2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <FLASH_WaitForLastOperation+0x88>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1e8      	bne.n	8003434 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003462:	4b12      	ldr	r3, [pc, #72]	; (80034ac <FLASH_WaitForLastOperation+0x88>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <FLASH_WaitForLastOperation+0x88>)
 8003470:	2220      	movs	r2, #32
 8003472:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003474:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <FLASH_WaitForLastOperation+0x88>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <FLASH_WaitForLastOperation+0x88>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003488:	2b00      	cmp	r3, #0
 800348a:	d105      	bne.n	8003498 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800348c:	4b07      	ldr	r3, [pc, #28]	; (80034ac <FLASH_WaitForLastOperation+0x88>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003498:	f000 f80a 	bl	80034b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40022000 	.word	0x40022000

080034b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80034ba:	4b23      	ldr	r3, [pc, #140]	; (8003548 <FLASH_SetErrorCode+0x98>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80034c6:	4b21      	ldr	r3, [pc, #132]	; (800354c <FLASH_SetErrorCode+0x9c>)
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f043 0302 	orr.w	r3, r3, #2
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <FLASH_SetErrorCode+0x9c>)
 80034d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f043 0310 	orr.w	r3, r3, #16
 80034d8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <FLASH_SetErrorCode+0x98>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d009      	beq.n	80034fa <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80034e6:	4b19      	ldr	r3, [pc, #100]	; (800354c <FLASH_SetErrorCode+0x9c>)
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	4a17      	ldr	r2, [pc, #92]	; (800354c <FLASH_SetErrorCode+0x9c>)
 80034f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <FLASH_SetErrorCode+0x98>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <FLASH_SetErrorCode+0x9c>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f043 0304 	orr.w	r3, r3, #4
 800350e:	4a0f      	ldr	r2, [pc, #60]	; (800354c <FLASH_SetErrorCode+0x9c>)
 8003510:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003512:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <FLASH_SetErrorCode+0x98>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	4a0c      	ldr	r2, [pc, #48]	; (8003548 <FLASH_SetErrorCode+0x98>)
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f240 1201 	movw	r2, #257	; 0x101
 8003524:	4293      	cmp	r3, r2
 8003526:	d106      	bne.n	8003536 <FLASH_SetErrorCode+0x86>
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <FLASH_SetErrorCode+0x98>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4a06      	ldr	r2, [pc, #24]	; (8003548 <FLASH_SetErrorCode+0x98>)
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	61d3      	str	r3, [r2, #28]
}  
 8003534:	e002      	b.n	800353c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003536:	4a04      	ldr	r2, [pc, #16]	; (8003548 <FLASH_SetErrorCode+0x98>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	60d3      	str	r3, [r2, #12]
}  
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	40022000 	.word	0x40022000
 800354c:	20000278 	.word	0x20000278

08003550 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003562:	4b2f      	ldr	r3, [pc, #188]	; (8003620 <HAL_FLASHEx_Erase+0xd0>)
 8003564:	7e1b      	ldrb	r3, [r3, #24]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_FLASHEx_Erase+0x1e>
 800356a:	2302      	movs	r3, #2
 800356c:	e053      	b.n	8003616 <HAL_FLASHEx_Erase+0xc6>
 800356e:	4b2c      	ldr	r3, [pc, #176]	; (8003620 <HAL_FLASHEx_Erase+0xd0>)
 8003570:	2201      	movs	r2, #1
 8003572:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d116      	bne.n	80035aa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800357c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003580:	f7ff ff50 	bl	8003424 <FLASH_WaitForLastOperation>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d141      	bne.n	800360e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800358a:	2001      	movs	r0, #1
 800358c:	f000 f84c 	bl	8003628 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003590:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003594:	f7ff ff46 	bl	8003424 <FLASH_WaitForLastOperation>
 8003598:	4603      	mov	r3, r0
 800359a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_FLASHEx_Erase+0xd4>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	4a20      	ldr	r2, [pc, #128]	; (8003624 <HAL_FLASHEx_Erase+0xd4>)
 80035a2:	f023 0304 	bic.w	r3, r3, #4
 80035a6:	6113      	str	r3, [r2, #16]
 80035a8:	e031      	b.n	800360e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80035aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035ae:	f7ff ff39 	bl	8003424 <FLASH_WaitForLastOperation>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d12a      	bne.n	800360e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	f04f 32ff 	mov.w	r2, #4294967295
 80035be:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	e019      	b.n	80035fc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80035c8:	68b8      	ldr	r0, [r7, #8]
 80035ca:	f000 f849 	bl	8003660 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035ce:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035d2:	f7ff ff27 	bl	8003424 <FLASH_WaitForLastOperation>
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_FLASHEx_Erase+0xd4>)
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	4a11      	ldr	r2, [pc, #68]	; (8003624 <HAL_FLASHEx_Erase+0xd4>)
 80035e0:	f023 0302 	bic.w	r3, r3, #2
 80035e4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	601a      	str	r2, [r3, #0]
            break;
 80035f2:	e00c      	b.n	800360e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035fa:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	029a      	lsls	r2, r3, #10
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d3dc      	bcc.n	80035c8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <HAL_FLASHEx_Erase+0xd0>)
 8003610:	2200      	movs	r2, #0
 8003612:	761a      	strb	r2, [r3, #24]

  return status;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000278 	.word	0x20000278
 8003624:	40022000 	.word	0x40022000

08003628 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <FLASH_MassErase+0x30>)
 8003632:	2200      	movs	r2, #0
 8003634:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <FLASH_MassErase+0x34>)
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <FLASH_MassErase+0x34>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <FLASH_MassErase+0x34>)
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	4a05      	ldr	r2, [pc, #20]	; (800365c <FLASH_MassErase+0x34>)
 8003648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800364c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	20000278 	.word	0x20000278
 800365c:	40022000 	.word	0x40022000

08003660 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <FLASH_PageErase+0x38>)
 800366a:	2200      	movs	r2, #0
 800366c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <FLASH_PageErase+0x3c>)
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	4a0a      	ldr	r2, [pc, #40]	; (800369c <FLASH_PageErase+0x3c>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800367a:	4a08      	ldr	r2, [pc, #32]	; (800369c <FLASH_PageErase+0x3c>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003680:	4b06      	ldr	r3, [pc, #24]	; (800369c <FLASH_PageErase+0x3c>)
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	4a05      	ldr	r2, [pc, #20]	; (800369c <FLASH_PageErase+0x3c>)
 8003686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800368a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000278 	.word	0x20000278
 800369c:	40022000 	.word	0x40022000

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b08b      	sub	sp, #44	; 0x2c
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036aa:	2300      	movs	r3, #0
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b2:	e169      	b.n	8003988 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036b4:	2201      	movs	r2, #1
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	f040 8158 	bne.w	8003982 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4a9a      	ldr	r2, [pc, #616]	; (8003940 <HAL_GPIO_Init+0x2a0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d05e      	beq.n	800379a <HAL_GPIO_Init+0xfa>
 80036dc:	4a98      	ldr	r2, [pc, #608]	; (8003940 <HAL_GPIO_Init+0x2a0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d875      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 80036e2:	4a98      	ldr	r2, [pc, #608]	; (8003944 <HAL_GPIO_Init+0x2a4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d058      	beq.n	800379a <HAL_GPIO_Init+0xfa>
 80036e8:	4a96      	ldr	r2, [pc, #600]	; (8003944 <HAL_GPIO_Init+0x2a4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d86f      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 80036ee:	4a96      	ldr	r2, [pc, #600]	; (8003948 <HAL_GPIO_Init+0x2a8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d052      	beq.n	800379a <HAL_GPIO_Init+0xfa>
 80036f4:	4a94      	ldr	r2, [pc, #592]	; (8003948 <HAL_GPIO_Init+0x2a8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d869      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 80036fa:	4a94      	ldr	r2, [pc, #592]	; (800394c <HAL_GPIO_Init+0x2ac>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d04c      	beq.n	800379a <HAL_GPIO_Init+0xfa>
 8003700:	4a92      	ldr	r2, [pc, #584]	; (800394c <HAL_GPIO_Init+0x2ac>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d863      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 8003706:	4a92      	ldr	r2, [pc, #584]	; (8003950 <HAL_GPIO_Init+0x2b0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d046      	beq.n	800379a <HAL_GPIO_Init+0xfa>
 800370c:	4a90      	ldr	r2, [pc, #576]	; (8003950 <HAL_GPIO_Init+0x2b0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d85d      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 8003712:	2b12      	cmp	r3, #18
 8003714:	d82a      	bhi.n	800376c <HAL_GPIO_Init+0xcc>
 8003716:	2b12      	cmp	r3, #18
 8003718:	d859      	bhi.n	80037ce <HAL_GPIO_Init+0x12e>
 800371a:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <HAL_GPIO_Init+0x80>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	0800379b 	.word	0x0800379b
 8003724:	08003775 	.word	0x08003775
 8003728:	08003787 	.word	0x08003787
 800372c:	080037c9 	.word	0x080037c9
 8003730:	080037cf 	.word	0x080037cf
 8003734:	080037cf 	.word	0x080037cf
 8003738:	080037cf 	.word	0x080037cf
 800373c:	080037cf 	.word	0x080037cf
 8003740:	080037cf 	.word	0x080037cf
 8003744:	080037cf 	.word	0x080037cf
 8003748:	080037cf 	.word	0x080037cf
 800374c:	080037cf 	.word	0x080037cf
 8003750:	080037cf 	.word	0x080037cf
 8003754:	080037cf 	.word	0x080037cf
 8003758:	080037cf 	.word	0x080037cf
 800375c:	080037cf 	.word	0x080037cf
 8003760:	080037cf 	.word	0x080037cf
 8003764:	0800377d 	.word	0x0800377d
 8003768:	08003791 	.word	0x08003791
 800376c:	4a79      	ldr	r2, [pc, #484]	; (8003954 <HAL_GPIO_Init+0x2b4>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003772:	e02c      	b.n	80037ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	623b      	str	r3, [r7, #32]
          break;
 800377a:	e029      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	3304      	adds	r3, #4
 8003782:	623b      	str	r3, [r7, #32]
          break;
 8003784:	e024      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	3308      	adds	r3, #8
 800378c:	623b      	str	r3, [r7, #32]
          break;
 800378e:	e01f      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	330c      	adds	r3, #12
 8003796:	623b      	str	r3, [r7, #32]
          break;
 8003798:	e01a      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d102      	bne.n	80037a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037a2:	2304      	movs	r3, #4
 80037a4:	623b      	str	r3, [r7, #32]
          break;
 80037a6:	e013      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037b0:	2308      	movs	r3, #8
 80037b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	611a      	str	r2, [r3, #16]
          break;
 80037ba:	e009      	b.n	80037d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037bc:	2308      	movs	r3, #8
 80037be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	615a      	str	r2, [r3, #20]
          break;
 80037c6:	e003      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037c8:	2300      	movs	r3, #0
 80037ca:	623b      	str	r3, [r7, #32]
          break;
 80037cc:	e000      	b.n	80037d0 <HAL_GPIO_Init+0x130>
          break;
 80037ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	2bff      	cmp	r3, #255	; 0xff
 80037d4:	d801      	bhi.n	80037da <HAL_GPIO_Init+0x13a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	e001      	b.n	80037de <HAL_GPIO_Init+0x13e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2bff      	cmp	r3, #255	; 0xff
 80037e4:	d802      	bhi.n	80037ec <HAL_GPIO_Init+0x14c>
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	e002      	b.n	80037f2 <HAL_GPIO_Init+0x152>
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	3b08      	subs	r3, #8
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	210f      	movs	r1, #15
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	401a      	ands	r2, r3
 8003804:	6a39      	ldr	r1, [r7, #32]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	431a      	orrs	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80b1 	beq.w	8003982 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003820:	4b4d      	ldr	r3, [pc, #308]	; (8003958 <HAL_GPIO_Init+0x2b8>)
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	4a4c      	ldr	r2, [pc, #304]	; (8003958 <HAL_GPIO_Init+0x2b8>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6193      	str	r3, [r2, #24]
 800382c:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <HAL_GPIO_Init+0x2b8>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003838:	4a48      	ldr	r2, [pc, #288]	; (800395c <HAL_GPIO_Init+0x2bc>)
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	3302      	adds	r3, #2
 8003840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003844:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	220f      	movs	r2, #15
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4013      	ands	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a40      	ldr	r2, [pc, #256]	; (8003960 <HAL_GPIO_Init+0x2c0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d013      	beq.n	800388c <HAL_GPIO_Init+0x1ec>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3f      	ldr	r2, [pc, #252]	; (8003964 <HAL_GPIO_Init+0x2c4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00d      	beq.n	8003888 <HAL_GPIO_Init+0x1e8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3e      	ldr	r2, [pc, #248]	; (8003968 <HAL_GPIO_Init+0x2c8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <HAL_GPIO_Init+0x1e4>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a3d      	ldr	r2, [pc, #244]	; (800396c <HAL_GPIO_Init+0x2cc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <HAL_GPIO_Init+0x1e0>
 800387c:	2303      	movs	r3, #3
 800387e:	e006      	b.n	800388e <HAL_GPIO_Init+0x1ee>
 8003880:	2304      	movs	r3, #4
 8003882:	e004      	b.n	800388e <HAL_GPIO_Init+0x1ee>
 8003884:	2302      	movs	r3, #2
 8003886:	e002      	b.n	800388e <HAL_GPIO_Init+0x1ee>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_GPIO_Init+0x1ee>
 800388c:	2300      	movs	r3, #0
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	f002 0203 	and.w	r2, r2, #3
 8003894:	0092      	lsls	r2, r2, #2
 8003896:	4093      	lsls	r3, r2
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800389e:	492f      	ldr	r1, [pc, #188]	; (800395c <HAL_GPIO_Init+0x2bc>)
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	089b      	lsrs	r3, r3, #2
 80038a4:	3302      	adds	r3, #2
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d006      	beq.n	80038c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038b8:	4b2d      	ldr	r3, [pc, #180]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	492c      	ldr	r1, [pc, #176]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	600b      	str	r3, [r1, #0]
 80038c4:	e006      	b.n	80038d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038c6:	4b2a      	ldr	r3, [pc, #168]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	4928      	ldr	r1, [pc, #160]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d006      	beq.n	80038ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038e0:	4b23      	ldr	r3, [pc, #140]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	4922      	ldr	r1, [pc, #136]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
 80038ec:	e006      	b.n	80038fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	43db      	mvns	r3, r3
 80038f6:	491e      	ldr	r1, [pc, #120]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4918      	ldr	r1, [pc, #96]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	608b      	str	r3, [r1, #8]
 8003914:	e006      	b.n	8003924 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	43db      	mvns	r3, r3
 800391e:	4914      	ldr	r1, [pc, #80]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 8003920:	4013      	ands	r3, r2
 8003922:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d021      	beq.n	8003974 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	490e      	ldr	r1, [pc, #56]	; (8003970 <HAL_GPIO_Init+0x2d0>)
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	60cb      	str	r3, [r1, #12]
 800393c:	e021      	b.n	8003982 <HAL_GPIO_Init+0x2e2>
 800393e:	bf00      	nop
 8003940:	10320000 	.word	0x10320000
 8003944:	10310000 	.word	0x10310000
 8003948:	10220000 	.word	0x10220000
 800394c:	10210000 	.word	0x10210000
 8003950:	10120000 	.word	0x10120000
 8003954:	10110000 	.word	0x10110000
 8003958:	40021000 	.word	0x40021000
 800395c:	40010000 	.word	0x40010000
 8003960:	40010800 	.word	0x40010800
 8003964:	40010c00 	.word	0x40010c00
 8003968:	40011000 	.word	0x40011000
 800396c:	40011400 	.word	0x40011400
 8003970:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_GPIO_Init+0x304>)
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	43db      	mvns	r3, r3
 800397c:	4909      	ldr	r1, [pc, #36]	; (80039a4 <HAL_GPIO_Init+0x304>)
 800397e:	4013      	ands	r3, r2
 8003980:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	3301      	adds	r3, #1
 8003986:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	fa22 f303 	lsr.w	r3, r2, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	f47f ae8e 	bne.w	80036b4 <HAL_GPIO_Init+0x14>
  }
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	372c      	adds	r7, #44	; 0x2c
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	40010400 	.word	0x40010400

080039a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	887b      	ldrh	r3, [r7, #2]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	e001      	b.n	80039ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	807b      	strh	r3, [r7, #2]
 80039e2:	4613      	mov	r3, r2
 80039e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039e6:	787b      	ldrb	r3, [r7, #1]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ec:	887a      	ldrh	r2, [r7, #2]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80039f2:	e003      	b.n	80039fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80039f4:	887b      	ldrh	r3, [r7, #2]
 80039f6:	041a      	lsls	r2, r3, #16
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	611a      	str	r2, [r3, #16]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e12b      	b.n	8003c72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fd febe 	bl	80017b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	; 0x24
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a6c:	f002 faa2 	bl	8005fb4 <HAL_RCC_GetPCLK1Freq>
 8003a70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4a81      	ldr	r2, [pc, #516]	; (8003c7c <HAL_I2C_Init+0x274>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d807      	bhi.n	8003a8c <HAL_I2C_Init+0x84>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a80      	ldr	r2, [pc, #512]	; (8003c80 <HAL_I2C_Init+0x278>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	bf94      	ite	ls
 8003a84:	2301      	movls	r3, #1
 8003a86:	2300      	movhi	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	e006      	b.n	8003a9a <HAL_I2C_Init+0x92>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4a7d      	ldr	r2, [pc, #500]	; (8003c84 <HAL_I2C_Init+0x27c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	bf94      	ite	ls
 8003a94:	2301      	movls	r3, #1
 8003a96:	2300      	movhi	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e0e7      	b.n	8003c72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a78      	ldr	r2, [pc, #480]	; (8003c88 <HAL_I2C_Init+0x280>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	0c9b      	lsrs	r3, r3, #18
 8003aac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4a6a      	ldr	r2, [pc, #424]	; (8003c7c <HAL_I2C_Init+0x274>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d802      	bhi.n	8003adc <HAL_I2C_Init+0xd4>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	e009      	b.n	8003af0 <HAL_I2C_Init+0xe8>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	4a69      	ldr	r2, [pc, #420]	; (8003c8c <HAL_I2C_Init+0x284>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	099b      	lsrs	r3, r3, #6
 8003aee:	3301      	adds	r3, #1
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	430b      	orrs	r3, r1
 8003af6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	495c      	ldr	r1, [pc, #368]	; (8003c7c <HAL_I2C_Init+0x274>)
 8003b0c:	428b      	cmp	r3, r1
 8003b0e:	d819      	bhi.n	8003b44 <HAL_I2C_Init+0x13c>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e59      	subs	r1, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b1e:	1c59      	adds	r1, r3, #1
 8003b20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b24:	400b      	ands	r3, r1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_I2C_Init+0x138>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1e59      	subs	r1, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b38:	3301      	adds	r3, #1
 8003b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3e:	e051      	b.n	8003be4 <HAL_I2C_Init+0x1dc>
 8003b40:	2304      	movs	r3, #4
 8003b42:	e04f      	b.n	8003be4 <HAL_I2C_Init+0x1dc>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d111      	bne.n	8003b70 <HAL_I2C_Init+0x168>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1e58      	subs	r0, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	440b      	add	r3, r1
 8003b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bf0c      	ite	eq
 8003b68:	2301      	moveq	r3, #1
 8003b6a:	2300      	movne	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	e012      	b.n	8003b96 <HAL_I2C_Init+0x18e>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	1e58      	subs	r0, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	0099      	lsls	r1, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b86:	3301      	adds	r3, #1
 8003b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf0c      	ite	eq
 8003b90:	2301      	moveq	r3, #1
 8003b92:	2300      	movne	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_I2C_Init+0x196>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e022      	b.n	8003be4 <HAL_I2C_Init+0x1dc>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_I2C_Init+0x1bc>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1e58      	subs	r0, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6859      	ldr	r1, [r3, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	440b      	add	r3, r1
 8003bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bb8:	3301      	adds	r3, #1
 8003bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc2:	e00f      	b.n	8003be4 <HAL_I2C_Init+0x1dc>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1e58      	subs	r0, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	0099      	lsls	r1, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	6809      	ldr	r1, [r1, #0]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6911      	ldr	r1, [r2, #16]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68d2      	ldr	r2, [r2, #12]
 8003c1e:	4311      	orrs	r1, r2
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6812      	ldr	r2, [r2, #0]
 8003c24:	430b      	orrs	r3, r1
 8003c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	000186a0 	.word	0x000186a0
 8003c80:	001e847f 	.word	0x001e847f
 8003c84:	003d08ff 	.word	0x003d08ff
 8003c88:	431bde83 	.word	0x431bde83
 8003c8c:	10624dd3 	.word	0x10624dd3

08003c90 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cac:	2b28      	cmp	r3, #40	; 0x28
 8003cae:	d15b      	bne.n	8003d68 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e054      	b.n	8003d6a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e04d      	b.n	8003d6a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d007      	beq.n	8003cf4 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2229      	movs	r2, #41	; 0x29
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	88fa      	ldrh	r2, [r7, #6]
 8003d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003d62:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d90:	2b28      	cmp	r3, #40	; 0x28
 8003d92:	d15b      	bne.n	8003e4c <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e054      	b.n	8003e4e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e04d      	b.n	8003e4e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d007      	beq.n	8003dd8 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	222a      	movs	r2, #42	; 0x2a
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	88fa      	ldrh	r2, [r7, #6]
 8003e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003e46:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr

08003e58 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d124      	bne.n	8003eb6 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2228      	movs	r2, #40	; 0x28
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d007      	beq.n	8003e92 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ea0:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003eb0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b088      	sub	sp, #32
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ee2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eea:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	2b10      	cmp	r3, #16
 8003ef0:	d003      	beq.n	8003efa <HAL_I2C_EV_IRQHandler+0x38>
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	f040 80c1 	bne.w	800407c <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10d      	bne.n	8003f30 <HAL_I2C_EV_IRQHandler+0x6e>
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f1a:	d003      	beq.n	8003f24 <HAL_I2C_EV_IRQHandler+0x62>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f22:	d101      	bne.n	8003f28 <HAL_I2C_EV_IRQHandler+0x66>
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <HAL_I2C_EV_IRQHandler+0x68>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	f000 8132 	beq.w	8004194 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <HAL_I2C_EV_IRQHandler+0x92>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	0a5b      	lsrs	r3, r3, #9
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d006      	beq.n	8003f54 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f001 fc46 	bl	80057d8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fd48 	bl	80049e2 <I2C_Master_SB>
 8003f52:	e092      	b.n	800407a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	08db      	lsrs	r3, r3, #3
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <HAL_I2C_EV_IRQHandler+0xb2>
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	0a5b      	lsrs	r3, r3, #9
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fdbd 	bl	8004aec <I2C_Master_ADD10>
 8003f72:	e082      	b.n	800407a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	085b      	lsrs	r3, r3, #1
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <HAL_I2C_EV_IRQHandler+0xd2>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	0a5b      	lsrs	r3, r3, #9
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fdd6 	bl	8004b3e <I2C_Master_ADDR>
 8003f92:	e072      	b.n	800407a <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d03b      	beq.n	8004018 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fae:	f000 80f3 	beq.w	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	09db      	lsrs	r3, r3, #7
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00f      	beq.n	8003fde <HAL_I2C_EV_IRQHandler+0x11c>
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	0a9b      	lsrs	r3, r3, #10
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_I2C_EV_IRQHandler+0x11c>
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	089b      	lsrs	r3, r3, #2
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f9c2 	bl	8004360 <I2C_MasterTransmit_TXE>
 8003fdc:	e04d      	b.n	800407a <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	089b      	lsrs	r3, r3, #2
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 80d6 	beq.w	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	0a5b      	lsrs	r3, r3, #9
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80cf 	beq.w	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003ffa:	7bbb      	ldrb	r3, [r7, #14]
 8003ffc:	2b21      	cmp	r3, #33	; 0x21
 8003ffe:	d103      	bne.n	8004008 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fa49 	bl	8004498 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004006:	e0c7      	b.n	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	f040 80c4 	bne.w	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fab7 	bl	8004584 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004016:	e0bf      	b.n	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004026:	f000 80b7 	beq.w	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00f      	beq.n	8004056 <HAL_I2C_EV_IRQHandler+0x194>
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	0a9b      	lsrs	r3, r3, #10
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HAL_I2C_EV_IRQHandler+0x194>
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d103      	bne.n	8004056 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fb2c 	bl	80046ac <I2C_MasterReceive_RXNE>
 8004054:	e011      	b.n	800407a <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	089b      	lsrs	r3, r3, #2
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 809a 	beq.w	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	0a5b      	lsrs	r3, r3, #9
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8093 	beq.w	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 fbcb 	bl	800480e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004078:	e08e      	b.n	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
 800407a:	e08d      	b.n	8004198 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d004      	beq.n	800408e <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	e007      	b.n	800409e <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d012      	beq.n	80040d0 <HAL_I2C_EV_IRQHandler+0x20e>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	0a5b      	lsrs	r3, r3, #9
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80040c6:	69b9      	ldr	r1, [r7, #24]
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 ff8f 	bl	8004fec <I2C_Slave_ADDR>
 80040ce:	e066      	b.n	800419e <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <HAL_I2C_EV_IRQHandler+0x22e>
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	0a5b      	lsrs	r3, r3, #9
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 ffc9 	bl	8005080 <I2C_Slave_STOPF>
 80040ee:	e056      	b.n	800419e <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040f0:	7bbb      	ldrb	r3, [r7, #14]
 80040f2:	2b21      	cmp	r3, #33	; 0x21
 80040f4:	d002      	beq.n	80040fc <HAL_I2C_EV_IRQHandler+0x23a>
 80040f6:	7bbb      	ldrb	r3, [r7, #14]
 80040f8:	2b29      	cmp	r3, #41	; 0x29
 80040fa:	d125      	bne.n	8004148 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	09db      	lsrs	r3, r3, #7
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00f      	beq.n	8004128 <HAL_I2C_EV_IRQHandler+0x266>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	0a9b      	lsrs	r3, r3, #10
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d009      	beq.n	8004128 <HAL_I2C_EV_IRQHandler+0x266>
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	089b      	lsrs	r3, r3, #2
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d103      	bne.n	8004128 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fea7 	bl	8004e74 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004126:	e039      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	089b      	lsrs	r3, r3, #2
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	d033      	beq.n	800419c <HAL_I2C_EV_IRQHandler+0x2da>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	0a5b      	lsrs	r3, r3, #9
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02d      	beq.n	800419c <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fed4 	bl	8004eee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004146:	e029      	b.n	800419c <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	099b      	lsrs	r3, r3, #6
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00f      	beq.n	8004174 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	0a9b      	lsrs	r3, r3, #10
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	089b      	lsrs	r3, r3, #2
 8004164:	f003 0301 	and.w	r3, r3, #1
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fede 	bl	8004f2e <I2C_SlaveReceive_RXNE>
 8004172:	e014      	b.n	800419e <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00e      	beq.n	800419e <HAL_I2C_EV_IRQHandler+0x2dc>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	0a5b      	lsrs	r3, r3, #9
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d008      	beq.n	800419e <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 ff0c 	bl	8004faa <I2C_SlaveReceive_BTF>
 8004192:	e004      	b.n	800419e <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004194:	bf00      	nop
 8004196:	e002      	b.n	800419e <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004198:	bf00      	nop
 800419a:	e000      	b.n	800419e <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800419c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80041bc:	2300      	movs	r3, #0
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d016      	beq.n	8004202 <HAL_I2C_ER_IRQHandler+0x5e>
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041f0:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004200:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	0a5b      	lsrs	r3, r3, #9
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00e      	beq.n	800422c <HAL_I2C_ER_IRQHandler+0x88>
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	0a1b      	lsrs	r3, r3, #8
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d008      	beq.n	800422c <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	f043 0302 	orr.w	r3, r3, #2
 8004220:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800422a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	0a9b      	lsrs	r3, r3, #10
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d03f      	beq.n	80042b8 <HAL_I2C_ER_IRQHandler+0x114>
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d039      	beq.n	80042b8 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004244:	7efb      	ldrb	r3, [r7, #27]
 8004246:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800425e:	7ebb      	ldrb	r3, [r7, #26]
 8004260:	2b20      	cmp	r3, #32
 8004262:	d112      	bne.n	800428a <HAL_I2C_ER_IRQHandler+0xe6>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10f      	bne.n	800428a <HAL_I2C_ER_IRQHandler+0xe6>
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b21      	cmp	r3, #33	; 0x21
 800426e:	d008      	beq.n	8004282 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	2b29      	cmp	r3, #41	; 0x29
 8004274:	d005      	beq.n	8004282 <HAL_I2C_ER_IRQHandler+0xde>
 8004276:	7cfb      	ldrb	r3, [r7, #19]
 8004278:	2b28      	cmp	r3, #40	; 0x28
 800427a:	d106      	bne.n	800428a <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b21      	cmp	r3, #33	; 0x21
 8004280:	d103      	bne.n	800428a <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f001 f82c 	bl	80052e0 <I2C_Slave_AF>
 8004288:	e016      	b.n	80042b8 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004292:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800429c:	7efb      	ldrb	r3, [r7, #27]
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d002      	beq.n	80042a8 <HAL_I2C_ER_IRQHandler+0x104>
 80042a2:	7efb      	ldrb	r3, [r7, #27]
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d107      	bne.n	80042b8 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	0adb      	lsrs	r3, r3, #11
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00e      	beq.n	80042e2 <HAL_I2C_ER_IRQHandler+0x13e>
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	f043 0308 	orr.w	r3, r3, #8
 80042d6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80042e0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f001 f863 	bl	80053c0 <I2C_ITError>
  }
}
 80042fa:	bf00      	nop
 80042fc:	3728      	adds	r7, #40	; 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr

08004326 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004376:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	2b00      	cmp	r3, #0
 8004384:	d150      	bne.n	8004428 <I2C_MasterTransmit_TXE+0xc8>
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	2b21      	cmp	r3, #33	; 0x21
 800438a:	d14d      	bne.n	8004428 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b08      	cmp	r3, #8
 8004390:	d01d      	beq.n	80043ce <I2C_MasterTransmit_TXE+0x6e>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b20      	cmp	r3, #32
 8004396:	d01a      	beq.n	80043ce <I2C_MasterTransmit_TXE+0x6e>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800439e:	d016      	beq.n	80043ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2211      	movs	r2, #17
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ff9b 	bl	8004302 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043cc:	e060      	b.n	8004490 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d107      	bne.n	8004418 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff88 	bl	8004326 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004416:	e03b      	b.n	8004490 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ff6e 	bl	8004302 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004426:	e033      	b.n	8004490 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b21      	cmp	r3, #33	; 0x21
 800442c:	d005      	beq.n	800443a <I2C_MasterTransmit_TXE+0xda>
 800442e:	7bbb      	ldrb	r3, [r7, #14]
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d12d      	bne.n	8004490 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b22      	cmp	r3, #34	; 0x22
 8004438:	d12a      	bne.n	8004490 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d108      	bne.n	8004456 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004452:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004454:	e01c      	b.n	8004490 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d103      	bne.n	800446a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f88e 	bl	8004584 <I2C_MemoryTransmit_TXE_BTF>
}
 8004468:	e012      	b.n	8004490 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	781a      	ldrb	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800448e:	e7ff      	b.n	8004490 <I2C_MasterTransmit_TXE+0x130>
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b21      	cmp	r3, #33	; 0x21
 80044b0:	d164      	bne.n	800457c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d012      	beq.n	80044e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	781a      	ldrb	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80044e0:	e04c      	b.n	800457c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d01d      	beq.n	8004524 <I2C_MasterTransmit_BTF+0x8c>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b20      	cmp	r3, #32
 80044ec:	d01a      	beq.n	8004524 <I2C_MasterTransmit_BTF+0x8c>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044f4:	d016      	beq.n	8004524 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004504:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2211      	movs	r2, #17
 800450a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff fef0 	bl	8004302 <HAL_I2C_MasterTxCpltCallback>
}
 8004522:	e02b      	b.n	800457c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004532:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004542:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d107      	bne.n	800456e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fedd 	bl	8004326 <HAL_I2C_MemTxCpltCallback>
}
 800456c:	e006      	b.n	800457c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fec3 	bl	8004302 <HAL_I2C_MasterTxCpltCallback>
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004592:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11d      	bne.n	80045d8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d10b      	bne.n	80045bc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b4:	1c9a      	adds	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80045ba:	e073      	b.n	80046a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	121b      	asrs	r3, r3, #8
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045d6:	e065      	b.n	80046a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10b      	bne.n	80045f8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045f6:	e055      	b.n	80046a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d151      	bne.n	80046a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	2b22      	cmp	r3, #34	; 0x22
 8004604:	d10d      	bne.n	8004622 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004614:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004620:	e040      	b.n	80046a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d015      	beq.n	8004658 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b21      	cmp	r3, #33	; 0x21
 8004630:	d112      	bne.n	8004658 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	781a      	ldrb	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004656:	e025      	b.n	80046a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d120      	bne.n	80046a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b21      	cmp	r3, #33	; 0x21
 8004666:	d11d      	bne.n	80046a4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004676:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7ff fe41 	bl	8004326 <HAL_I2C_MemTxCpltCallback>
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b22      	cmp	r3, #34	; 0x22
 80046be:	f040 80a2 	bne.w	8004806 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d921      	bls.n	8004714 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691a      	ldr	r2, [r3, #16]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	f040 8082 	bne.w	8004806 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004710:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004712:	e078      	b.n	8004806 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	2b02      	cmp	r3, #2
 800471a:	d074      	beq.n	8004806 <I2C_MasterReceive_RXNE+0x15a>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d002      	beq.n	8004728 <I2C_MasterReceive_RXNE+0x7c>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d16e      	bne.n	8004806 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f001 f823 	bl	8005774 <I2C_WaitOnSTOPRequestThroughIT>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d142      	bne.n	80047ba <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004752:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	1c5a      	adds	r2, r3, #1
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d10a      	bne.n	80047a4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff fdcb 	bl	8004338 <HAL_I2C_MemRxCpltCallback>
}
 80047a2:	e030      	b.n	8004806 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2212      	movs	r2, #18
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff fdae 	bl	8004314 <HAL_I2C_MasterRxCpltCallback>
}
 80047b8:	e025      	b.n	8004806 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	b2d2      	uxtb	r2, r2
 80047d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7fd f8eb 	bl	80019dc <HAL_I2C_ErrorCallback>
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b04      	cmp	r3, #4
 8004824:	d11b      	bne.n	800485e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004834:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800485c:	e0bd      	b.n	80049da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b03      	cmp	r3, #3
 8004866:	d129      	bne.n	80048bc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004876:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b04      	cmp	r3, #4
 800487c:	d00a      	beq.n	8004894 <I2C_MasterReceive_BTF+0x86>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b02      	cmp	r3, #2
 8004882:	d007      	beq.n	8004894 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004892:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048ba:	e08e      	b.n	80049da <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d176      	bne.n	80049b4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d002      	beq.n	80048d2 <I2C_MasterReceive_BTF+0xc4>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d108      	bne.n	80048e4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e019      	b.n	8004918 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d002      	beq.n	80048f0 <I2C_MasterReceive_BTF+0xe2>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d108      	bne.n	8004902 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	e00a      	b.n	8004918 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b10      	cmp	r3, #16
 8004906:	d007      	beq.n	8004918 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004916:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004972:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d10a      	bne.n	800499e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fcce 	bl	8004338 <HAL_I2C_MemRxCpltCallback>
}
 800499c:	e01d      	b.n	80049da <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2212      	movs	r2, #18
 80049aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff fcb1 	bl	8004314 <HAL_I2C_MasterRxCpltCallback>
}
 80049b2:	e012      	b.n	80049da <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d117      	bne.n	8004a26 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a0e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a10:	e067      	b.n	8004ae2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f043 0301 	orr.w	r3, r3, #1
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	611a      	str	r2, [r3, #16]
}
 8004a24:	e05d      	b.n	8004ae2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a2e:	d133      	bne.n	8004a98 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b21      	cmp	r3, #33	; 0x21
 8004a3a:	d109      	bne.n	8004a50 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a4c:	611a      	str	r2, [r3, #16]
 8004a4e:	e008      	b.n	8004a62 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d004      	beq.n	8004a74 <I2C_Master_SB+0x92>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d108      	bne.n	8004a86 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d032      	beq.n	8004ae2 <I2C_Master_SB+0x100>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d02d      	beq.n	8004ae2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a94:	605a      	str	r2, [r3, #4]
}
 8004a96:	e024      	b.n	8004ae2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10e      	bne.n	8004abe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	11db      	asrs	r3, r3, #7
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	f003 0306 	and.w	r3, r3, #6
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	f063 030f 	orn	r3, r3, #15
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	611a      	str	r2, [r3, #16]
}
 8004abc:	e011      	b.n	8004ae2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d10d      	bne.n	8004ae2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	11db      	asrs	r3, r3, #7
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f003 0306 	and.w	r3, r3, #6
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f063 030e 	orn	r3, r3, #14
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	611a      	str	r2, [r3, #16]
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <I2C_Master_ADD10+0x26>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d108      	bne.n	8004b24 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00c      	beq.n	8004b34 <I2C_Master_ADD10+0x48>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b32:	605a      	str	r2, [r3, #4]
  }
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr

08004b3e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b091      	sub	sp, #68	; 0x44
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b22      	cmp	r3, #34	; 0x22
 8004b66:	f040 8174 	bne.w	8004e52 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10f      	bne.n	8004b92 <I2C_Master_ADDR+0x54>
 8004b72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d10b      	bne.n	8004b92 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	633b      	str	r3, [r7, #48]	; 0x30
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	e16b      	b.n	8004e6a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d11d      	bne.n	8004bd6 <I2C_Master_ADDR+0x98>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ba2:	d118      	bne.n	8004bd6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bc8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	651a      	str	r2, [r3, #80]	; 0x50
 8004bd4:	e149      	b.n	8004e6a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d113      	bne.n	8004c08 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be0:	2300      	movs	r3, #0
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e120      	b.n	8004e4a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	f040 808a 	bne.w	8004d28 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c1a:	d137      	bne.n	8004c8c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c3a:	d113      	bne.n	8004c64 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	e0f2      	b.n	8004e4a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c64:	2300      	movs	r3, #0
 8004c66:	623b      	str	r3, [r7, #32]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	623b      	str	r3, [r7, #32]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e0de      	b.n	8004e4a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8e:	2b08      	cmp	r3, #8
 8004c90:	d02e      	beq.n	8004cf0 <I2C_Master_ADDR+0x1b2>
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d02b      	beq.n	8004cf0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9a:	2b12      	cmp	r3, #18
 8004c9c:	d102      	bne.n	8004ca4 <I2C_Master_ADDR+0x166>
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d125      	bne.n	8004cf0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d00e      	beq.n	8004cc8 <I2C_Master_ADDR+0x18a>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d00b      	beq.n	8004cc8 <I2C_Master_ADDR+0x18a>
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	2b10      	cmp	r3, #16
 8004cb4:	d008      	beq.n	8004cc8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	e007      	b.n	8004cd8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cd6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	e0ac      	b.n	8004e4a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d00:	2300      	movs	r3, #0
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	61bb      	str	r3, [r7, #24]
 8004d14:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	e090      	b.n	8004e4a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d158      	bne.n	8004de4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d021      	beq.n	8004d7c <I2C_Master_ADDR+0x23e>
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d01e      	beq.n	8004d7c <I2C_Master_ADDR+0x23e>
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d01b      	beq.n	8004d7c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d52:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e012      	b.n	8004da2 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d8a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db0:	d14b      	bne.n	8004e4a <I2C_Master_ADDR+0x30c>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004db8:	d00b      	beq.n	8004dd2 <I2C_Master_ADDR+0x294>
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d008      	beq.n	8004dd2 <I2C_Master_ADDR+0x294>
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d005      	beq.n	8004dd2 <I2C_Master_ADDR+0x294>
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d002      	beq.n	8004dd2 <I2C_Master_ADDR+0x294>
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d13b      	bne.n	8004e4a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	e032      	b.n	8004e4a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004df2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e02:	d117      	bne.n	8004e34 <I2C_Master_ADDR+0x2f6>
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e0a:	d00b      	beq.n	8004e24 <I2C_Master_ADDR+0x2e6>
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d008      	beq.n	8004e24 <I2C_Master_ADDR+0x2e6>
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d005      	beq.n	8004e24 <I2C_Master_ADDR+0x2e6>
 8004e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d002      	beq.n	8004e24 <I2C_Master_ADDR+0x2e6>
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d107      	bne.n	8004e34 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e32:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e50:	e00b      	b.n	8004e6a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	68bb      	ldr	r3, [r7, #8]
}
 8004e68:	e7ff      	b.n	8004e6a <I2C_Master_ADDR+0x32c>
 8004e6a:	bf00      	nop
 8004e6c:	3744      	adds	r7, #68	; 0x44
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d02b      	beq.n	8004ee6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d114      	bne.n	8004ee6 <I2C_SlaveTransmit_TXE+0x72>
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b29      	cmp	r3, #41	; 0x29
 8004ec0:	d111      	bne.n	8004ee6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2221      	movs	r2, #33	; 0x21
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2228      	movs	r2, #40	; 0x28
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fc fd51 	bl	8001988 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d011      	beq.n	8004f24 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	781a      	ldrb	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02c      	beq.n	8004fa2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	1c5a      	adds	r2, r3, #1
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	3b01      	subs	r3, #1
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d114      	bne.n	8004fa2 <I2C_SlaveReceive_RXNE+0x74>
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f7c:	d111      	bne.n	8004fa2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2222      	movs	r2, #34	; 0x22
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2228      	movs	r2, #40	; 0x28
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fc fcb5 	bl	800190c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d012      	beq.n	8004fe2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005006:	2b28      	cmp	r3, #40	; 0x28
 8005008:	d127      	bne.n	800505a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005018:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	089b      	lsrs	r3, r3, #2
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	09db      	lsrs	r3, r3, #7
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	81bb      	strh	r3, [r7, #12]
 800503c:	e002      	b.n	8005044 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800504c:	89ba      	ldrh	r2, [r7, #12]
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fc fc1c 	bl	8001890 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005058:	e00e      	b.n	8005078 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005078:	bf00      	nop
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800509e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050a0:	2300      	movs	r3, #0
 80050a2:	60bb      	str	r3, [r7, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0201 	orr.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050dc:	d172      	bne.n	80051c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b22      	cmp	r3, #34	; 0x22
 80050e2:	d002      	beq.n	80050ea <I2C_Slave_STOPF+0x6a>
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b2a      	cmp	r3, #42	; 0x2a
 80050e8:	d135      	bne.n	8005156 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f043 0204 	orr.w	r2, r3, #4
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800511c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe f8a6 	bl	8003274 <HAL_DMA_GetState>
 8005128:	4603      	mov	r3, r0
 800512a:	2b01      	cmp	r3, #1
 800512c:	d049      	beq.n	80051c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	4a69      	ldr	r2, [pc, #420]	; (80052d8 <I2C_Slave_STOPF+0x258>)
 8005134:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe f824 	bl	8003188 <HAL_DMA_Abort_IT>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d03d      	beq.n	80051c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005150:	4610      	mov	r0, r2
 8005152:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005154:	e035      	b.n	80051c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	b29a      	uxth	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f043 0204 	orr.w	r2, r3, #4
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005188:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe f870 	bl	8003274 <HAL_DMA_GetState>
 8005194:	4603      	mov	r3, r0
 8005196:	2b01      	cmp	r3, #1
 8005198:	d014      	beq.n	80051c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519e:	4a4e      	ldr	r2, [pc, #312]	; (80052d8 <I2C_Slave_STOPF+0x258>)
 80051a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fd ffee 	bl	8003188 <HAL_DMA_Abort_IT>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d008      	beq.n	80051c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051bc:	4610      	mov	r0, r2
 80051be:	4798      	blx	r3
 80051c0:	e000      	b.n	80051c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d03e      	beq.n	800524c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d112      	bne.n	8005202 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520c:	2b40      	cmp	r3, #64	; 0x40
 800520e:	d112      	bne.n	8005236 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691a      	ldr	r2, [r3, #16]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	f043 0204 	orr.w	r2, r3, #4
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f8b3 	bl	80053c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800525a:	e039      	b.n	80052d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b2a      	cmp	r3, #42	; 0x2a
 8005260:	d109      	bne.n	8005276 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2228      	movs	r2, #40	; 0x28
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fc fb4b 	bl	800190c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b28      	cmp	r3, #40	; 0x28
 8005280:	d111      	bne.n	80052a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a15      	ldr	r2, [pc, #84]	; (80052dc <I2C_Slave_STOPF+0x25c>)
 8005286:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7fc fae6 	bl	8001870 <HAL_I2C_ListenCpltCallback>
}
 80052a4:	e014      	b.n	80052d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	2b22      	cmp	r3, #34	; 0x22
 80052ac:	d002      	beq.n	80052b4 <I2C_Slave_STOPF+0x234>
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	2b22      	cmp	r3, #34	; 0x22
 80052b2:	d10d      	bne.n	80052d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2220      	movs	r2, #32
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fc fb1e 	bl	800190c <HAL_I2C_SlaveRxCpltCallback>
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	08005625 	.word	0x08005625
 80052dc:	ffff0000 	.word	0xffff0000

080052e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d002      	beq.n	8005302 <I2C_Slave_AF+0x22>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d129      	bne.n	8005356 <I2C_Slave_AF+0x76>
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	2b28      	cmp	r3, #40	; 0x28
 8005306:	d126      	bne.n	8005356 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <I2C_Slave_AF+0xdc>)
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800531c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005326:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005336:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc fa8e 	bl	8001870 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005354:	e02e      	b.n	80053b4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b21      	cmp	r3, #33	; 0x21
 800535a:	d126      	bne.n	80053aa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a17      	ldr	r2, [pc, #92]	; (80053bc <I2C_Slave_AF+0xdc>)
 8005360:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2221      	movs	r2, #33	; 0x21
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005386:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005390:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fc faf0 	bl	8001988 <HAL_I2C_SlaveTxCpltCallback>
}
 80053a8:	e004      	b.n	80053b4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053b2:	615a      	str	r2, [r3, #20]
}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	ffff0000 	.word	0xffff0000

080053c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053d8:	7bbb      	ldrb	r3, [r7, #14]
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d002      	beq.n	80053e4 <I2C_ITError+0x24>
 80053de:	7bbb      	ldrb	r3, [r7, #14]
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d10a      	bne.n	80053fa <I2C_ITError+0x3a>
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b22      	cmp	r3, #34	; 0x22
 80053e8:	d107      	bne.n	80053fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005400:	2b28      	cmp	r3, #40	; 0x28
 8005402:	d107      	bne.n	8005414 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2228      	movs	r2, #40	; 0x28
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005412:	e015      	b.n	8005440 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005422:	d00a      	beq.n	800543a <I2C_ITError+0x7a>
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	2b60      	cmp	r3, #96	; 0x60
 8005428:	d007      	beq.n	800543a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800544a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544e:	d161      	bne.n	8005514 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800545e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005464:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005468:	2b01      	cmp	r3, #1
 800546a:	d020      	beq.n	80054ae <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005470:	4a6a      	ldr	r2, [pc, #424]	; (800561c <I2C_ITError+0x25c>)
 8005472:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005478:	4618      	mov	r0, r3
 800547a:	f7fd fe85 	bl	8003188 <HAL_DMA_Abort_IT>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8089 	beq.w	8005598 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0201 	bic.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054a8:	4610      	mov	r0, r2
 80054aa:	4798      	blx	r3
 80054ac:	e074      	b.n	8005598 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b2:	4a5a      	ldr	r2, [pc, #360]	; (800561c <I2C_ITError+0x25c>)
 80054b4:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fd fe64 	bl	8003188 <HAL_DMA_Abort_IT>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d068      	beq.n	8005598 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d10b      	bne.n	80054ec <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0201 	bic.w	r2, r2, #1
 80054fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800550e:	4610      	mov	r0, r2
 8005510:	4798      	blx	r3
 8005512:	e041      	b.n	8005598 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b60      	cmp	r3, #96	; 0x60
 800551e:	d125      	bne.n	800556c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2220      	movs	r2, #32
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005538:	2b40      	cmp	r3, #64	; 0x40
 800553a:	d10b      	bne.n	8005554 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0201 	bic.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fc fabb 	bl	8001ae0 <HAL_I2C_AbortCpltCallback>
 800556a:	e015      	b.n	8005598 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d10b      	bne.n	8005592 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fc fa22 	bl	80019dc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10e      	bne.n	80055c6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055d4:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d113      	bne.n	8005612 <I2C_ITError+0x252>
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	2b28      	cmp	r3, #40	; 0x28
 80055ee:	d110      	bne.n	8005612 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a0b      	ldr	r2, [pc, #44]	; (8005620 <I2C_ITError+0x260>)
 80055f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7fc f92f 	bl	8001870 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	08005625 	.word	0x08005625
 8005620:	ffff0000 	.word	0xffff0000

08005624 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800563c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800563e:	4b4b      	ldr	r3, [pc, #300]	; (800576c <I2C_DMAAbort+0x148>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	08db      	lsrs	r3, r3, #3
 8005644:	4a4a      	ldr	r2, [pc, #296]	; (8005770 <I2C_DMAAbort+0x14c>)
 8005646:	fba2 2303 	umull	r2, r3, r2, r3
 800564a:	0a1a      	lsrs	r2, r3, #8
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	00da      	lsls	r2, r3, #3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800566a:	e00a      	b.n	8005682 <I2C_DMAAbort+0x5e>
    }
    count--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3b01      	subs	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800567c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005680:	d0ea      	beq.n	8005658 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	2200      	movs	r2, #0
 8005690:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	2200      	movs	r2, #0
 80056a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	2200      	movs	r2, #0
 80056c6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d4:	2200      	movs	r2, #0
 80056d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b60      	cmp	r3, #96	; 0x60
 80056f2:	d10e      	bne.n	8005712 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800570a:	6978      	ldr	r0, [r7, #20]
 800570c:	f7fc f9e8 	bl	8001ae0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005710:	e027      	b.n	8005762 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005712:	7cfb      	ldrb	r3, [r7, #19]
 8005714:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005718:	2b28      	cmp	r3, #40	; 0x28
 800571a:	d117      	bne.n	800574c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 0201 	orr.w	r2, r2, #1
 800572a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800573a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2200      	movs	r2, #0
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2228      	movs	r2, #40	; 0x28
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800574a:	e007      	b.n	800575c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800575c:	6978      	ldr	r0, [r7, #20]
 800575e:	f7fc f93d 	bl	80019dc <HAL_I2C_ErrorCallback>
}
 8005762:	bf00      	nop
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000048 	.word	0x20000048
 8005770:	14f8b589 	.word	0x14f8b589

08005774 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005780:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	08db      	lsrs	r3, r3, #3
 8005786:	4a13      	ldr	r2, [pc, #76]	; (80057d4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005788:	fba2 2303 	umull	r2, r3, r2, r3
 800578c:	0a1a      	lsrs	r2, r3, #8
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3b01      	subs	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d107      	bne.n	80057b2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e008      	b.n	80057c4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c0:	d0e9      	beq.n	8005796 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3714      	adds	r7, #20
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000048 	.word	0x20000048
 80057d4:	14f8b589 	.word	0x14f8b589

080057d8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057e8:	d103      	bne.n	80057f2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80057f0:	e007      	b.n	8005802 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80057fa:	d102      	bne.n	8005802 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2208      	movs	r2, #8
 8005800:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr

0800580c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e272      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 8087 	beq.w	800593a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800582c:	4b92      	ldr	r3, [pc, #584]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f003 030c 	and.w	r3, r3, #12
 8005834:	2b04      	cmp	r3, #4
 8005836:	d00c      	beq.n	8005852 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005838:	4b8f      	ldr	r3, [pc, #572]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 030c 	and.w	r3, r3, #12
 8005840:	2b08      	cmp	r3, #8
 8005842:	d112      	bne.n	800586a <HAL_RCC_OscConfig+0x5e>
 8005844:	4b8c      	ldr	r3, [pc, #560]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d10b      	bne.n	800586a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005852:	4b89      	ldr	r3, [pc, #548]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d06c      	beq.n	8005938 <HAL_RCC_OscConfig+0x12c>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d168      	bne.n	8005938 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e24c      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005872:	d106      	bne.n	8005882 <HAL_RCC_OscConfig+0x76>
 8005874:	4b80      	ldr	r3, [pc, #512]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a7f      	ldr	r2, [pc, #508]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 800587a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	e02e      	b.n	80058e0 <HAL_RCC_OscConfig+0xd4>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10c      	bne.n	80058a4 <HAL_RCC_OscConfig+0x98>
 800588a:	4b7b      	ldr	r3, [pc, #492]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a7a      	ldr	r2, [pc, #488]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	4b78      	ldr	r3, [pc, #480]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a77      	ldr	r2, [pc, #476]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 800589c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	e01d      	b.n	80058e0 <HAL_RCC_OscConfig+0xd4>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCC_OscConfig+0xbc>
 80058ae:	4b72      	ldr	r3, [pc, #456]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a71      	ldr	r2, [pc, #452]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80058b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	4b6f      	ldr	r3, [pc, #444]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a6e      	ldr	r2, [pc, #440]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80058c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	e00b      	b.n	80058e0 <HAL_RCC_OscConfig+0xd4>
 80058c8:	4b6b      	ldr	r3, [pc, #428]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a6a      	ldr	r2, [pc, #424]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80058ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	4b68      	ldr	r3, [pc, #416]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a67      	ldr	r2, [pc, #412]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80058da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d013      	beq.n	8005910 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fd f8e6 	bl	8002ab8 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058f0:	f7fd f8e2 	bl	8002ab8 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	; 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e200      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005902:	4b5d      	ldr	r3, [pc, #372]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0xe4>
 800590e:	e014      	b.n	800593a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005910:	f7fd f8d2 	bl	8002ab8 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005918:	f7fd f8ce 	bl	8002ab8 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b64      	cmp	r3, #100	; 0x64
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e1ec      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800592a:	4b53      	ldr	r3, [pc, #332]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f0      	bne.n	8005918 <HAL_RCC_OscConfig+0x10c>
 8005936:	e000      	b.n	800593a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d063      	beq.n	8005a0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005946:	4b4c      	ldr	r3, [pc, #304]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f003 030c 	and.w	r3, r3, #12
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005952:	4b49      	ldr	r3, [pc, #292]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	2b08      	cmp	r3, #8
 800595c:	d11c      	bne.n	8005998 <HAL_RCC_OscConfig+0x18c>
 800595e:	4b46      	ldr	r3, [pc, #280]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d116      	bne.n	8005998 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800596a:	4b43      	ldr	r3, [pc, #268]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <HAL_RCC_OscConfig+0x176>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d001      	beq.n	8005982 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e1c0      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005982:	4b3d      	ldr	r3, [pc, #244]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4939      	ldr	r1, [pc, #228]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005996:	e03a      	b.n	8005a0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d020      	beq.n	80059e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059a0:	4b36      	ldr	r3, [pc, #216]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a6:	f7fd f887 	bl	8002ab8 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059ae:	f7fd f883 	bl	8002ab8 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e1a1      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c0:	4b2d      	ldr	r3, [pc, #180]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059cc:	4b2a      	ldr	r3, [pc, #168]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4927      	ldr	r1, [pc, #156]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	600b      	str	r3, [r1, #0]
 80059e0:	e015      	b.n	8005a0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059e2:	4b26      	ldr	r3, [pc, #152]	; (8005a7c <HAL_RCC_OscConfig+0x270>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e8:	f7fd f866 	bl	8002ab8 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059f0:	f7fd f862 	bl	8002ab8 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e180      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a02:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d03a      	beq.n	8005a90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d019      	beq.n	8005a56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a22:	4b17      	ldr	r3, [pc, #92]	; (8005a80 <HAL_RCC_OscConfig+0x274>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a28:	f7fd f846 	bl	8002ab8 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a30:	f7fd f842 	bl	8002ab8 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e160      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a42:	4b0d      	ldr	r3, [pc, #52]	; (8005a78 <HAL_RCC_OscConfig+0x26c>)
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a4e:	2001      	movs	r0, #1
 8005a50:	f000 fac4 	bl	8005fdc <RCC_Delay>
 8005a54:	e01c      	b.n	8005a90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <HAL_RCC_OscConfig+0x274>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a5c:	f7fd f82c 	bl	8002ab8 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a62:	e00f      	b.n	8005a84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a64:	f7fd f828 	bl	8002ab8 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d908      	bls.n	8005a84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e146      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
 8005a76:	bf00      	nop
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	42420000 	.word	0x42420000
 8005a80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a84:	4b92      	ldr	r3, [pc, #584]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e9      	bne.n	8005a64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80a6 	beq.w	8005bea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aa2:	4b8b      	ldr	r3, [pc, #556]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10d      	bne.n	8005aca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aae:	4b88      	ldr	r3, [pc, #544]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	4a87      	ldr	r2, [pc, #540]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	61d3      	str	r3, [r2, #28]
 8005aba:	4b85      	ldr	r3, [pc, #532]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aca:	4b82      	ldr	r3, [pc, #520]	; (8005cd4 <HAL_RCC_OscConfig+0x4c8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d118      	bne.n	8005b08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ad6:	4b7f      	ldr	r3, [pc, #508]	; (8005cd4 <HAL_RCC_OscConfig+0x4c8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a7e      	ldr	r2, [pc, #504]	; (8005cd4 <HAL_RCC_OscConfig+0x4c8>)
 8005adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ae2:	f7fc ffe9 	bl	8002ab8 <HAL_GetTick>
 8005ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae8:	e008      	b.n	8005afc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aea:	f7fc ffe5 	bl	8002ab8 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b64      	cmp	r3, #100	; 0x64
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e103      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005afc:	4b75      	ldr	r3, [pc, #468]	; (8005cd4 <HAL_RCC_OscConfig+0x4c8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d106      	bne.n	8005b1e <HAL_RCC_OscConfig+0x312>
 8005b10:	4b6f      	ldr	r3, [pc, #444]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	4a6e      	ldr	r2, [pc, #440]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	6213      	str	r3, [r2, #32]
 8005b1c:	e02d      	b.n	8005b7a <HAL_RCC_OscConfig+0x36e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10c      	bne.n	8005b40 <HAL_RCC_OscConfig+0x334>
 8005b26:	4b6a      	ldr	r3, [pc, #424]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	4a69      	ldr	r2, [pc, #420]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b2c:	f023 0301 	bic.w	r3, r3, #1
 8005b30:	6213      	str	r3, [r2, #32]
 8005b32:	4b67      	ldr	r3, [pc, #412]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	4a66      	ldr	r2, [pc, #408]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b38:	f023 0304 	bic.w	r3, r3, #4
 8005b3c:	6213      	str	r3, [r2, #32]
 8005b3e:	e01c      	b.n	8005b7a <HAL_RCC_OscConfig+0x36e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	2b05      	cmp	r3, #5
 8005b46:	d10c      	bne.n	8005b62 <HAL_RCC_OscConfig+0x356>
 8005b48:	4b61      	ldr	r3, [pc, #388]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	4a60      	ldr	r2, [pc, #384]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b4e:	f043 0304 	orr.w	r3, r3, #4
 8005b52:	6213      	str	r3, [r2, #32]
 8005b54:	4b5e      	ldr	r3, [pc, #376]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	4a5d      	ldr	r2, [pc, #372]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b5a:	f043 0301 	orr.w	r3, r3, #1
 8005b5e:	6213      	str	r3, [r2, #32]
 8005b60:	e00b      	b.n	8005b7a <HAL_RCC_OscConfig+0x36e>
 8005b62:	4b5b      	ldr	r3, [pc, #364]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	4a5a      	ldr	r2, [pc, #360]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	6213      	str	r3, [r2, #32]
 8005b6e:	4b58      	ldr	r3, [pc, #352]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	4a57      	ldr	r2, [pc, #348]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005b74:	f023 0304 	bic.w	r3, r3, #4
 8005b78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d015      	beq.n	8005bae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b82:	f7fc ff99 	bl	8002ab8 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b88:	e00a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b8a:	f7fc ff95 	bl	8002ab8 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e0b1      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba0:	4b4b      	ldr	r3, [pc, #300]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0ee      	beq.n	8005b8a <HAL_RCC_OscConfig+0x37e>
 8005bac:	e014      	b.n	8005bd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bae:	f7fc ff83 	bl	8002ab8 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bb4:	e00a      	b.n	8005bcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb6:	f7fc ff7f 	bl	8002ab8 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e09b      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bcc:	4b40      	ldr	r3, [pc, #256]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005bce:	6a1b      	ldr	r3, [r3, #32]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1ee      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d105      	bne.n	8005bea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bde:	4b3c      	ldr	r3, [pc, #240]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4a3b      	ldr	r2, [pc, #236]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 8087 	beq.w	8005d02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bf4:	4b36      	ldr	r3, [pc, #216]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f003 030c 	and.w	r3, r3, #12
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d061      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d146      	bne.n	8005c96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c08:	4b33      	ldr	r3, [pc, #204]	; (8005cd8 <HAL_RCC_OscConfig+0x4cc>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0e:	f7fc ff53 	bl	8002ab8 <HAL_GetTick>
 8005c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c14:	e008      	b.n	8005c28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c16:	f7fc ff4f 	bl	8002ab8 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e06d      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c28:	4b29      	ldr	r3, [pc, #164]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1f0      	bne.n	8005c16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d108      	bne.n	8005c50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	4921      	ldr	r1, [pc, #132]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c50:	4b1f      	ldr	r3, [pc, #124]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a19      	ldr	r1, [r3, #32]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	430b      	orrs	r3, r1
 8005c62:	491b      	ldr	r1, [pc, #108]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c68:	4b1b      	ldr	r3, [pc, #108]	; (8005cd8 <HAL_RCC_OscConfig+0x4cc>)
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6e:	f7fc ff23 	bl	8002ab8 <HAL_GetTick>
 8005c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c76:	f7fc ff1f 	bl	8002ab8 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e03d      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c88:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0f0      	beq.n	8005c76 <HAL_RCC_OscConfig+0x46a>
 8005c94:	e035      	b.n	8005d02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c96:	4b10      	ldr	r3, [pc, #64]	; (8005cd8 <HAL_RCC_OscConfig+0x4cc>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fc ff0c 	bl	8002ab8 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca4:	f7fc ff08 	bl	8002ab8 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e026      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cb6:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <HAL_RCC_OscConfig+0x4c4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f0      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x498>
 8005cc2:	e01e      	b.n	8005d02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d107      	bne.n	8005cdc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e019      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
 8005cd0:	40021000 	.word	0x40021000
 8005cd4:	40007000 	.word	0x40007000
 8005cd8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005cdc:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <HAL_RCC_OscConfig+0x500>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d106      	bne.n	8005cfe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d001      	beq.n	8005d02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	40021000 	.word	0x40021000

08005d10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0d0      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d24:	4b6a      	ldr	r3, [pc, #424]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d910      	bls.n	8005d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d32:	4b67      	ldr	r3, [pc, #412]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 0207 	bic.w	r2, r3, #7
 8005d3a:	4965      	ldr	r1, [pc, #404]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d42:	4b63      	ldr	r3, [pc, #396]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e0b8      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d020      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d6c:	4b59      	ldr	r3, [pc, #356]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	4a58      	ldr	r2, [pc, #352]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0308 	and.w	r3, r3, #8
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d84:	4b53      	ldr	r3, [pc, #332]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4a52      	ldr	r2, [pc, #328]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d90:	4b50      	ldr	r3, [pc, #320]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	494d      	ldr	r1, [pc, #308]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d040      	beq.n	8005e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d107      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005db6:	4b47      	ldr	r3, [pc, #284]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d115      	bne.n	8005dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e07f      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d107      	bne.n	8005dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dce:	4b41      	ldr	r3, [pc, #260]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e073      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dde:	4b3d      	ldr	r3, [pc, #244]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e06b      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dee:	4b39      	ldr	r3, [pc, #228]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f023 0203 	bic.w	r2, r3, #3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	4936      	ldr	r1, [pc, #216]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e00:	f7fc fe5a 	bl	8002ab8 <HAL_GetTick>
 8005e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e06:	e00a      	b.n	8005e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e08:	f7fc fe56 	bl	8002ab8 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e053      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e1e:	4b2d      	ldr	r3, [pc, #180]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f003 020c 	and.w	r2, r3, #12
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d1eb      	bne.n	8005e08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e30:	4b27      	ldr	r3, [pc, #156]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d210      	bcs.n	8005e60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3e:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f023 0207 	bic.w	r2, r3, #7
 8005e46:	4922      	ldr	r1, [pc, #136]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4e:	4b20      	ldr	r3, [pc, #128]	; (8005ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e032      	b.n	8005ec6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d008      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e6c:	4b19      	ldr	r3, [pc, #100]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	4916      	ldr	r1, [pc, #88]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e8a:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	490e      	ldr	r1, [pc, #56]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e9e:	f000 f821 	bl	8005ee4 <HAL_RCC_GetSysClockFreq>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	4b0b      	ldr	r3, [pc, #44]	; (8005ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	490a      	ldr	r1, [pc, #40]	; (8005ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8005eb0:	5ccb      	ldrb	r3, [r1, r3]
 8005eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb6:	4a09      	ldr	r2, [pc, #36]	; (8005edc <HAL_RCC_ClockConfig+0x1cc>)
 8005eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005eba:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <HAL_RCC_ClockConfig+0x1d0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fc fdb8 	bl	8002a34 <HAL_InitTick>

  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40022000 	.word	0x40022000
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	080073e0 	.word	0x080073e0
 8005edc:	20000048 	.word	0x20000048
 8005ee0:	2000004c 	.word	0x2000004c

08005ee4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee4:	b490      	push	{r4, r7}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005eea:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <HAL_RCC_GetSysClockFreq+0xac>)
 8005eec:	1d3c      	adds	r4, r7, #4
 8005eee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005ef4:	f240 2301 	movw	r3, #513	; 0x201
 8005ef8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
 8005efe:	2300      	movs	r3, #0
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	2300      	movs	r3, #0
 8005f04:	627b      	str	r3, [r7, #36]	; 0x24
 8005f06:	2300      	movs	r3, #0
 8005f08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f0e:	4b21      	ldr	r3, [pc, #132]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f003 030c 	and.w	r3, r3, #12
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d002      	beq.n	8005f24 <HAL_RCC_GetSysClockFreq+0x40>
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d003      	beq.n	8005f2a <HAL_RCC_GetSysClockFreq+0x46>
 8005f22:	e02b      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f24:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f26:	623b      	str	r3, [r7, #32]
      break;
 8005f28:	e02b      	b.n	8005f82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	0c9b      	lsrs	r3, r3, #18
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	3328      	adds	r3, #40	; 0x28
 8005f34:	443b      	add	r3, r7
 8005f36:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005f3a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d012      	beq.n	8005f6c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f46:	4b13      	ldr	r3, [pc, #76]	; (8005f94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	0c5b      	lsrs	r3, r3, #17
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	3328      	adds	r3, #40	; 0x28
 8005f52:	443b      	add	r3, r7
 8005f54:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005f58:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	4a0e      	ldr	r2, [pc, #56]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f5e:	fb03 f202 	mul.w	r2, r3, r2
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
 8005f6a:	e004      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	4a0b      	ldr	r2, [pc, #44]	; (8005f9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	623b      	str	r3, [r7, #32]
      break;
 8005f7a:	e002      	b.n	8005f82 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f7e:	623b      	str	r3, [r7, #32]
      break;
 8005f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f82:	6a3b      	ldr	r3, [r7, #32]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3728      	adds	r7, #40	; 0x28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bc90      	pop	{r4, r7}
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	080073d0 	.word	0x080073d0
 8005f94:	40021000 	.word	0x40021000
 8005f98:	007a1200 	.word	0x007a1200
 8005f9c:	003d0900 	.word	0x003d0900

08005fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fa4:	4b02      	ldr	r3, [pc, #8]	; (8005fb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr
 8005fb0:	20000048 	.word	0x20000048

08005fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fb8:	f7ff fff2 	bl	8005fa0 <HAL_RCC_GetHCLKFreq>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	4903      	ldr	r1, [pc, #12]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fca:	5ccb      	ldrb	r3, [r1, r3]
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	080073f0 	.word	0x080073f0

08005fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005fe4:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <RCC_Delay+0x34>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a0a      	ldr	r2, [pc, #40]	; (8006014 <RCC_Delay+0x38>)
 8005fea:	fba2 2303 	umull	r2, r3, r2, r3
 8005fee:	0a5b      	lsrs	r3, r3, #9
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ff8:	bf00      	nop
  }
  while (Delay --);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	1e5a      	subs	r2, r3, #1
 8005ffe:	60fa      	str	r2, [r7, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f9      	bne.n	8005ff8 <RCC_Delay+0x1c>
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr
 8006010:	20000048 	.word	0x20000048
 8006014:	10624dd3 	.word	0x10624dd3

08006018 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d07d      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006034:	2300      	movs	r3, #0
 8006036:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006038:	4b4f      	ldr	r3, [pc, #316]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10d      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006044:	4b4c      	ldr	r3, [pc, #304]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	4a4b      	ldr	r2, [pc, #300]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604e:	61d3      	str	r3, [r2, #28]
 8006050:	4b49      	ldr	r3, [pc, #292]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006058:	60bb      	str	r3, [r7, #8]
 800605a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800605c:	2301      	movs	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006060:	4b46      	ldr	r3, [pc, #280]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006068:	2b00      	cmp	r3, #0
 800606a:	d118      	bne.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800606c:	4b43      	ldr	r3, [pc, #268]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a42      	ldr	r2, [pc, #264]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006076:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006078:	f7fc fd1e 	bl	8002ab8 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607e:	e008      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006080:	f7fc fd1a 	bl	8002ab8 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b64      	cmp	r3, #100	; 0x64
 800608c:	d901      	bls.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e06d      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006092:	4b3a      	ldr	r3, [pc, #232]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0f0      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800609e:	4b36      	ldr	r3, [pc, #216]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d02e      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d027      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060bc:	4b2e      	ldr	r3, [pc, #184]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060c6:	4b2e      	ldr	r3, [pc, #184]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060cc:	4b2c      	ldr	r3, [pc, #176]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80060d2:	4a29      	ldr	r2, [pc, #164]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d014      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e2:	f7fc fce9 	bl	8002ab8 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e8:	e00a      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ea:	f7fc fce5 	bl	8002ab8 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d901      	bls.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e036      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006100:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0ee      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800610c:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4917      	ldr	r1, [pc, #92]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800611a:	4313      	orrs	r3, r2
 800611c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800611e:	7dfb      	ldrb	r3, [r7, #23]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d105      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006124:	4b14      	ldr	r3, [pc, #80]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	4a13      	ldr	r2, [pc, #76]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800612a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800613c:	4b0e      	ldr	r3, [pc, #56]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	490b      	ldr	r1, [pc, #44]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800614a:	4313      	orrs	r3, r2
 800614c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f003 0310 	and.w	r3, r3, #16
 8006156:	2b00      	cmp	r3, #0
 8006158:	d008      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	4904      	ldr	r1, [pc, #16]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006168:	4313      	orrs	r3, r2
 800616a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40021000 	.word	0x40021000
 800617c:	40007000 	.word	0x40007000
 8006180:	42420440 	.word	0x42420440

08006184 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e041      	b.n	800621a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc f922 	bl	80023f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3304      	adds	r3, #4
 80061c0:	4619      	mov	r1, r3
 80061c2:	4610      	mov	r0, r2
 80061c4:	f000 fce0 	bl	8006b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d109      	bne.n	8006248 <HAL_TIM_PWM_Start+0x24>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b01      	cmp	r3, #1
 800623e:	bf14      	ite	ne
 8006240:	2301      	movne	r3, #1
 8006242:	2300      	moveq	r3, #0
 8006244:	b2db      	uxtb	r3, r3
 8006246:	e022      	b.n	800628e <HAL_TIM_PWM_Start+0x6a>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b04      	cmp	r3, #4
 800624c:	d109      	bne.n	8006262 <HAL_TIM_PWM_Start+0x3e>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	bf14      	ite	ne
 800625a:	2301      	movne	r3, #1
 800625c:	2300      	moveq	r3, #0
 800625e:	b2db      	uxtb	r3, r3
 8006260:	e015      	b.n	800628e <HAL_TIM_PWM_Start+0x6a>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d109      	bne.n	800627c <HAL_TIM_PWM_Start+0x58>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	e008      	b.n	800628e <HAL_TIM_PWM_Start+0x6a>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b01      	cmp	r3, #1
 8006286:	bf14      	ite	ne
 8006288:	2301      	movne	r3, #1
 800628a:	2300      	moveq	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e05e      	b.n	8006354 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d104      	bne.n	80062a6 <HAL_TIM_PWM_Start+0x82>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a4:	e013      	b.n	80062ce <HAL_TIM_PWM_Start+0xaa>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d104      	bne.n	80062b6 <HAL_TIM_PWM_Start+0x92>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b4:	e00b      	b.n	80062ce <HAL_TIM_PWM_Start+0xaa>
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d104      	bne.n	80062c6 <HAL_TIM_PWM_Start+0xa2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c4:	e003      	b.n	80062ce <HAL_TIM_PWM_Start+0xaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2202      	movs	r2, #2
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2201      	movs	r2, #1
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 ff4d 	bl	8007176 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1e      	ldr	r2, [pc, #120]	; (800635c <HAL_TIM_PWM_Start+0x138>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d107      	bne.n	80062f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a18      	ldr	r2, [pc, #96]	; (800635c <HAL_TIM_PWM_Start+0x138>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d00e      	beq.n	800631e <HAL_TIM_PWM_Start+0xfa>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006308:	d009      	beq.n	800631e <HAL_TIM_PWM_Start+0xfa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a14      	ldr	r2, [pc, #80]	; (8006360 <HAL_TIM_PWM_Start+0x13c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d004      	beq.n	800631e <HAL_TIM_PWM_Start+0xfa>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a12      	ldr	r2, [pc, #72]	; (8006364 <HAL_TIM_PWM_Start+0x140>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d111      	bne.n	8006342 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b06      	cmp	r3, #6
 800632e:	d010      	beq.n	8006352 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006340:	e007      	b.n	8006352 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0201 	orr.w	r2, r2, #1
 8006350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40012c00 	.word	0x40012c00
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800

08006368 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e041      	b.n	80063fe <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fc f860 	bl	8002454 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f000 fbee 	bl	8006b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <HAL_TIM_IC_Start_IT+0x1a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800641e:	b2db      	uxtb	r3, r3
 8006420:	e013      	b.n	800644a <HAL_TIM_IC_Start_IT+0x42>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b04      	cmp	r3, #4
 8006426:	d104      	bne.n	8006432 <HAL_TIM_IC_Start_IT+0x2a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800642e:	b2db      	uxtb	r3, r3
 8006430:	e00b      	b.n	800644a <HAL_TIM_IC_Start_IT+0x42>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d104      	bne.n	8006442 <HAL_TIM_IC_Start_IT+0x3a>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800643e:	b2db      	uxtb	r3, r3
 8006440:	e003      	b.n	800644a <HAL_TIM_IC_Start_IT+0x42>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006448:	b2db      	uxtb	r3, r3
 800644a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d104      	bne.n	800645c <HAL_TIM_IC_Start_IT+0x54>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006458:	b2db      	uxtb	r3, r3
 800645a:	e013      	b.n	8006484 <HAL_TIM_IC_Start_IT+0x7c>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b04      	cmp	r3, #4
 8006460:	d104      	bne.n	800646c <HAL_TIM_IC_Start_IT+0x64>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006468:	b2db      	uxtb	r3, r3
 800646a:	e00b      	b.n	8006484 <HAL_TIM_IC_Start_IT+0x7c>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b08      	cmp	r3, #8
 8006470:	d104      	bne.n	800647c <HAL_TIM_IC_Start_IT+0x74>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006478:	b2db      	uxtb	r3, r3
 800647a:	e003      	b.n	8006484 <HAL_TIM_IC_Start_IT+0x7c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006482:	b2db      	uxtb	r3, r3
 8006484:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d102      	bne.n	8006492 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800648c:	7bbb      	ldrb	r3, [r7, #14]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d001      	beq.n	8006496 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e0b3      	b.n	80065fe <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_IC_Start_IT+0x9e>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064a4:	e013      	b.n	80064ce <HAL_TIM_IC_Start_IT+0xc6>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_IC_Start_IT+0xae>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064b4:	e00b      	b.n	80064ce <HAL_TIM_IC_Start_IT+0xc6>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d104      	bne.n	80064c6 <HAL_TIM_IC_Start_IT+0xbe>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c4:	e003      	b.n	80064ce <HAL_TIM_IC_Start_IT+0xc6>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d104      	bne.n	80064de <HAL_TIM_IC_Start_IT+0xd6>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064dc:	e013      	b.n	8006506 <HAL_TIM_IC_Start_IT+0xfe>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d104      	bne.n	80064ee <HAL_TIM_IC_Start_IT+0xe6>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064ec:	e00b      	b.n	8006506 <HAL_TIM_IC_Start_IT+0xfe>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d104      	bne.n	80064fe <HAL_TIM_IC_Start_IT+0xf6>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064fc:	e003      	b.n	8006506 <HAL_TIM_IC_Start_IT+0xfe>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b0c      	cmp	r3, #12
 800650a:	d841      	bhi.n	8006590 <HAL_TIM_IC_Start_IT+0x188>
 800650c:	a201      	add	r2, pc, #4	; (adr r2, 8006514 <HAL_TIM_IC_Start_IT+0x10c>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	08006549 	.word	0x08006549
 8006518:	08006591 	.word	0x08006591
 800651c:	08006591 	.word	0x08006591
 8006520:	08006591 	.word	0x08006591
 8006524:	0800655b 	.word	0x0800655b
 8006528:	08006591 	.word	0x08006591
 800652c:	08006591 	.word	0x08006591
 8006530:	08006591 	.word	0x08006591
 8006534:	0800656d 	.word	0x0800656d
 8006538:	08006591 	.word	0x08006591
 800653c:	08006591 	.word	0x08006591
 8006540:	08006591 	.word	0x08006591
 8006544:	0800657f 	.word	0x0800657f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0202 	orr.w	r2, r2, #2
 8006556:	60da      	str	r2, [r3, #12]
      break;
 8006558:	e01b      	b.n	8006592 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0204 	orr.w	r2, r2, #4
 8006568:	60da      	str	r2, [r3, #12]
      break;
 800656a:	e012      	b.n	8006592 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68da      	ldr	r2, [r3, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0208 	orr.w	r2, r2, #8
 800657a:	60da      	str	r2, [r3, #12]
      break;
 800657c:	e009      	b.n	8006592 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0210 	orr.w	r2, r2, #16
 800658c:	60da      	str	r2, [r3, #12]
      break;
 800658e:	e000      	b.n	8006592 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8006590:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2201      	movs	r2, #1
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fdeb 	bl	8007176 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a18      	ldr	r2, [pc, #96]	; (8006608 <HAL_TIM_IC_Start_IT+0x200>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00e      	beq.n	80065c8 <HAL_TIM_IC_Start_IT+0x1c0>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b2:	d009      	beq.n	80065c8 <HAL_TIM_IC_Start_IT+0x1c0>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a14      	ldr	r2, [pc, #80]	; (800660c <HAL_TIM_IC_Start_IT+0x204>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d004      	beq.n	80065c8 <HAL_TIM_IC_Start_IT+0x1c0>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a13      	ldr	r2, [pc, #76]	; (8006610 <HAL_TIM_IC_Start_IT+0x208>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d111      	bne.n	80065ec <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b06      	cmp	r3, #6
 80065d8:	d010      	beq.n	80065fc <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ea:	e007      	b.n	80065fc <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40012c00 	.word	0x40012c00
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800

08006614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b02      	cmp	r3, #2
 8006628:	d122      	bne.n	8006670 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b02      	cmp	r3, #2
 8006636:	d11b      	bne.n	8006670 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0202 	mvn.w	r2, #2
 8006640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fb ffca 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fa76 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fa7c 	bl	8006b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b04      	cmp	r3, #4
 800667c:	d122      	bne.n	80066c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b04      	cmp	r3, #4
 800668a:	d11b      	bne.n	80066c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0204 	mvn.w	r2, #4
 8006694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fb ffa0 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 80066b0:	e005      	b.n	80066be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fa4c 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fa52 	bl	8006b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d122      	bne.n	8006718 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0308 	and.w	r3, r3, #8
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d11b      	bne.n	8006718 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0208 	mvn.w	r2, #8
 80066e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2204      	movs	r2, #4
 80066ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7fb ff76 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8006704:	e005      	b.n	8006712 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa22 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fa28 	bl	8006b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	2b10      	cmp	r3, #16
 8006724:	d122      	bne.n	800676c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0310 	and.w	r3, r3, #16
 8006730:	2b10      	cmp	r3, #16
 8006732:	d11b      	bne.n	800676c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0210 	mvn.w	r2, #16
 800673c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2208      	movs	r2, #8
 8006742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7fb ff4c 	bl	80025f0 <HAL_TIM_IC_CaptureCallback>
 8006758:	e005      	b.n	8006766 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9f8 	bl	8006b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f9fe 	bl	8006b62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b01      	cmp	r3, #1
 8006778:	d10e      	bne.n	8006798 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b01      	cmp	r3, #1
 8006786:	d107      	bne.n	8006798 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0201 	mvn.w	r2, #1
 8006790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fc f8f0 	bl	8002978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a2:	2b80      	cmp	r3, #128	; 0x80
 80067a4:	d10e      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b0:	2b80      	cmp	r3, #128	; 0x80
 80067b2:	d107      	bne.n	80067c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fdb6 	bl	8007330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d10e      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067dc:	2b40      	cmp	r3, #64	; 0x40
 80067de:	d107      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f9c2 	bl	8006b74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0320 	and.w	r3, r3, #32
 80067fa:	2b20      	cmp	r3, #32
 80067fc:	d10e      	bne.n	800681c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b20      	cmp	r3, #32
 800680a:	d107      	bne.n	800681c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0220 	mvn.w	r2, #32
 8006814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fd81 	bl	800731e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_TIM_IC_ConfigChannel+0x1a>
 800683a:	2302      	movs	r3, #2
 800683c:	e082      	b.n	8006944 <HAL_TIM_IC_ConfigChannel+0x120>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d11b      	bne.n	8006884 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6818      	ldr	r0, [r3, #0]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	6819      	ldr	r1, [r3, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f000 fb7e 	bl	8006f5c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 020c 	bic.w	r2, r2, #12
 800686e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6999      	ldr	r1, [r3, #24]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	619a      	str	r2, [r3, #24]
 8006882:	e05a      	b.n	800693a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b04      	cmp	r3, #4
 8006888:	d11c      	bne.n	80068c4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	6819      	ldr	r1, [r3, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f000 fbb9 	bl	8007010 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6999      	ldr	r1, [r3, #24]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	021a      	lsls	r2, r3, #8
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	619a      	str	r2, [r3, #24]
 80068c2:	e03a      	b.n	800693a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d11b      	bne.n	8006902 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6818      	ldr	r0, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6819      	ldr	r1, [r3, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f000 fbd5 	bl	8007088 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69da      	ldr	r2, [r3, #28]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 020c 	bic.w	r2, r2, #12
 80068ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69d9      	ldr	r1, [r3, #28]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	61da      	str	r2, [r3, #28]
 8006900:	e01b      	b.n	800693a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6819      	ldr	r1, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f000 fbf4 	bl	80070fe <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69da      	ldr	r2, [r3, #28]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006924:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69d9      	ldr	r1, [r3, #28]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	021a      	lsls	r2, r3, #8
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006962:	2302      	movs	r3, #2
 8006964:	e0ac      	b.n	8006ac0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b0c      	cmp	r3, #12
 8006972:	f200 809f 	bhi.w	8006ab4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006976:	a201      	add	r2, pc, #4	; (adr r2, 800697c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697c:	080069b1 	.word	0x080069b1
 8006980:	08006ab5 	.word	0x08006ab5
 8006984:	08006ab5 	.word	0x08006ab5
 8006988:	08006ab5 	.word	0x08006ab5
 800698c:	080069f1 	.word	0x080069f1
 8006990:	08006ab5 	.word	0x08006ab5
 8006994:	08006ab5 	.word	0x08006ab5
 8006998:	08006ab5 	.word	0x08006ab5
 800699c:	08006a33 	.word	0x08006a33
 80069a0:	08006ab5 	.word	0x08006ab5
 80069a4:	08006ab5 	.word	0x08006ab5
 80069a8:	08006ab5 	.word	0x08006ab5
 80069ac:	08006a73 	.word	0x08006a73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 f948 	bl	8006c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0208 	orr.w	r2, r2, #8
 80069ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0204 	bic.w	r2, r2, #4
 80069da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6999      	ldr	r1, [r3, #24]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	619a      	str	r2, [r3, #24]
      break;
 80069ee:	e062      	b.n	8006ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68b9      	ldr	r1, [r7, #8]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f98e 	bl	8006d18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6999      	ldr	r1, [r3, #24]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	021a      	lsls	r2, r3, #8
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	619a      	str	r2, [r3, #24]
      break;
 8006a30:	e041      	b.n	8006ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 f9d7 	bl	8006dec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0208 	orr.w	r2, r2, #8
 8006a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0204 	bic.w	r2, r2, #4
 8006a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	69d9      	ldr	r1, [r3, #28]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	61da      	str	r2, [r3, #28]
      break;
 8006a70:	e021      	b.n	8006ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fa21 	bl	8006ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69da      	ldr	r2, [r3, #28]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69d9      	ldr	r1, [r3, #28]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	021a      	lsls	r2, r3, #8
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	61da      	str	r2, [r3, #28]
      break;
 8006ab2:	e000      	b.n	8006ab6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006ab4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b0c      	cmp	r3, #12
 8006ada:	d831      	bhi.n	8006b40 <HAL_TIM_ReadCapturedValue+0x78>
 8006adc:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006b19 	.word	0x08006b19
 8006ae8:	08006b41 	.word	0x08006b41
 8006aec:	08006b41 	.word	0x08006b41
 8006af0:	08006b41 	.word	0x08006b41
 8006af4:	08006b23 	.word	0x08006b23
 8006af8:	08006b41 	.word	0x08006b41
 8006afc:	08006b41 	.word	0x08006b41
 8006b00:	08006b41 	.word	0x08006b41
 8006b04:	08006b2d 	.word	0x08006b2d
 8006b08:	08006b41 	.word	0x08006b41
 8006b0c:	08006b41 	.word	0x08006b41
 8006b10:	08006b41 	.word	0x08006b41
 8006b14:	08006b37 	.word	0x08006b37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1e:	60fb      	str	r3, [r7, #12]

      break;
 8006b20:	e00f      	b.n	8006b42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	60fb      	str	r3, [r7, #12]

      break;
 8006b2a:	e00a      	b.n	8006b42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b32:	60fb      	str	r3, [r7, #12]

      break;
 8006b34:	e005      	b.n	8006b42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	60fb      	str	r3, [r7, #12]

      break;
 8006b3e:	e000      	b.n	8006b42 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006b40:	bf00      	nop
  }

  return tmpreg;
 8006b42:	68fb      	ldr	r3, [r7, #12]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bc80      	pop	{r7}
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop

08006b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr

08006b62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr

08006b74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr
	...

08006b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a29      	ldr	r2, [pc, #164]	; (8006c40 <TIM_Base_SetConfig+0xb8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00b      	beq.n	8006bb8 <TIM_Base_SetConfig+0x30>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba6:	d007      	beq.n	8006bb8 <TIM_Base_SetConfig+0x30>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a26      	ldr	r2, [pc, #152]	; (8006c44 <TIM_Base_SetConfig+0xbc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_Base_SetConfig+0x30>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a25      	ldr	r2, [pc, #148]	; (8006c48 <TIM_Base_SetConfig+0xc0>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d108      	bne.n	8006bca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	; (8006c40 <TIM_Base_SetConfig+0xb8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d00b      	beq.n	8006bea <TIM_Base_SetConfig+0x62>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd8:	d007      	beq.n	8006bea <TIM_Base_SetConfig+0x62>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a19      	ldr	r2, [pc, #100]	; (8006c44 <TIM_Base_SetConfig+0xbc>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <TIM_Base_SetConfig+0x62>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a18      	ldr	r2, [pc, #96]	; (8006c48 <TIM_Base_SetConfig+0xc0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d108      	bne.n	8006bfc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a07      	ldr	r2, [pc, #28]	; (8006c40 <TIM_Base_SetConfig+0xb8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d103      	bne.n	8006c30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	615a      	str	r2, [r3, #20]
}
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40000400 	.word	0x40000400
 8006c48:	40000800 	.word	0x40000800

08006c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0201 	bic.w	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0303 	bic.w	r3, r3, #3
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f023 0302 	bic.w	r3, r3, #2
 8006c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <TIM_OC1_SetConfig+0xc8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d10c      	bne.n	8006cc2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0308 	bic.w	r3, r3, #8
 8006cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	f023 0304 	bic.w	r3, r3, #4
 8006cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a13      	ldr	r2, [pc, #76]	; (8006d14 <TIM_OC1_SetConfig+0xc8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d111      	bne.n	8006cee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	621a      	str	r2, [r3, #32]
}
 8006d08:	bf00      	nop
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	40012c00 	.word	0x40012c00

08006d18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f023 0210 	bic.w	r2, r3, #16
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f023 0320 	bic.w	r3, r3, #32
 8006d62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <TIM_OC2_SetConfig+0xd0>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d10d      	bne.n	8006d94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a14      	ldr	r2, [pc, #80]	; (8006de8 <TIM_OC2_SetConfig+0xd0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d113      	bne.n	8006dc4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bc80      	pop	{r7}
 8006de6:	4770      	bx	lr
 8006de8:	40012c00 	.word	0x40012c00

08006dec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0303 	bic.w	r3, r3, #3
 8006e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	021b      	lsls	r3, r3, #8
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1d      	ldr	r2, [pc, #116]	; (8006ebc <TIM_OC3_SetConfig+0xd0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d10d      	bne.n	8006e66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	021b      	lsls	r3, r3, #8
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a14      	ldr	r2, [pc, #80]	; (8006ebc <TIM_OC3_SetConfig+0xd0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d113      	bne.n	8006e96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	621a      	str	r2, [r3, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40012c00 	.word	0x40012c00

08006ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	031b      	lsls	r3, r3, #12
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a0f      	ldr	r2, [pc, #60]	; (8006f58 <TIM_OC4_SetConfig+0x98>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d109      	bne.n	8006f34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	019b      	lsls	r3, r3, #6
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bc80      	pop	{r7}
 8006f56:	4770      	bx	lr
 8006f58:	40012c00 	.word	0x40012c00

08006f5c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f023 0201 	bic.w	r2, r3, #1
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4a1f      	ldr	r2, [pc, #124]	; (8007004 <TIM_TI1_SetConfig+0xa8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00b      	beq.n	8006fa2 <TIM_TI1_SetConfig+0x46>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f90:	d007      	beq.n	8006fa2 <TIM_TI1_SetConfig+0x46>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4a1c      	ldr	r2, [pc, #112]	; (8007008 <TIM_TI1_SetConfig+0xac>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d003      	beq.n	8006fa2 <TIM_TI1_SetConfig+0x46>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4a1b      	ldr	r2, [pc, #108]	; (800700c <TIM_TI1_SetConfig+0xb0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d101      	bne.n	8006fa6 <TIM_TI1_SetConfig+0x4a>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e000      	b.n	8006fa8 <TIM_TI1_SetConfig+0x4c>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d008      	beq.n	8006fbe <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f023 0303 	bic.w	r3, r3, #3
 8006fb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	e003      	b.n	8006fc6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f043 0301 	orr.w	r3, r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	011b      	lsls	r3, r3, #4
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f023 030a 	bic.w	r3, r3, #10
 8006fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f003 030a 	and.w	r3, r3, #10
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bc80      	pop	{r7}
 8007002:	4770      	bx	lr
 8007004:	40012c00 	.word	0x40012c00
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800

08007010 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	f023 0210 	bic.w	r2, r3, #16
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800703c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	4313      	orrs	r3, r2
 8007046:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800704e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	031b      	lsls	r3, r3, #12
 8007054:	b29b      	uxth	r3, r3
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007062:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	621a      	str	r2, [r3, #32]
}
 800707e:	bf00      	nop
 8007080:	371c      	adds	r7, #28
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 0303 	bic.w	r3, r3, #3
 80070b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	021b      	lsls	r3, r3, #8
 80070de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	697a      	ldr	r2, [r7, #20]
 80070ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	621a      	str	r2, [r3, #32]
}
 80070f4:	bf00      	nop
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bc80      	pop	{r7}
 80070fc:	4770      	bx	lr

080070fe <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070fe:	b480      	push	{r7}
 8007100:	b087      	sub	sp, #28
 8007102:	af00      	add	r7, sp, #0
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
 800710a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	021b      	lsls	r3, r3, #8
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800713c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	031b      	lsls	r3, r3, #12
 8007142:	b29b      	uxth	r3, r3
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	4313      	orrs	r3, r2
 8007148:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007150:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	031b      	lsls	r3, r3, #12
 8007156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	697a      	ldr	r2, [r7, #20]
 8007164:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	621a      	str	r2, [r3, #32]
}
 800716c:	bf00      	nop
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr

08007176 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007176:	b480      	push	{r7}
 8007178:	b087      	sub	sp, #28
 800717a:	af00      	add	r7, sp, #0
 800717c:	60f8      	str	r0, [r7, #12]
 800717e:	60b9      	str	r1, [r7, #8]
 8007180:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	2201      	movs	r2, #1
 800718a:	fa02 f303 	lsl.w	r3, r2, r3
 800718e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a1a      	ldr	r2, [r3, #32]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	43db      	mvns	r3, r3
 8007198:	401a      	ands	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1a      	ldr	r2, [r3, #32]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	fa01 f303 	lsl.w	r3, r1, r3
 80071ae:	431a      	orrs	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	621a      	str	r2, [r3, #32]
}
 80071b4:	bf00      	nop
 80071b6:	371c      	adds	r7, #28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc80      	pop	{r7}
 80071bc:	4770      	bx	lr
	...

080071c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e046      	b.n	8007266 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a16      	ldr	r2, [pc, #88]	; (8007270 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d00e      	beq.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007224:	d009      	beq.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a12      	ldr	r2, [pc, #72]	; (8007274 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d004      	beq.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a10      	ldr	r2, [pc, #64]	; (8007278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d10c      	bne.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007240:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	4313      	orrs	r3, r2
 800724a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr
 8007270:	40012c00 	.word	0x40012c00
 8007274:	40000400 	.word	0x40000400
 8007278:	40000800 	.word	0x40000800

0800727c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007294:	2302      	movs	r3, #2
 8007296:	e03d      	b.n	8007314 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	bc80      	pop	{r7}
 800731c:	4770      	bx	lr

0800731e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800731e:	b480      	push	{r7}
 8007320:	b083      	sub	sp, #12
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007326:	bf00      	nop
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr
	...

08007344 <__libc_init_array>:
 8007344:	b570      	push	{r4, r5, r6, lr}
 8007346:	2600      	movs	r6, #0
 8007348:	4d0c      	ldr	r5, [pc, #48]	; (800737c <__libc_init_array+0x38>)
 800734a:	4c0d      	ldr	r4, [pc, #52]	; (8007380 <__libc_init_array+0x3c>)
 800734c:	1b64      	subs	r4, r4, r5
 800734e:	10a4      	asrs	r4, r4, #2
 8007350:	42a6      	cmp	r6, r4
 8007352:	d109      	bne.n	8007368 <__libc_init_array+0x24>
 8007354:	f000 f830 	bl	80073b8 <_init>
 8007358:	2600      	movs	r6, #0
 800735a:	4d0a      	ldr	r5, [pc, #40]	; (8007384 <__libc_init_array+0x40>)
 800735c:	4c0a      	ldr	r4, [pc, #40]	; (8007388 <__libc_init_array+0x44>)
 800735e:	1b64      	subs	r4, r4, r5
 8007360:	10a4      	asrs	r4, r4, #2
 8007362:	42a6      	cmp	r6, r4
 8007364:	d105      	bne.n	8007372 <__libc_init_array+0x2e>
 8007366:	bd70      	pop	{r4, r5, r6, pc}
 8007368:	f855 3b04 	ldr.w	r3, [r5], #4
 800736c:	4798      	blx	r3
 800736e:	3601      	adds	r6, #1
 8007370:	e7ee      	b.n	8007350 <__libc_init_array+0xc>
 8007372:	f855 3b04 	ldr.w	r3, [r5], #4
 8007376:	4798      	blx	r3
 8007378:	3601      	adds	r6, #1
 800737a:	e7f2      	b.n	8007362 <__libc_init_array+0x1e>
 800737c:	080073f8 	.word	0x080073f8
 8007380:	080073f8 	.word	0x080073f8
 8007384:	080073f8 	.word	0x080073f8
 8007388:	080073fc 	.word	0x080073fc

0800738c <memcpy>:
 800738c:	440a      	add	r2, r1
 800738e:	4291      	cmp	r1, r2
 8007390:	f100 33ff 	add.w	r3, r0, #4294967295
 8007394:	d100      	bne.n	8007398 <memcpy+0xc>
 8007396:	4770      	bx	lr
 8007398:	b510      	push	{r4, lr}
 800739a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800739e:	4291      	cmp	r1, r2
 80073a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a4:	d1f9      	bne.n	800739a <memcpy+0xe>
 80073a6:	bd10      	pop	{r4, pc}

080073a8 <memset>:
 80073a8:	4603      	mov	r3, r0
 80073aa:	4402      	add	r2, r0
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d100      	bne.n	80073b2 <memset+0xa>
 80073b0:	4770      	bx	lr
 80073b2:	f803 1b01 	strb.w	r1, [r3], #1
 80073b6:	e7f9      	b.n	80073ac <memset+0x4>

080073b8 <_init>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr

080073c4 <_fini>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	bf00      	nop
 80073c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ca:	bc08      	pop	{r3}
 80073cc:	469e      	mov	lr, r3
 80073ce:	4770      	bx	lr
